{"file":"atomic-commerce-refine-toggle.js","mappings":";;;;;;;;;;;;;;;AAAA,MAAM,6BAA6B,GAAG,qi1DAAqi1D,CAAC;AAC5k1D,yCAAe,6BAA6B;;;;;;;;;;;;MC8B/BA,4BAA0B;;;;;;;;IAc9B,UAAU;QACf,MAAM,eAAe,GACnB,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,KAAK,QAAQ;cAC5C,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;cACjC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAEhD,IAAI,CAAC,OAAO,GAAG,eAAe,CAAC,OAAO,EAAE,CAAC;KAC1C;IAEO,SAAS;QACf,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,OAAO;SACR;QAED,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,8BAA8B,CAAC,CAAC;QACvE,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC9D,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC;KAC3C;IAEO,WAAW;QACjB,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC;KAChD;IAEM,MAAM;QACX,QACE,EAAC,iBAAiB,qDAChB,oBAAoB,EAAE,IAAI,CAAC,YAAY,CAAC,oBAAoB,EAC5D,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,EACpC,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,WAAW,IAEvC,EAAC,kBAAkB,qDACjB,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,EACxB,OAAO,EAAE,MAAM,IAAI,CAAC,WAAW,EAAE,EACjC,MAAM,EAAE,CAAC,MAAM;gBACb,IAAI,CAAC,MAAM,EAAE;oBACX,OAAO;iBACR;gBACD,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC;gBACxB,IAAI,CAAC,SAAS,EAAE,CAAC;aAClB,GACD,CACgB,EACpB;KACH;;;;;;;AAnDO;IAFP,qBAAqB,CAAC,SAAS,CAAC;kEAEsC;AAK1C;IAA5B,kBAAkB,EAAE;8DAAoC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["AtomicCommerceRefineToggle"],"sources":["src/components/commerce/atomic-commerce-refine-toggle/atomic-commerce-refine-toggle.pcss?tag=atomic-commerce-refine-toggle&encapsulation=shadow","src/components/commerce/atomic-commerce-refine-toggle/atomic-commerce-refine-toggle.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\n","import {\n  buildProductListing,\n  buildSearch,\n  Summary,\n  SearchSummaryState,\n  ProductListingSummaryState,\n} from '@coveo/headless/commerce';\nimport {Component, h, State, Element} from '@stencil/core';\nimport {\n  InitializeBindings,\n  InitializableComponent,\n  BindStateToController,\n} from '../../../utils/initialization-utils';\nimport {RefineToggleButton} from '../../common/refine-modal/button';\nimport {RefineToggleGuard} from '../../common/refine-modal/guard';\nimport {CommerceBindings} from '../atomic-commerce-interface/atomic-commerce-interface';\n\n/**\n * The `atomic-commerce-refine-toggle` component displays a button that opens a modal containing the facets and the sort components.\n *\n * When this component is added to the `atomic-commerce-search-interface`, an `atomic-commerce-refine-modal` component is automatically created.\n\n * @part button - The refine toggle button.\n *\n * @alpha\n */\n@Component({\n  tag: 'atomic-commerce-refine-toggle',\n  styleUrl: 'atomic-commerce-refine-toggle.pcss',\n  shadow: true,\n})\nexport class AtomicCommerceRefineToggle\n  implements InitializableComponent<CommerceBindings>\n{\n  public summary!: Summary;\n  @BindStateToController('summary')\n  @State()\n  private summaryState!: SearchSummaryState | ProductListingSummaryState;\n  @Element() public host!: HTMLElement;\n  private modalRef?: HTMLAtomicCommerceRefineModalElement;\n  private buttonRef?: HTMLButtonElement;\n\n  @InitializeBindings() public bindings!: CommerceBindings;\n  @State() public error!: Error;\n\n  public initialize() {\n    const searchOrListing =\n      this.bindings.interfaceElement.type === 'search'\n        ? buildSearch(this.bindings.engine)\n        : buildProductListing(this.bindings.engine);\n\n    this.summary = searchOrListing.summary();\n  }\n\n  private loadModal() {\n    if (this.modalRef) {\n      return;\n    }\n\n    this.modalRef = document.createElement('atomic-commerce-refine-modal');\n    this.host.insertAdjacentElement('beforebegin', this.modalRef);\n    this.modalRef.openButton = this.buttonRef;\n  }\n\n  private enableModal() {\n    this.modalRef && (this.modalRef.isOpen = true);\n  }\n\n  public render() {\n    return (\n      <RefineToggleGuard\n        firstRequestExecuted={this.summaryState.firstRequestExecuted}\n        hasError={this.summaryState.hasError}\n        hasItems={this.summaryState.hasProducts}\n      >\n        <RefineToggleButton\n          i18n={this.bindings.i18n}\n          onClick={() => this.enableModal()}\n          setRef={(button) => {\n            if (!button) {\n              return;\n            }\n            this.buttonRef = button;\n            this.loadModal();\n          }}\n        />\n      </RefineToggleGuard>\n    );\n  }\n}\n"],"version":3}