{"file":"atomic-sort-expression.js","mappings":";;;;;;;;;;;;;MAUaA,sBAAoB;;;;;;;;;;;;;QAgCxB,iBAAY,GAAsB,IAAI,CAAC;;;;;;;;;;QAavC,iBAAY,GAAsB,IAAI,CAAC;;;4BAbL,IAAI;4BAaJ,IAAI;;IAEtC,MAAM;QACX,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;YAChE,OAAO,CAAC,IAAI,CACV,qHAAqH,CACtH,CAAC;SACH;QAED,MAAM,iBAAiB,GAAG,sBAAsB,CAAC;QAEjD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,EAAE;YACzC,MAAM,KAAK,GAAG,IAAI,KAAK,CACrB,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,wCAAwC,iBAAiB,WAAW,CAC7G,CAAC;YACF,QACE,+EACE,OAAO,EAAE,IAAI,CAAC,IAAI,EAClB,KAAK,EAAE,KAAK,GACY,EAC1B;SACH;KACF;;;;;;;;AAnCM;IAFN,SAAS,EAAE;4DAEkC;AAavC;IAFN,SAAS,EAAE;4DAEkC;;;;;;;;;;;;;;;;;;;;","names":["AtomicSortExpression"],"sources":["src/components/search/atomic-sort-expression/atomic-sort-expression.tsx"],"sourcesContent":["import {Component, Prop, Element, h} from '@stencil/core';\nimport {ArrayProp} from '../../../utils/props-utils';\n\n/**\n * The `atomic-sort-expression` component defines a sort expression. This component must be inside an `atomic-sort-dropdown` component.\n */\n@Component({\n  tag: 'atomic-sort-expression',\n  shadow: false,\n})\nexport class AtomicSortExpression {\n  @Element() public host!: HTMLElement;\n\n  /**\n   * The non-localized label to display for this expression.\n   */\n  @Prop({reflect: true}) public label!: string;\n\n  /**\n   * One or more sort criteria that the end user can select or toggle between.\n   *\n   * The available sort criteria are:\n   *\n   * * `relevancy`\n   * * `date ascending`/`date descending`\n   * * `qre`\n   * * `<FIELD> ascending`/`<FIELD> descending`, where you replace `<FIELD>` with the name of a sortable field in your index (e.g., `criteria=\"size ascending\"`).\n   *\n   * You can specify multiple sort criteria to be used in the same request by separating them with a comma (e.g., `criteria=\"size ascending, date ascending\"`).\n   */\n  @Prop({reflect: true}) public expression!: string;\n  /**\n   * The tabs on which the sort expression can be displayed. This property should not be used at the same time as `tabs-excluded`.\n   *\n   * Set this property as a stringified JSON array, e.g.,\n   * ```html\n   *  <atomic-sort-expression tabs-included='[\"tabIDA\", \"tabIDB\"]'></atomic-sort-expression snippet>\n   * ```\n   * If you don't set this property, the sort expression can be displayed on any tab. Otherwise, the sort expression can only be displayed on the specified tabs.\n   */\n  @ArrayProp()\n  @Prop({reflect: true, mutable: true})\n  public tabsIncluded: string[] | string = '[]';\n\n  /**\n   * The tabs on which the sort expression must not be displayed. This property should not be used at the same time as `tabs-included`.\n   *\n   * Set this property as a stringified JSON array, e.g.,\n   * ```html\n   *  <atomic-sort-expression tabs-excluded='[\"tabIDA\", \"tabIDB\"]'></atomic-sort-expression>\n   * ```\n   * If you don't set this property, the sort expression can be displayed on any tab. Otherwise, the sort expression won't be displayed on any of the specified tabs.\n   */\n  @ArrayProp()\n  @Prop({reflect: true, mutable: true})\n  public tabsExcluded: string[] | string = '[]';\n\n  public render() {\n    if (this.tabsIncluded.length > 0 && this.tabsExcluded.length > 0) {\n      console.warn(\n        'Values for both \"tabs-included\" and \"tabs-excluded\" have been provided. This is could lead to unexpected behaviors.'\n      );\n    }\n\n    const dropdownComponent = 'atomic-sort-dropdown';\n\n    if (!this.host.closest(dropdownComponent)) {\n      const error = new Error(\n        `The \"${this.host.nodeName.toLowerCase()}\" component has to be used inside an ${dropdownComponent} element.`\n      );\n      return (\n        <atomic-component-error\n          element={this.host}\n          error={error}\n        ></atomic-component-error>\n      );\n    }\n  }\n}\n"],"version":3}