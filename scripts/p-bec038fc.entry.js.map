{"version":3,"names":["atomicGeneratedAnswerCss","AtomicGeneratedAnswerStyle0","AtomicGeneratedAnswer","this","DEFAULT_COLLAPSED_HEIGHT","MAX_COLLAPSED_HEIGHT","MIN_COLLAPSED_HEIGHT","copied","copyError","maxCollapsedHeight","tabsIncluded","tabsExcluded","onGeneratedAnswerStateUpdate","generatedAnswerState","isVisible","generatedAnswerCommon","data","writeStoredData","setAriaMessage","getGeneratedAnswerStatus","setCopied","isCopied","setCopyError","message","ariaMessage","initialize","length","console","warn","GeneratedAnswerCommon","host","withToggle","collapsible","getGeneratedAnswer","generatedAnswer","getGeneratedAnswerState","getSearchStatusState","searchStatusState","getBindings","bindings","getCopied","getCopyError","buildInteractiveCitation","props","engine","buildGeneratedAnswer","initialState","responseFormat","contentFormat","answerConfigurationId","searchStatus","buildSearchStatus","insertFeedbackModal","window","ResizeObserver","debouncedAdaptAnswerHeight","debounce","adaptAnswerHeight","resizeObserver","observe","tabManager","buildTabManager","updateAnswerCollapsed","newState","oldState","newExpanded","expanded","oldExpanded","undefined","container","getAnswerContainer","toggleClass","disconnectedCallback","disconnect","element","className","condition","classList","toggle","answerHeight","shadowRoot","querySelector","getBoundingClientRect","height","rootFontSize","parseFloat","getComputedStyle","document","documentElement","fontSize","fullAnswerHeight","updateAnswerHeight","getAnswerFooter","validateMaxCollapsedHeight","isValid","setCSSVariable","variableName","value","style","setProperty","footer","maxHeight","isStreaming","watchTabManagerState","newValue","oldValue","activeTab","shouldDisplayOnCurrentTab","tabManagerState","disable","enable","render","h","Hidden","__decorate","InitializeBindings","BindStateToController","onUpdateCallbackMethod","ArrayProp","AriaLiveRegion"],"sources":["src/components/search/atomic-generated-answer/atomic-generated-answer.pcss?tag=atomic-generated-answer&encapsulation=shadow","src/components/search/atomic-generated-answer/atomic-generated-answer.tsx"],"sourcesContent":["@import '../../common/generated-answer/styles/generated-answer.pcss';\n","import {\n  SearchStatus,\n  SearchStatusState,\n  buildSearchStatus,\n  buildGeneratedAnswer,\n  GeneratedAnswer,\n  GeneratedAnswerState,\n  buildInteractiveCitation,\n  buildTabManager,\n  TabManagerState,\n  TabManager,\n} from '@coveo/headless';\nimport {Component, Element, State, Prop, Watch, h} from '@stencil/core';\nimport {debounce} from '../../../utils/debounce-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {ArrayProp} from '../../../utils/props-utils';\nimport {AriaLiveRegion} from '../../../utils/stencil-accessibility-utils';\nimport {shouldDisplayOnCurrentTab} from '../../../utils/tab-utils';\nimport {GeneratedAnswerCommon} from '../../common/generated-answer/generated-answer-common';\nimport {Hidden} from '../../common/stencil-hidden';\nimport {Bindings} from '../atomic-search-interface/atomic-search-interface';\n\n/**\n * The `atomic-generated-answer` component uses Coveo Machine Learning (Coveo ML) models to automatically generate an answer to a query executed by the user.\n * For more information, see [About Relevance Generative Answering (RGA)](https://docs.coveo.com/en/n9de0370/)\n *\n * @slot no-answer-message - Lets you pass a custom sorry message when no answer is generated.\n *\n * @part container - The container displaying the generated answer.\n * @part header-label - The header of the generated answer container.\n * @part feedback-button - The \"like\" and \"dislike\" buttons.\n * @part toggle - The switch to toggle the visibility of the generated answer.\n * @part copy-button - The \"Copy answer\" button.\n * @part retry-container - The container for the \"retry\" section.\n * @part generated-text - The text of the generated answer.\n * @part citations-label - The header of the citations list.\n *\n * @part answer-code-block - The generated answer multi-line code blocks.\n * @part answer-emphasis - The generated answer emphasized text elements.\n * @part answer-inline-code - The generated answer inline code elements.\n * @part answer-heading-1 - The generated answer level 1 heading elements.\n * @part answer-heading-2 - The generated answer level 2 heading elements.\n * @part answer-heading-3 - The generated answer level 3 heading elements.\n * @part answer-heading-4 - The generated answer level 4 heading elements.\n * @part answer-heading-5 - The generated answer level 5 heading elements.\n * @part answer-heading-6 - The generated answer level 6 heading elements.\n * @part answer-list-item - The generated answer list item elements for both ordered and unordered lists.\n * @part answer-ordered-list - The generated answer ordered list elements.\n * @part answer-paragraph - The generated answer paragraph elements.\n * @part answer-quote-block - The generated answer quote block elements.\n * @part answer-unordered-list - The generated answer unordered list elements.\n * @part answer-strong - The generated answer strong text elements.\n * @part answer-table - The generated answer table elements.\n * @part answer-table-container - The generated answer table container elements.\n * @part answer-table-content - The generated answer table content cell elements.\n * @part answer-table-header - The generated answer table header cell elements.\n *\n * @part citation - The link that allows the user to navigate to the item.\n * @part citation-popover - The pop-up that shows an item preview when the user hovers over the citation.\n */\n@Component({\n  tag: 'atomic-generated-answer',\n  styleUrl: 'atomic-generated-answer.pcss',\n  shadow: true,\n})\nexport class AtomicGeneratedAnswer implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  public generatedAnswer!: GeneratedAnswer;\n  public searchStatus!: SearchStatus;\n  private resizeObserver?: ResizeObserver;\n\n  private readonly DEFAULT_COLLAPSED_HEIGHT = 16;\n  private readonly MAX_COLLAPSED_HEIGHT = 32;\n  private readonly MIN_COLLAPSED_HEIGHT = 9;\n\n  @BindStateToController('generatedAnswer', {\n    onUpdateCallbackMethod: 'onGeneratedAnswerStateUpdate',\n  })\n  @State()\n  private generatedAnswerState!: GeneratedAnswerState;\n\n  @BindStateToController('searchStatus')\n  @State()\n  private searchStatusState!: SearchStatusState;\n\n  public tabManager!: TabManager;\n\n  @BindStateToController('tabManager')\n  @State()\n  public tabManagerState!: TabManagerState;\n\n  @State()\n  public error!: Error;\n\n  @Element() private host!: HTMLElement;\n\n  @State()\n  copied = false;\n\n  @State()\n  copyError = false;\n\n  /**\n   * Whether to render a toggle button that lets the user hide or show the answer.\n   * @default false\n   */\n  @Prop() withToggle?: boolean;\n\n  /**\n   * Whether to allow the answer to be collapsed when the text is taller than the specified `--atomic-crga-collapsed-height` value (16rem by default).\n   * @default false\n   */\n  @Prop() collapsible?: boolean;\n\n  /**\n   * The maximum height (in rem units) of the answer when collapsed.\n   *\n   */\n  @Prop() maxCollapsedHeight = this.DEFAULT_COLLAPSED_HEIGHT;\n\n  /**\n   * The unique identifier of the answer configuration to use to generate the answer.\n   */\n  @Prop() answerConfigurationId?: string;\n\n  /**\n   * The tabs on which the generated answer can be displayed. This property should not be used at the same time as `tabs-excluded`.\n   *\n   * Set this property as a stringified JSON array, e.g.,\n   * ```html\n   *  <atomic-generated-answer tabs-included='[\"tabIDA\", \"tabIDB\"]'></atomic-generated-answer>\n   * ```\n   * If you don't set this property, the generated answer can be displayed on any tab. Otherwise, the generated answer can only be displayed on the specified tabs.\n   */\n  @ArrayProp()\n  @Prop({reflect: true, mutable: true})\n  public tabsIncluded: string[] | string = '[]';\n\n  /**\n   * The tabs on which this generated answer must not be displayed. This property should not be used at the same time as `tabs-included`.\n   *\n   * Set this property as a stringified JSON array, e.g.,\n   * ```html\n   *  <atomic-generated-answer tabs-excluded='[\"tabIDA\", \"tabIDB\"]'></atomic-generated-answer>\n   * ```\n   * If you don't set this property, the generated answer can be displayed on any tab. Otherwise, the generated answer won't be displayed on any of the specified tabs.\n   */\n  @ArrayProp()\n  @Prop({reflect: true, mutable: true})\n  public tabsExcluded: string[] | string = '[]';\n\n  @AriaLiveRegion('generated-answer')\n  protected ariaMessage!: string;\n\n  private generatedAnswerCommon!: GeneratedAnswerCommon;\n  private fullAnswerHeight?: number;\n\n  public initialize() {\n    if (\n      [...this.tabsIncluded].length > 0 &&\n      [...this.tabsExcluded].length > 0\n    ) {\n      console.warn(\n        'Values for both \"tabs-included\" and \"tabs-excluded\" have been provided. This could lead to unexpected behaviors.'\n      );\n    }\n    this.generatedAnswerCommon = new GeneratedAnswerCommon({\n      host: this.host,\n      withToggle: this.withToggle,\n      collapsible: this.collapsible,\n      getGeneratedAnswer: () => this.generatedAnswer,\n      getGeneratedAnswerState: () => this.generatedAnswerState,\n      getSearchStatusState: () => this.searchStatusState,\n      getBindings: () => this.bindings,\n      getCopied: () => this.copied,\n      setCopied: this.setCopied,\n      getCopyError: () => this.copyError,\n      setCopyError: this.setCopyError,\n      setAriaMessage: this.setAriaMessage,\n      buildInteractiveCitation: (props) =>\n        buildInteractiveCitation(this.bindings.engine, props),\n    });\n    this.generatedAnswer = buildGeneratedAnswer(this.bindings.engine, {\n      initialState: {\n        isVisible: this.generatedAnswerCommon.data.isVisible,\n        responseFormat: {\n          contentFormat: ['text/markdown', 'text/plain'],\n        },\n      },\n      ...(this.answerConfigurationId && {\n        answerConfigurationId: this.answerConfigurationId,\n      }),\n    });\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\n    this.generatedAnswerCommon.insertFeedbackModal();\n\n    if (window.ResizeObserver && this.collapsible) {\n      const debouncedAdaptAnswerHeight = debounce(\n        () => this.adaptAnswerHeight(),\n        100\n      );\n      this.resizeObserver = new ResizeObserver(debouncedAdaptAnswerHeight);\n      this.resizeObserver.observe(this.host);\n    }\n    this.tabManager = buildTabManager(this.bindings.engine);\n  }\n\n  @Watch('generatedAnswerState')\n  public updateAnswerCollapsed(\n    newState: GeneratedAnswerState,\n    oldState: GeneratedAnswerState\n  ) {\n    const newExpanded = newState.expanded;\n    const oldExpanded = oldState ? oldState.expanded : undefined;\n\n    if (newExpanded !== oldExpanded) {\n      const container = this.getAnswerContainer();\n\n      if (!container) {\n        return;\n      }\n\n      this.toggleClass(container, 'answer-collapsed', !newExpanded);\n    }\n  }\n\n  public disconnectedCallback() {\n    this.resizeObserver?.disconnect();\n  }\n\n  // @ts-expect-error: This function is used by BindStateToController.\n  private onGeneratedAnswerStateUpdate = () => {\n    if (\n      this.generatedAnswerState.isVisible !==\n      this.generatedAnswerCommon?.data?.isVisible\n    ) {\n      this.generatedAnswerCommon.data = {\n        ...this.generatedAnswerCommon.data,\n        isVisible: this.generatedAnswerState.isVisible,\n      };\n      this.generatedAnswerCommon.writeStoredData(\n        this.generatedAnswerCommon.data\n      );\n    }\n\n    this.setAriaMessage(this.generatedAnswerCommon.getGeneratedAnswerStatus());\n  };\n\n  private setCopied = (isCopied: boolean) => {\n    this.copied = isCopied;\n  };\n\n  private setCopyError = (copyError: boolean) => {\n    this.copyError = copyError;\n  };\n\n  private setAriaMessage = (message: string) => {\n    this.ariaMessage = message;\n  };\n\n  private toggleClass(element: Element, className: string, condition: boolean) {\n    element.classList.toggle(className, condition);\n  }\n\n  private adaptAnswerHeight() {\n    const answerHeight = this.host?.shadowRoot\n      ?.querySelector('[part=\"generated-text\"]')\n      ?.getBoundingClientRect().height;\n\n    if (answerHeight) {\n      const rootFontSize = parseFloat(\n        getComputedStyle(document.documentElement).fontSize\n      );\n\n      this.fullAnswerHeight = answerHeight / rootFontSize;\n\n      this.updateAnswerHeight();\n    }\n  }\n\n  private getAnswerContainer() {\n    return this.host?.shadowRoot?.querySelector('[part=\"generated-container\"]');\n  }\n\n  private getAnswerFooter() {\n    return this.host?.shadowRoot?.querySelector(\n      '[part=\"generated-answer-footer\"]'\n    );\n  }\n\n  private validateMaxCollapsedHeight(): number {\n    const isValid =\n      this.maxCollapsedHeight >= this.MIN_COLLAPSED_HEIGHT &&\n      this.maxCollapsedHeight <= this.MAX_COLLAPSED_HEIGHT;\n\n    if (!isValid) {\n      console.warn(\n        `max-collapsed-height (${this.maxCollapsedHeight}rem) is out of the valid range (${this.MIN_COLLAPSED_HEIGHT}rem - ${this.MAX_COLLAPSED_HEIGHT}rem). Falling back to default value (${this.DEFAULT_COLLAPSED_HEIGHT}rem).`\n      );\n    }\n\n    return isValid ? this.maxCollapsedHeight : this.DEFAULT_COLLAPSED_HEIGHT;\n  }\n\n  private setCSSVariable(variableName: string, value: string) {\n    const container = this.getAnswerContainer();\n    if (container) {\n      (container as HTMLElement).style.setProperty(variableName, value);\n    }\n  }\n\n  private updateAnswerHeight() {\n    const container = this.getAnswerContainer() as HTMLElement;\n    const footer = this.getAnswerFooter();\n    const maxHeight = this.validateMaxCollapsedHeight();\n\n    if (!container || !footer) {\n      return;\n    }\n\n    if (this.fullAnswerHeight! > maxHeight) {\n      this.setCSSVariable('--atomic-crga-collapsed-height', `${maxHeight}rem`);\n      this.toggleClass(\n        container,\n        'answer-collapsed',\n        !this.generatedAnswerState.expanded\n      );\n      this.toggleClass(footer, 'is-collapsible', true);\n      this.toggleClass(\n        footer,\n        'generating-label-visible',\n        this.generatedAnswerState.isStreaming\n      );\n    } else {\n      this.toggleClass(container, 'answer-collapsed', false);\n      this.toggleClass(footer, 'is-collapsible', false);\n      this.toggleClass(footer, 'generating-label-visible', false);\n    }\n  }\n\n  @Watch('tabManagerState')\n  watchTabManagerState(\n    newValue: {activeTab: string},\n    oldValue: {activeTab: string}\n  ) {\n    if (newValue?.activeTab !== oldValue?.activeTab) {\n      if (\n        !shouldDisplayOnCurrentTab(\n          [...this.tabsIncluded],\n          [...this.tabsExcluded],\n          this.tabManagerState?.activeTab\n        )\n      ) {\n        this.generatedAnswer.disable();\n      } else {\n        this.generatedAnswer.enable();\n      }\n    }\n  }\n\n  public render() {\n    if (\n      !shouldDisplayOnCurrentTab(\n        [...this.tabsIncluded],\n        [...this.tabsExcluded],\n        this.tabManagerState?.activeTab\n      )\n    ) {\n      return <Hidden />;\n    }\n    return this.generatedAnswerCommon.render();\n  }\n}\n"],"mappings":"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","ignoreList":[]}