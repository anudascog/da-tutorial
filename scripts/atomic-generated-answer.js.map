{"file":"atomic-generated-answer.js","mappings":"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","names":["AtomicGeneratedAnswer"],"sources":["src/components/search/atomic-generated-answer/atomic-generated-answer.pcss?tag=atomic-generated-answer&encapsulation=shadow","src/components/search/atomic-generated-answer/atomic-generated-answer.tsx"],"sourcesContent":["@import '../../common/generated-answer/styles/generated-answer.pcss';\n","import {\n  SearchStatus,\n  SearchStatusState,\n  buildSearchStatus,\n  buildGeneratedAnswer,\n  GeneratedAnswer,\n  GeneratedAnswerState,\n  buildInteractiveCitation,\n  buildTabManager,\n  TabManagerState,\n  TabManager,\n} from '@coveo/headless';\nimport {Component, Element, State, Prop, Watch, h} from '@stencil/core';\nimport {debounce} from '../../../utils/debounce-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {ArrayProp} from '../../../utils/props-utils';\nimport {AriaLiveRegion} from '../../../utils/stencil-accessibility-utils';\nimport {shouldDisplayOnCurrentTab} from '../../../utils/tab-utils';\nimport {GeneratedAnswerCommon} from '../../common/generated-answer/generated-answer-common';\nimport {Hidden} from '../../common/stencil-hidden';\nimport {Bindings} from '../atomic-search-interface/atomic-search-interface';\n\n/**\n * The `atomic-generated-answer` component uses Coveo Machine Learning (Coveo ML) models to automatically generate an answer to a query executed by the user.\n * For more information, see [About Relevance Generative Answering (RGA)](https://docs.coveo.com/en/n9de0370/)\n *\n * @slot no-answer-message - Lets you pass a custom sorry message when no answer is generated.\n *\n * @part container - The container displaying the generated answer.\n * @part header-label - The header of the generated answer container.\n * @part feedback-button - The \"like\" and \"dislike\" buttons.\n * @part toggle - The switch to toggle the visibility of the generated answer.\n * @part copy-button - The \"Copy answer\" button.\n * @part retry-container - The container for the \"retry\" section.\n * @part generated-text - The text of the generated answer.\n * @part citations-label - The header of the citations list.\n *\n * @part answer-code-block - The generated answer multi-line code blocks.\n * @part answer-emphasis - The generated answer emphasized text elements.\n * @part answer-inline-code - The generated answer inline code elements.\n * @part answer-heading-1 - The generated answer level 1 heading elements.\n * @part answer-heading-2 - The generated answer level 2 heading elements.\n * @part answer-heading-3 - The generated answer level 3 heading elements.\n * @part answer-heading-4 - The generated answer level 4 heading elements.\n * @part answer-heading-5 - The generated answer level 5 heading elements.\n * @part answer-heading-6 - The generated answer level 6 heading elements.\n * @part answer-list-item - The generated answer list item elements for both ordered and unordered lists.\n * @part answer-ordered-list - The generated answer ordered list elements.\n * @part answer-paragraph - The generated answer paragraph elements.\n * @part answer-quote-block - The generated answer quote block elements.\n * @part answer-unordered-list - The generated answer unordered list elements.\n * @part answer-strong - The generated answer strong text elements.\n * @part answer-table - The generated answer table elements.\n * @part answer-table-container - The generated answer table container elements.\n * @part answer-table-content - The generated answer table content cell elements.\n * @part answer-table-header - The generated answer table header cell elements.\n *\n * @part citation - The link that allows the user to navigate to the item.\n * @part citation-popover - The pop-up that shows an item preview when the user hovers over the citation.\n */\n@Component({\n  tag: 'atomic-generated-answer',\n  styleUrl: 'atomic-generated-answer.pcss',\n  shadow: true,\n})\nexport class AtomicGeneratedAnswer implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  public generatedAnswer!: GeneratedAnswer;\n  public searchStatus!: SearchStatus;\n  private resizeObserver?: ResizeObserver;\n\n  private readonly DEFAULT_COLLAPSED_HEIGHT = 16;\n  private readonly MAX_COLLAPSED_HEIGHT = 32;\n  private readonly MIN_COLLAPSED_HEIGHT = 9;\n\n  @BindStateToController('generatedAnswer', {\n    onUpdateCallbackMethod: 'onGeneratedAnswerStateUpdate',\n  })\n  @State()\n  private generatedAnswerState!: GeneratedAnswerState;\n\n  @BindStateToController('searchStatus')\n  @State()\n  private searchStatusState!: SearchStatusState;\n\n  public tabManager!: TabManager;\n\n  @BindStateToController('tabManager')\n  @State()\n  public tabManagerState!: TabManagerState;\n\n  @State()\n  public error!: Error;\n\n  @Element() private host!: HTMLElement;\n\n  @State()\n  copied = false;\n\n  @State()\n  copyError = false;\n\n  /**\n   * Whether to render a toggle button that lets the user hide or show the answer.\n   * @default false\n   */\n  @Prop() withToggle?: boolean;\n\n  /**\n   * Whether to allow the answer to be collapsed when the text is taller than the specified `--atomic-crga-collapsed-height` value (16rem by default).\n   * @default false\n   */\n  @Prop() collapsible?: boolean;\n\n  /**\n   * The maximum height (in rem units) of the answer when collapsed.\n   *\n   */\n  @Prop() maxCollapsedHeight = this.DEFAULT_COLLAPSED_HEIGHT;\n\n  /**\n   * The unique identifier of the answer configuration to use to generate the answer.\n   */\n  @Prop() answerConfigurationId?: string;\n\n  /**\n   * The tabs on which the generated answer can be displayed. This property should not be used at the same time as `tabs-excluded`.\n   *\n   * Set this property as a stringified JSON array, e.g.,\n   * ```html\n   *  <atomic-generated-answer tabs-included='[\"tabIDA\", \"tabIDB\"]'></atomic-generated-answer>\n   * ```\n   * If you don't set this property, the generated answer can be displayed on any tab. Otherwise, the generated answer can only be displayed on the specified tabs.\n   */\n  @ArrayProp()\n  @Prop({reflect: true, mutable: true})\n  public tabsIncluded: string[] | string = '[]';\n\n  /**\n   * The tabs on which this generated answer must not be displayed. This property should not be used at the same time as `tabs-included`.\n   *\n   * Set this property as a stringified JSON array, e.g.,\n   * ```html\n   *  <atomic-generated-answer tabs-excluded='[\"tabIDA\", \"tabIDB\"]'></atomic-generated-answer>\n   * ```\n   * If you don't set this property, the generated answer can be displayed on any tab. Otherwise, the generated answer won't be displayed on any of the specified tabs.\n   */\n  @ArrayProp()\n  @Prop({reflect: true, mutable: true})\n  public tabsExcluded: string[] | string = '[]';\n\n  @AriaLiveRegion('generated-answer')\n  protected ariaMessage!: string;\n\n  private generatedAnswerCommon!: GeneratedAnswerCommon;\n  private fullAnswerHeight?: number;\n\n  public initialize() {\n    if (\n      [...this.tabsIncluded].length > 0 &&\n      [...this.tabsExcluded].length > 0\n    ) {\n      console.warn(\n        'Values for both \"tabs-included\" and \"tabs-excluded\" have been provided. This could lead to unexpected behaviors.'\n      );\n    }\n    this.generatedAnswerCommon = new GeneratedAnswerCommon({\n      host: this.host,\n      withToggle: this.withToggle,\n      collapsible: this.collapsible,\n      getGeneratedAnswer: () => this.generatedAnswer,\n      getGeneratedAnswerState: () => this.generatedAnswerState,\n      getSearchStatusState: () => this.searchStatusState,\n      getBindings: () => this.bindings,\n      getCopied: () => this.copied,\n      setCopied: this.setCopied,\n      getCopyError: () => this.copyError,\n      setCopyError: this.setCopyError,\n      setAriaMessage: this.setAriaMessage,\n      buildInteractiveCitation: (props) =>\n        buildInteractiveCitation(this.bindings.engine, props),\n    });\n    this.generatedAnswer = buildGeneratedAnswer(this.bindings.engine, {\n      initialState: {\n        isVisible: this.generatedAnswerCommon.data.isVisible,\n        responseFormat: {\n          contentFormat: ['text/markdown', 'text/plain'],\n        },\n      },\n      ...(this.answerConfigurationId && {\n        answerConfigurationId: this.answerConfigurationId,\n      }),\n    });\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\n    this.generatedAnswerCommon.insertFeedbackModal();\n\n    if (window.ResizeObserver && this.collapsible) {\n      const debouncedAdaptAnswerHeight = debounce(\n        () => this.adaptAnswerHeight(),\n        100\n      );\n      this.resizeObserver = new ResizeObserver(debouncedAdaptAnswerHeight);\n      this.resizeObserver.observe(this.host);\n    }\n    this.tabManager = buildTabManager(this.bindings.engine);\n  }\n\n  @Watch('generatedAnswerState')\n  public updateAnswerCollapsed(\n    newState: GeneratedAnswerState,\n    oldState: GeneratedAnswerState\n  ) {\n    const newExpanded = newState.expanded;\n    const oldExpanded = oldState ? oldState.expanded : undefined;\n\n    if (newExpanded !== oldExpanded) {\n      const container = this.getAnswerContainer();\n\n      if (!container) {\n        return;\n      }\n\n      this.toggleClass(container, 'answer-collapsed', !newExpanded);\n    }\n  }\n\n  public disconnectedCallback() {\n    this.resizeObserver?.disconnect();\n  }\n\n  // @ts-expect-error: This function is used by BindStateToController.\n  private onGeneratedAnswerStateUpdate = () => {\n    if (\n      this.generatedAnswerState.isVisible !==\n      this.generatedAnswerCommon?.data?.isVisible\n    ) {\n      this.generatedAnswerCommon.data = {\n        ...this.generatedAnswerCommon.data,\n        isVisible: this.generatedAnswerState.isVisible,\n      };\n      this.generatedAnswerCommon.writeStoredData(\n        this.generatedAnswerCommon.data\n      );\n    }\n\n    this.setAriaMessage(this.generatedAnswerCommon.getGeneratedAnswerStatus());\n  };\n\n  private setCopied = (isCopied: boolean) => {\n    this.copied = isCopied;\n  };\n\n  private setCopyError = (copyError: boolean) => {\n    this.copyError = copyError;\n  };\n\n  private setAriaMessage = (message: string) => {\n    this.ariaMessage = message;\n  };\n\n  private toggleClass(element: Element, className: string, condition: boolean) {\n    element.classList.toggle(className, condition);\n  }\n\n  private adaptAnswerHeight() {\n    const answerHeight = this.host?.shadowRoot\n      ?.querySelector('[part=\"generated-text\"]')\n      ?.getBoundingClientRect().height;\n\n    if (answerHeight) {\n      const rootFontSize = parseFloat(\n        getComputedStyle(document.documentElement).fontSize\n      );\n\n      this.fullAnswerHeight = answerHeight / rootFontSize;\n\n      this.updateAnswerHeight();\n    }\n  }\n\n  private getAnswerContainer() {\n    return this.host?.shadowRoot?.querySelector('[part=\"generated-container\"]');\n  }\n\n  private getAnswerFooter() {\n    return this.host?.shadowRoot?.querySelector(\n      '[part=\"generated-answer-footer\"]'\n    );\n  }\n\n  private validateMaxCollapsedHeight(): number {\n    const isValid =\n      this.maxCollapsedHeight >= this.MIN_COLLAPSED_HEIGHT &&\n      this.maxCollapsedHeight <= this.MAX_COLLAPSED_HEIGHT;\n\n    if (!isValid) {\n      console.warn(\n        `max-collapsed-height (${this.maxCollapsedHeight}rem) is out of the valid range (${this.MIN_COLLAPSED_HEIGHT}rem - ${this.MAX_COLLAPSED_HEIGHT}rem). Falling back to default value (${this.DEFAULT_COLLAPSED_HEIGHT}rem).`\n      );\n    }\n\n    return isValid ? this.maxCollapsedHeight : this.DEFAULT_COLLAPSED_HEIGHT;\n  }\n\n  private setCSSVariable(variableName: string, value: string) {\n    const container = this.getAnswerContainer();\n    if (container) {\n      (container as HTMLElement).style.setProperty(variableName, value);\n    }\n  }\n\n  private updateAnswerHeight() {\n    const container = this.getAnswerContainer() as HTMLElement;\n    const footer = this.getAnswerFooter();\n    const maxHeight = this.validateMaxCollapsedHeight();\n\n    if (!container || !footer) {\n      return;\n    }\n\n    if (this.fullAnswerHeight! > maxHeight) {\n      this.setCSSVariable('--atomic-crga-collapsed-height', `${maxHeight}rem`);\n      this.toggleClass(\n        container,\n        'answer-collapsed',\n        !this.generatedAnswerState.expanded\n      );\n      this.toggleClass(footer, 'is-collapsible', true);\n      this.toggleClass(\n        footer,\n        'generating-label-visible',\n        this.generatedAnswerState.isStreaming\n      );\n    } else {\n      this.toggleClass(container, 'answer-collapsed', false);\n      this.toggleClass(footer, 'is-collapsible', false);\n      this.toggleClass(footer, 'generating-label-visible', false);\n    }\n  }\n\n  @Watch('tabManagerState')\n  watchTabManagerState(\n    newValue: {activeTab: string},\n    oldValue: {activeTab: string}\n  ) {\n    if (newValue?.activeTab !== oldValue?.activeTab) {\n      if (\n        !shouldDisplayOnCurrentTab(\n          [...this.tabsIncluded],\n          [...this.tabsExcluded],\n          this.tabManagerState?.activeTab\n        )\n      ) {\n        this.generatedAnswer.disable();\n      } else {\n        this.generatedAnswer.enable();\n      }\n    }\n  }\n\n  public render() {\n    if (\n      !shouldDisplayOnCurrentTab(\n        [...this.tabsIncluded],\n        [...this.tabsExcluded],\n        this.tabManagerState?.activeTab\n      )\n    ) {\n      return <Hidden />;\n    }\n    return this.generatedAnswerCommon.render();\n  }\n}\n"],"version":3}