{"file":"stencil-radio-button-a53ba264.js","mappings":"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","names":[],"sources":["src/components/common/stencil-radio-button.tsx"],"sourcesContent":["import {FunctionalComponent, h} from '@stencil/core';\nimport {JSXBase} from '@stencil/core/internal';\nimport {createRipple} from '../../utils/ripple';\nimport {RadioButtonProps} from './radio-button';\nimport {\n  getClassNameForButtonStyle,\n  getRippleColorForButtonStyle,\n} from './stencil-button-style';\n\n/**\n * @deprecated Should only be used for Stencil components; for Lit components, use the RadioButtonProps from radio-button.ts instead.\n */\nexport interface StencilRadioButtonProps extends Omit<RadioButtonProps, 'ref'> {\n  ref?(element?: HTMLInputElement): void;\n}\n\n/**\n * @deprecated Should only be used for Stencil components; for Lit components, use the radioButton function instead.\n */\nexport const RadioButton: FunctionalComponent<StencilRadioButtonProps> = (\n  props\n) => {\n  const classNames = ['btn-radio'];\n  let onMouseDown:\n    | JSXBase.DOMAttributes<HTMLInputElement>['onMouseDown']\n    | undefined;\n  if (props.style) {\n    const rippleColor = getRippleColorForButtonStyle(props.style);\n    classNames.push(getClassNameForButtonStyle(props.style));\n\n    onMouseDown = (e) => createRipple(e, {color: rippleColor});\n  }\n  if (props.checked) {\n    classNames.push('selected');\n  }\n  if (props.class) {\n    classNames.push(props.class);\n  }\n\n  const handleKeyDown = (event: KeyboardEvent) => {\n    if (props.selectWhenFocused !== false) {\n      return;\n    }\n    const {key} = event;\n    const radioGroup = (event.currentTarget as HTMLElement).parentNode;\n\n    if (!radioGroup || !isArrowKey(key)) {\n      return;\n    }\n\n    event.preventDefault();\n\n    const buttons = getRadioButtons(radioGroup);\n    const currentIndex = getCurrentIndex(\n      buttons,\n      event.currentTarget as HTMLInputElement\n    );\n    const newIndex = getNewIndex(key, currentIndex, buttons.length);\n\n    if (buttons[newIndex]) {\n      buttons[newIndex].focus();\n    }\n  };\n\n  const isArrowKey = (key: string) => {\n    return ['ArrowLeft', 'ArrowRight', 'ArrowDown', 'ArrowUp'].includes(key);\n  };\n\n  const getRadioButtons = (radioGroup: ParentNode) => {\n    return Array.from(\n      radioGroup.querySelectorAll('[type=\"radio\"]')\n    ) as HTMLInputElement[];\n  };\n\n  const getCurrentIndex = (\n    buttons: HTMLInputElement[],\n    currentButton: HTMLInputElement\n  ) => {\n    return buttons.findIndex((button) => button === currentButton);\n  };\n\n  const getNewIndex = (key: string, currentIndex: number, length: number) => {\n    switch (key) {\n      case 'ArrowLeft':\n      case 'ArrowUp':\n        return (currentIndex - 1 + length) % length;\n      case 'ArrowRight':\n      case 'ArrowDown':\n        return (currentIndex + 1) % length;\n      default:\n        return currentIndex;\n    }\n  };\n\n  const attributes = {\n    name: props.groupName,\n    key: props.key,\n    checked: props.checked,\n    class: classNames.join(' '),\n    part: props.part,\n    'aria-label': props.ariaLabel ?? props.text,\n    'aria-current': props.ariaCurrent,\n    value: props.text,\n    ref: props.ref,\n  };\n\n  return (\n    <input\n      onKeyDown={handleKeyDown}\n      type=\"radio\"\n      onChange={(e) =>\n        (e.currentTarget as HTMLInputElement).checked && props.onChecked?.()\n      }\n      onMouseDown={onMouseDown}\n      {...attributes}\n    />\n  );\n};\n"],"version":3}