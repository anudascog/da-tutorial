{"version":3,"names":["atomicNumericFacetCss","AtomicNumericFacetStyle0","AtomicNumericFacet","this","manualRanges","formatter","defaultNumberFormatter","label","tabsIncluded","tabsExcluded","numberOfValues","sortCriteria","rangeAlgorithm","displayValuesAs","isCollapsed","headingLevel","filterFacetCount","injectionDepth","dependsOn","focusTarget","headerFocus","FocusTargetController","initialize","length","console","warn","validateProps","initializeTabManager","computeFacetId","initializeFacetForInput","initializeFacetForRange","initializeFilter","initializeSearchStatus","registerFacetToStore","disconnectedCallback","host","isConnected","facetForRangeDependenciesManager","stopWatching","facetForInputDependenciesManager","filterDependenciesManager","searchStatus","buildSearchStatus","bindings","engine","tabManager","buildTabManager","withInput","facetForInput","buildNumericFacet","options","generateAutomaticRanges","facetId","field","tabs","included","excluded","initializeDependenciesManager","state","Array","from","querySelectorAll","map","start","end","endInclusive","buildNumericRange","facetForRange","currentValues","filter","buildNumericFilter","buildFacetConditionsManager","conditions","parseDependsOn","facetInfo","i18n","t","element","isHidden","store","registerFacet","format","value","formatHumanReadable","facetValue","logger","initializePopover","hasValues","numberOfActiveValues","numberOfSelectedValues","numericFacets","setFormat","event","preventDefault","stopPropagation","detail","applyNumberInput","dispatch","loadNumericFacetSetActions","deselectAllNumericFacetValues","render","searchStatusState","firstSearchExecuted","hasError","h","FacetGuard","key","enabled","hasResults","shouldRenderFacet","FacetContainer","FacetHeader","onClearFilters","focusAfterSearch","filterState","range","clear","deselectAll","onToggleCollapse","headerRef","el","setTarget","shouldRenderValues","renderValues","shouldRenderInput","type","FacetPlaceholder","NumericFacetValuesContainer","valuesToRender","NumericFacetValueLink","onClick","toggleSingleSelect","toggleSelect","values","hasInputRange","numberOfResults","shouldDisplayInputForFacetRange","facetValues","hasInput","randomID","facetState","Schema","StringValue","constrainTo","validate","__decorate","InitializeBindings","BindStateToController","ArrayProp","MapProp"],"sources":["src/components/search/facets/atomic-numeric-facet/atomic-numeric-facet.pcss?tag=atomic-numeric-facet&encapsulation=shadow","src/components/search/facets/atomic-numeric-facet/atomic-numeric-facet.tsx"],"sourcesContent":["@import '../../../common/facets/numeric-facet-common.pcss';\n","import {Schema, StringValue} from '@coveo/bueno';\nimport {\n  buildFacetConditionsManager,\n  FacetConditionsManager,\n  buildNumericFacet,\n  buildNumericFilter,\n  buildNumericRange,\n  buildSearchStatus,\n  CategoryFacetValueRequest,\n  FacetValueRequest,\n  loadNumericFacetSetActions,\n  NumericFacet,\n  NumericFacetState,\n  NumericFilter,\n  NumericFilterState,\n  RangeFacetRangeAlgorithm,\n  RangeFacetSortCriterion,\n  SearchStatus,\n  SearchStatusState,\n  NumericRangeRequest,\n  buildTabManager,\n  TabManager,\n  TabManagerState,\n} from '@coveo/headless';\nimport {Component, Element, h, Listen, Prop, State} from '@stencil/core';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {ArrayProp, MapProp} from '../../../../utils/props-utils';\nimport {FocusTargetController} from '../../../../utils/stencil-accessibility-utils';\nimport {randomID} from '../../../../utils/utils';\nimport {parseDependsOn} from '../../../common/facets/depends-on';\nimport {FacetInfo} from '../../../common/facets/facet-common-store';\nimport {FacetContainer} from '../../../common/facets/facet-container/stencil-facet-container';\nimport {FacetGuard} from '../../../common/facets/facet-guard';\nimport {FacetHeader} from '../../../common/facets/facet-header/stencil-facet-header';\nimport {NumberInputType} from '../../../common/facets/facet-number-input/number-input-type';\nimport {FacetPlaceholder} from '../../../common/facets/facet-placeholder/facet-placeholder';\nimport {formatHumanReadable} from '../../../common/facets/numeric-facet/formatter';\nimport {NumericFacetValueLink} from '../../../common/facets/numeric-facet/value-link';\nimport {NumericFacetValuesContainer} from '../../../common/facets/numeric-facet/values-container';\nimport {initializePopover} from '../../../common/facets/popover/popover-type';\nimport {shouldDisplayInputForFacetRange} from '../../../common/facets/stencil-facet-common';\nimport {\n  defaultNumberFormatter,\n  NumberFormatter,\n} from '../../../common/formats/format-common';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\n\n/**\n * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., ascending, descending).\n * An `atomic-numeric-facet` displays a facet of the results for the current query as numeric ranges.\n *\n * @part facet - The wrapper for the entire facet.\n * @part placeholder - The placeholder shown before the first search is executed.\n *\n * @part label-button - The button that displays the label and allows to expand/collapse the facet.\n * @part label-button-icon - The label button icon.\n * @part clear-button - The button that resets the actively selected facet values.\n * @part clear-button-icon - The clear button icon.\n *\n * @part values - The facet values container.\n * @part value-label - The facet value label, common for all displays.\n * @part value-count - The facet value count, common for all displays.\n *\n * @part value-checkbox - The facet value checkbox, available when display is 'checkbox'.\n * @part value-checkbox-checked - The checked facet value checkbox, available when display is 'checkbox'.\n * @part value-checkbox-label - The facet value checkbox clickable label, available when display is 'checkbox'.\n * @part value-checkbox-icon - The facet value checkbox icon, available when display is 'checkbox'.\n * @part value-link - The facet value when display is 'link'.\n * @part value-link-selected - The selected facet value when display is 'link'.\n\n * @part input-form - The form that comprises the labels, inputs, and 'apply' button for the custom numeric range.\n * @part label-start - The label for the starting value of the custom numeric range.\n * @part label-end - The label for the ending value of the custom numeric range.\n * @part input-start - The input for the starting value of the custom numeric range.\n * @part input-end - The input for the ending value of the custom numeric range.\n * @part input-apply-button - The apply button for the custom range.\n */\n@Component({\n  tag: 'atomic-numeric-facet',\n  styleUrl: './atomic-numeric-facet.pcss',\n  shadow: true,\n})\nexport class AtomicNumericFacet implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  public facetForRange?: NumericFacet;\n  public facetForInput?: NumericFacet;\n  public filter!: NumericFilter;\n  public searchStatus!: SearchStatus;\n  public tabManager!: TabManager;\n  @Element() private host!: HTMLElement;\n  private manualRanges: (NumericRangeRequest & {label?: string})[] = [];\n  private formatter: NumberFormatter = defaultNumberFormatter;\n  private facetForRangeDependenciesManager?: FacetConditionsManager;\n  private facetForInputDependenciesManager?: FacetConditionsManager;\n  private filterDependenciesManager?: FacetConditionsManager;\n\n  @BindStateToController('facetForRange')\n  @State()\n  public facetState!: NumericFacetState;\n  @BindStateToController('filter')\n  @State()\n  public filterState?: NumericFilterState;\n  @BindStateToController('searchStatus')\n  @State()\n  public searchStatusState!: SearchStatusState;\n  @BindStateToController('tabManager')\n  @State()\n  public tabManagerState!: TabManagerState;\n  @State() public error!: Error;\n  @BindStateToController('facetForInput')\n  @State()\n  public facetForInputState?: NumericFacetState;\n\n  /**\n   * Specifies a unique identifier for the facet.\n   */\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\n  /**\n   * The non-localized label for the facet.\n   * Used in the `atomic-breadbox` component through the bindings store.\n   */\n  @Prop({reflect: true}) public label = 'no-label';\n  /**\n   * The field whose values you want to display in the facet.\n   */\n  @Prop({reflect: true}) public field!: string;\n  /**\n   * The tabs on which the facet can be displayed. This property should not be used at the same time as `tabs-excluded`.\n   *\n   * Set this property as a stringified JSON array, e.g.,\n   * ```html\n   *  <atomic-timeframe-facet tabs-included='[\"tabIDA\", \"tabIDB\"]'></atomic-timeframe-facet>\n   * ```\n   * If you don't set this property, the facet can be displayed on any tab. Otherwise, the facet can only be displayed on the specified tabs.\n   */\n  @ArrayProp()\n  @Prop({reflect: true, mutable: true})\n  public tabsIncluded: string[] | string = '[]';\n\n  /**\n   * The tabs on which this facet must not be displayed. This property should not be used at the same time as `tabs-included`.\n   *\n   * Set this property as a stringified JSON array, e.g.,\n   * ```html\n   *  <atomic-timeframe-facet tabs-excluded='[\"tabIDA\", \"tabIDB\"]'></atomic-timeframe-facet>\n   * ```\n   * If you don't set this property, the facet can be displayed on any tab. Otherwise, the facet won't be displayed on any of the specified tabs.\n   */\n  @ArrayProp()\n  @Prop({reflect: true, mutable: true})\n  public tabsExcluded: string[] | string = '[]';\n\n  /**\n   * The number of values to request for this facet, when there are no manual ranges.\n   * If the number of values is 0, no ranges will be displayed.\n   */\n  @Prop({reflect: true}) public numberOfValues = 8;\n  /**\n   * Whether this facet should contain an input allowing users to set custom ranges.\n   * Depending on the field, the input can allow either decimal or integer values.\n   */\n  @Prop({reflect: true}) public withInput?: NumberInputType;\n  /**\n   * The sort criterion to apply to the returned facet values.\n   * Possible values are 'ascending' and 'descending'.\n   */\n  @Prop({reflect: true}) public sortCriteria: RangeFacetSortCriterion =\n    'ascending';\n  /**\n   * The algorithm that's used for generating the ranges of this facet when they aren't manually defined. The default value of `\"equiprobable\"` generates facet ranges which vary in size but have a more balanced number of results within each range. The value of `\"even\"` generates equally sized facet ranges across all of the results.\n   */\n  @Prop({reflect: true}) public rangeAlgorithm: RangeFacetRangeAlgorithm =\n    'equiprobable';\n  /**\n   * Whether to display the facet values as checkboxes (multiple selection) or links (single selection).\n   * Possible values are 'checkbox' and 'link'.\n   */\n  @Prop({reflect: true}) public displayValuesAs: 'checkbox' | 'link' =\n    'checkbox';\n  /**\n   * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.\n   */\n  @Prop({reflect: true, mutable: true}) public isCollapsed = false;\n  /**\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.\n   */\n  @Prop({reflect: true}) public headingLevel = 0;\n  /**\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\n   *\n   *\n   * Note: Resulting count is only an estimation, in some cases this value could be incorrect.\n   */\n  @Prop({reflect: true}) public filterFacetCount = true;\n  /**\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\n   * Note: A high injectionDepth may negatively impact the facet request performance.\n   * Minimum: `0`\n   * Default: `1000`\n   */\n  @Prop({reflect: true}) public injectionDepth = 1000;\n\n  /**\n   * The required facets and values for this facet to be displayed.\n   * Examples:\n   * ```html\n   * <atomic-facet facet-id=\"abc\" field=\"objecttype\" ...></atomic-facet>\n   *\n   * <!-- To show the facet when any value is selected in the facet with id \"abc\": -->\n   * <atomic-numeric-facet\n   *   depends-on-abc\n   *   ...\n   * ></atomic-numeric-facet>\n   *\n   * <!-- To show the facet when value \"doc\" is selected in the facet with id \"abc\": -->\n   * <atomic-numeric-facet\n   *   depends-on-abc=\"doc\"\n   *   ...\n   * ></atomic-numeric-facet>\n   * ```\n   */\n  @MapProp() @Prop() public dependsOn: Record<string, string> = {};\n\n  private headerFocus?: FocusTargetController;\n\n  private get focusTarget(): FocusTargetController {\n    if (!this.headerFocus) {\n      this.headerFocus = new FocusTargetController(this);\n    }\n    return this.headerFocus;\n  }\n\n  public initialize() {\n    if (\n      [...this.tabsIncluded].length > 0 &&\n      [...this.tabsExcluded].length > 0\n    ) {\n      console.warn(\n        'Values for both \"tabs-included\" and \"tabs-excluded\" have been provided. This is could lead to unexpected behaviors.'\n      );\n    }\n    this.validateProps();\n    this.initializeTabManager();\n    this.computeFacetId();\n    this.initializeFacetForInput();\n    this.initializeFacetForRange();\n    this.initializeFilter();\n    this.initializeSearchStatus();\n    this.registerFacetToStore();\n  }\n\n  public disconnectedCallback() {\n    if (this.host.isConnected) {\n      return;\n    }\n    this.facetForRangeDependenciesManager?.stopWatching();\n    this.facetForInputDependenciesManager?.stopWatching();\n    this.filterDependenciesManager?.stopWatching();\n  }\n\n  private initializeSearchStatus() {\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\n  }\n  private initializeTabManager() {\n    this.tabManager = buildTabManager(this.bindings.engine);\n  }\n  private initializeFacetForInput() {\n    if (!this.withInput) {\n      return;\n    }\n    this.facetForInput = buildNumericFacet(this.bindings.engine, {\n      options: {\n        numberOfValues: 1,\n        generateAutomaticRanges: true,\n        facetId: `${this.facetId}_input_range`,\n        field: this.field,\n        sortCriteria: this.sortCriteria,\n        rangeAlgorithm: this.rangeAlgorithm,\n        filterFacetCount: this.filterFacetCount,\n        injectionDepth: this.injectionDepth,\n        tabs: {\n          included: [...this.tabsIncluded],\n          excluded: [...this.tabsExcluded],\n        },\n      },\n    });\n\n    this.facetForInputDependenciesManager = this.initializeDependenciesManager(\n      this.facetForInput.state.facetId\n    );\n\n    return this.facetForInput;\n  }\n\n  private initializeFacetForRange() {\n    if (this.numberOfValues <= 0) {\n      return;\n    }\n\n    this.manualRanges = Array.from(\n      this.host.querySelectorAll('atomic-numeric-range')\n    ).map(({start, end, endInclusive, label}) => ({\n      ...buildNumericRange({start, end, endInclusive}),\n      label,\n    }));\n\n    this.facetForRange = buildNumericFacet(this.bindings.engine, {\n      options: {\n        facetId: this.facetId,\n        field: this.field,\n        numberOfValues: this.numberOfValues,\n        sortCriteria: this.sortCriteria,\n        rangeAlgorithm: this.rangeAlgorithm,\n        currentValues: this.manualRanges,\n        generateAutomaticRanges: !this.manualRanges.length,\n        filterFacetCount: this.filterFacetCount,\n        injectionDepth: this.injectionDepth,\n        tabs: {\n          included: [...this.tabsIncluded],\n          excluded: [...this.tabsExcluded],\n        },\n      },\n    });\n\n    this.facetForRangeDependenciesManager = this.initializeDependenciesManager(\n      this.facetForRange.state.facetId\n    );\n\n    return this.facetForRange;\n  }\n\n  private initializeFilter() {\n    if (!this.withInput) {\n      return;\n    }\n    this.filter = buildNumericFilter(this.bindings.engine, {\n      options: {\n        facetId: `${this.facetId}_input`,\n        field: this.field,\n        tabs: {\n          included: [...this.tabsIncluded],\n          excluded: [...this.tabsExcluded],\n        },\n      },\n    });\n\n    this.filterDependenciesManager = this.initializeDependenciesManager(\n      this.filter.state.facetId\n    );\n  }\n\n  private initializeDependenciesManager(facetId: string) {\n    return buildFacetConditionsManager(this.bindings.engine, {\n      facetId,\n      conditions: parseDependsOn<FacetValueRequest | CategoryFacetValueRequest>(\n        this.dependsOn\n      ),\n    });\n  }\n\n  private registerFacetToStore() {\n    const facetInfo: FacetInfo = {\n      label: () => this.bindings.i18n.t(this.label),\n      facetId: this.facetId!,\n      element: this.host,\n      isHidden: () => this.isHidden,\n    };\n\n    this.bindings.store.registerFacet('numericFacets', {\n      ...facetInfo,\n      format: (value) =>\n        formatHumanReadable({\n          facetValue: value,\n          logger: this.bindings.engine.logger,\n          i18n: this.bindings.i18n,\n          field: this.field,\n          manualRanges: this.manualRanges,\n          formatter: this.formatter,\n        }),\n    });\n\n    initializePopover(this.host, {\n      ...facetInfo,\n      hasValues: () => this.hasValues,\n      numberOfActiveValues: () => this.numberOfSelectedValues,\n    });\n\n    if (this.filter) {\n      this.bindings.store.state.numericFacets[this.filter.state.facetId] =\n        this.bindings.store.state.numericFacets[this.facetId!];\n    }\n  }\n\n  @Listen('atomic/numberFormat')\n  public setFormat(event: CustomEvent<NumberFormatter>) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.formatter = event.detail;\n  }\n\n  @Listen('atomic/numberInputApply')\n  public applyNumberInput() {\n    this.facetId &&\n      this.bindings.engine.dispatch(\n        loadNumericFacetSetActions(\n          this.bindings.engine\n        ).deselectAllNumericFacetValues(this.facetId)\n      );\n  }\n\n  public render() {\n    const {\n      searchStatusState: {firstSearchExecuted, hasError},\n      bindings: {i18n},\n    } = this;\n    return (\n      <FacetGuard\n        enabled={this.enabled}\n        firstSearchExecuted={firstSearchExecuted}\n        hasError={hasError}\n        hasResults={this.shouldRenderFacet}\n      >\n        {firstSearchExecuted ? (\n          <FacetContainer>\n            <FacetHeader\n              i18n={i18n}\n              label={this.label}\n              onClearFilters={() => {\n                this.focusTarget.focusAfterSearch();\n                if (this.filterState?.range) {\n                  this.filter?.clear();\n                  return;\n                }\n                this.facetForRange?.deselectAll();\n              }}\n              numberOfActiveValues={this.numberOfSelectedValues}\n              isCollapsed={this.isCollapsed}\n              headingLevel={this.headingLevel}\n              onToggleCollapse={() => (this.isCollapsed = !this.isCollapsed)}\n              headerRef={(el) => this.focusTarget.setTarget(el)}\n            />\n            {!this.isCollapsed && [\n              this.shouldRenderValues && this.renderValues(),\n              this.shouldRenderInput && (\n                <atomic-facet-number-input\n                  type={this.withInput!}\n                  bindings={this.bindings}\n                  label={this.label}\n                  filter={this.filter!}\n                  filterState={this.filter!.state}\n                ></atomic-facet-number-input>\n              ),\n            ]}\n          </FacetContainer>\n        ) : (\n          <FacetPlaceholder\n            isCollapsed={this.isCollapsed}\n            numberOfValues={this.numberOfValues}\n          />\n        )}\n      </FacetGuard>\n    );\n  }\n\n  private renderValues() {\n    const {\n      displayValuesAs,\n      field,\n      manualRanges,\n      label,\n      bindings: {\n        i18n,\n        engine: {logger},\n      },\n      formatter,\n    } = this;\n\n    return (\n      <NumericFacetValuesContainer i18n={i18n} label={label}>\n        {this.valuesToRender.map((value) => (\n          <NumericFacetValueLink\n            formatter={formatter}\n            displayValuesAs={displayValuesAs}\n            facetValue={value}\n            field={field}\n            i18n={i18n}\n            logger={logger}\n            manualRanges={manualRanges}\n            onClick={() =>\n              this.displayValuesAs === 'link'\n                ? this.facetForRange!.toggleSingleSelect(value)\n                : this.facetForRange!.toggleSelect(value)\n            }\n          />\n        ))}\n      </NumericFacetValuesContainer>\n    );\n  }\n\n  private get numberOfSelectedValues() {\n    if (this.filter?.state.range) {\n      return 1;\n    }\n\n    return (\n      this.facetForRange?.state.values.filter(({state}) => state === 'selected')\n        .length || 0\n    );\n  }\n\n  private get shouldRenderValues() {\n    return (\n      !this.hasInputRange &&\n      this.numberOfValues > 0 &&\n      !!this.valuesToRender.length\n    );\n  }\n\n  private get hasInputRange() {\n    return !!this.filter?.state.range;\n  }\n\n  private get valuesToRender() {\n    return (\n      this.facetForRange?.state.values.filter(\n        (value) => value.numberOfResults || value.state !== 'idle'\n      ) || []\n    );\n  }\n\n  private get shouldRenderInput() {\n    return shouldDisplayInputForFacetRange({\n      hasInputRange: this.hasInputRange,\n      searchStatusState: this.searchStatusState,\n      facetValues: this.facetForInput?.state.values || [],\n      hasInput: !!this.withInput,\n    });\n  }\n\n  private computeFacetId() {\n    if (this.facetId) {\n      return;\n    }\n\n    if (this.bindings.store.state.numericFacets[this.field]) {\n      this.facetId = randomID(`${this.field}_`);\n    }\n\n    this.facetId = this.field;\n  }\n\n  private get enabled() {\n    return this.facetState?.enabled ?? this.filter?.state.enabled ?? true;\n  }\n\n  private get isHidden() {\n    return !this.shouldRenderFacet || !this.enabled;\n  }\n\n  private get shouldRenderFacet() {\n    return this.shouldRenderInput || this.shouldRenderValues;\n  }\n\n  private get hasValues() {\n    if (this.facetForInput?.state.values.length) {\n      return true;\n    }\n\n    return !!this.valuesToRender.length;\n  }\n\n  private validateProps() {\n    new Schema({\n      displayValuesAs: new StringValue({constrainTo: ['checkbox', 'link']}),\n      withInput: new StringValue({constrainTo: ['integer', 'decimal']}),\n    }).validate({\n      displayValuesAs: this.displayValuesAs,\n      withInput: this.withInput,\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]}