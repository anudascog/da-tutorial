{"file":"atomic-commerce-did-you-mean.entry.js","mappings":";;;;;;;;;;AAAA,MAAM,2BAA2B,GAAG,qi1DAAqi1D,CAAC;AAC1k1D,uCAAe,2BAA2B;;;;;;;;;;;;MCsC7B,wBAAwB;;;;;;;IAgB5B,UAAU;QACf,IAAI,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,KAAK,QAAQ,EAAE;YACpD,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,CACpB,gGAAgG,CACjG,CAAC;SACH;QAED,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,CAAC;QACjE,IAAI,CAAC,YAAY,GAAG,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;KAC7D;IAED,IAAY,OAAO;QACjB,IAAI,CAAC,IAAI,CAAC,eAAe,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;YACpD,OAAO;SACR;QAED,MAAM,EAAC,kBAAkB,EAAE,yBAAyB,EAAC,GACnD,IAAI,CAAC,eAAe,CAAC;QACvB,MAAM,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC;QAE3D,IAAI,kBAAkB,IAAI,yBAAyB,EAAE;YACnD,QACE,EAAC,cAAc,IACb,WAAW,EAAE,IAAI,CAAC,eAAe,CAAC,cAAc,EAChD,aAAa,EAAE,IAAI,CAAC,eAAe,CAAC,aAAa,EACjD,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,GACxB,EACF;SACH;QACD,IAAI,kBAAkB,EAAE;YACtB,QACE,EAAC,UAAU,IACT,cAAc,EAAE,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,cAAc,EACnE,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI;;gBAExB,OAAO,EAAE,SAAQ,GACjB,EACF;SACH;QACD,IAAI,UAAU,EAAE;YACd,QACE,EAAC,iBAAiB,IAChB,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,EACxB,cAAc,EAAE,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAC/C,aAAa,EAAE,IAAI,CAAC,iBAAiB,CAAC,aAAa,EACnD,OAAO,EAAE,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,GACvC,EACF;SACH;KACF;IAEM,MAAM;QACX,IAAI,CAAC,IAAI,CAAC,eAAe,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;YACpD,OAAO;SACR;QAED,QACE,EAAC,oBAAoB,IACnB,aAAa,EACX,IAAI,CAAC,eAAe,CAAC,kBAAkB;gBACvC,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,IAGxC,IAAI,CAAC,OAAO,CACQ,EACvB;KACH;;AA/E4B;IAA5B,kBAAkB,EAAE;0DAAoC;AAMjD;IAFP,qBAAqB,CAAC,YAAY,CAAC;iEAEM;AAGlC;IAFP,qBAAqB,CAAC,cAAc,CAAC;mEAEQ;;;;;","names":[],"sources":["src/components/commerce/atomic-commerce-did-you-mean/atomic-commerce-did-you-mean.pcss?tag=atomic-commerce-did-you-mean&encapsulation=shadow","src/components/commerce/atomic-commerce-did-you-mean/atomic-commerce-did-you-mean.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\n","import {\n  DidYouMeanState,\n  DidYouMean,\n  buildSearch,\n  QueryTrigger,\n  buildQueryTrigger,\n  QueryTriggerState,\n} from '@coveo/headless/commerce';\nimport {Component, State, h} from '@stencil/core';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {AutoCorrection} from '../../common/query-correction/auto-correction';\nimport {Correction} from '../../common/query-correction/correction';\nimport {QueryCorrectionGuard} from '../../common/query-correction/guard';\nimport {TriggerCorrection} from '../../common/query-correction/trigger-correction';\nimport {CommerceBindings} from '../atomic-commerce-interface/atomic-commerce-interface';\n\n/**\n * @alpha\n *\n * The `atomic-commerce-query-correction` component is responsible for handling query corrections. When a query returns no products but finds a possible query correction, the component either suggests the correction or automatically triggers a new query with the suggested term.\n *\n * @part no-results - The text displayed when there are no results.\n * @part auto-corrected - The text displayed for the automatically corrected query.\n * @part showing-results-for - The first paragraph of the text displayed when a query trigger changes a query.\n * @part search-instead-for - The second paragraph of the text displayed when a query trigger changes a query.\n * @part did-you-mean - The text displayed around the button to manually correct a query.\n * @part correction-btn - The button used to manually correct a query.\n * @part undo-btn - The button used to undo a query changed by a query trigger.\n * @part highlight - The query highlights.\n */\n@Component({\n  tag: 'atomic-commerce-did-you-mean',\n  styleUrl: 'atomic-commerce-did-you-mean.pcss',\n  shadow: true,\n})\nexport class AtomicCommerceDidYouMean\n  implements InitializableComponent<CommerceBindings>\n{\n  @InitializeBindings() public bindings!: CommerceBindings;\n  didYouMean!: DidYouMean;\n  queryTrigger!: QueryTrigger;\n\n  @BindStateToController('didYouMean')\n  @State()\n  private didYouMeanState?: DidYouMeanState;\n  @BindStateToController('queryTrigger')\n  @State()\n  private queryTriggerState?: QueryTriggerState;\n  @State()\n  public error!: Error;\n\n  public initialize() {\n    if (this.bindings.interfaceElement.type !== 'search') {\n      this.error = new Error(\n        'atomic-commerce-did-you-mean is only usable with an atomic-commerce-interface of type \"search\"'\n      );\n    }\n\n    this.didYouMean = buildSearch(this.bindings.engine).didYouMean();\n    this.queryTrigger = buildQueryTrigger(this.bindings.engine);\n  }\n\n  private get content() {\n    if (!this.didYouMeanState || !this.queryTriggerState) {\n      return;\n    }\n\n    const {hasQueryCorrection, wasAutomaticallyCorrected} =\n      this.didYouMeanState;\n    const hasTrigger = this.queryTriggerState.wasQueryModified;\n\n    if (hasQueryCorrection && wasAutomaticallyCorrected) {\n      return (\n        <AutoCorrection\n          correctedTo={this.didYouMeanState.wasCorrectedTo}\n          originalQuery={this.didYouMeanState.originalQuery}\n          i18n={this.bindings.i18n}\n        />\n      );\n    }\n    if (hasQueryCorrection) {\n      return (\n        <Correction\n          correctedQuery={this.didYouMeanState.queryCorrection.correctedQuery}\n          i18n={this.bindings.i18n}\n          //TODO - https://coveord.atlassian.net/browse/KIT-3691 - implement applyCorrection here.\n          onClick={() => {}}\n        />\n      );\n    }\n    if (hasTrigger) {\n      return (\n        <TriggerCorrection\n          i18n={this.bindings.i18n}\n          correctedQuery={this.queryTriggerState.newQuery}\n          originalQuery={this.queryTriggerState.originalQuery}\n          onClick={() => this.queryTrigger.undo()}\n        />\n      );\n    }\n  }\n\n  public render() {\n    if (!this.didYouMeanState || !this.queryTriggerState) {\n      return;\n    }\n\n    return (\n      <QueryCorrectionGuard\n        hasCorrection={\n          this.didYouMeanState.hasQueryCorrection ||\n          this.queryTriggerState.wasQueryModified\n        }\n      >\n        {this.content}\n      </QueryCorrectionGuard>\n    );\n  }\n}\n"],"version":3}