{"file":"replace-breakpoint.js","mappings":";;MAEa,yBAAyB,GAAG,SAAS;AAElD,SAAS,iBAAiB,CAAC,KAAa,EAAE,gBAAwB;IAChE,MAAM,KAAK,GAAG,IAAI,MAAM,CACtB,iBAAiB,yBAAyB,mBAAmB,yBAAyB,KAAK,EAC3F,GAAG,CACJ,CAAC;IACF,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,aAAa,gBAAgB,GAAG,CAAC,CAAC;AAChE,CAAC;AAED,SAAS,iBAAiB,CAAC,OAAoB,EAAE,gBAAwB;IACvE,MAAM,WAAW,GAAG,OAAO,CAAC,UAAU,EAAE,kBAAkB,CAAC;IAC3D,IAAI,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;QACvC,OAAO;KACR;IAED,MAAM,UAAU,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;IAClC,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC;SAC7C,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,OAAO,CAAC;SAC3B,IAAI,CAAC,EAAE,CAAC,CAAC;IACZ,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC,CAAC;AACrE,CAAC;AAED,SAAS,mBAAmB,CAAC,OAAoB,EAAE,UAAkB;IACnE,MAAM,QAAQ,GAAG,OAAO,CAAC,UAAU,EAAE,aAAa,CAAC,OAAO,CAAC,CAAC;IAC5D,IAAI,CAAC,QAAQ,EAAE;QACb,OAAO;KACR;IAED,QAAQ,CAAC,WAAW,GAAG,iBAAiB,CAAC,QAAQ,CAAC,WAAY,EAAE,UAAU,CAAC,CAAC;AAC9E,CAAC;AAED,MAAM,OAAO,GAAG,CAAC,sBAAsB,EAAE,uBAAuB,CAAC,CAAC;SAElD,iBAAiB,CAAC,OAAoB;IACpD,MAAM,MAAM,GAAyB,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAE1E,IAAI,CAAC,MAAM,EAAE,gBAAgB,EAAE;QAC7B,OAAO;KACR;IAED,IAAI,MAAM,CAAC,gBAAgB,KAAK,yBAAyB,EAAE;QACzD,OAAO;KACR;IAED,iBAAiB,CAAC,OAAO,EAAE,MAAM,CAAC,gBAAgB,CAAC,CAAC;IACpD,mBAAmB,CAAC,OAAO,EAAE,MAAM,CAAC,gBAAgB,CAAC,CAAC;AACxD;;;;","names":[],"sources":["src/utils/replace-breakpoint.ts"],"sourcesContent":["import {closest} from './dom-utils';\n\nexport const DEFAULT_MOBILE_BREAKPOINT = '1024px';\n\nfunction replaceMediaQuery(style: string, mobileBreakpoint: string) {\n  const regex = new RegExp(\n    `\\\\(min-width: ${DEFAULT_MOBILE_BREAKPOINT}\\\\)|\\\\(width >= ${DEFAULT_MOBILE_BREAKPOINT}\\\\)`,\n    'g'\n  );\n  return style.replace(regex, `(width >= ${mobileBreakpoint})`);\n}\n\nfunction replaceStyleSheet(element: HTMLElement, mobileBreakpoint: string) {\n  const stylesheets = element.shadowRoot?.adoptedStyleSheets;\n  if (!stylesheets || !stylesheets.length) {\n    return;\n  }\n\n  const stylesheet = stylesheets[0];\n  const style = Object.values(stylesheet.cssRules)\n    .map((rule) => rule.cssText)\n    .join('');\n  stylesheet.replaceSync(replaceMediaQuery(style, mobileBreakpoint));\n}\n\nfunction replateStyleContent(element: HTMLElement, breakpoint: string) {\n  const styleTag = element.shadowRoot?.querySelector('style');\n  if (!styleTag) {\n    return;\n  }\n\n  styleTag.textContent = replaceMediaQuery(styleTag.textContent!, breakpoint);\n}\n\nconst layouts = ['atomic-search-layout', 'atomic-insight-layout'];\ntype LayoutElement = HTMLElement & {mobileBreakpoint: string};\nexport function updateBreakpoints(element: HTMLElement) {\n  const layout: LayoutElement | null = closest(element, layouts.join(', '));\n\n  if (!layout?.mobileBreakpoint) {\n    return;\n  }\n\n  if (layout.mobileBreakpoint === DEFAULT_MOBILE_BREAKPOINT) {\n    return;\n  }\n\n  replaceStyleSheet(element, layout.mobileBreakpoint);\n  replateStyleContent(element, layout.mobileBreakpoint);\n}\n"],"version":3}