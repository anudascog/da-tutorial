{"version":3,"names":["MissingInterfaceParentError","Error","constructor","elementName","super","initializableElements","join","initializeEventName"],"sources":["src/utils/initialization-lit-stencil-common-utils.ts"],"sourcesContent":["import type {AnyBindings} from '../components/common/interface/bindings';\nimport {closest} from './dom-utils';\nimport {buildCustomEvent} from './event-utils';\nimport {enqueueOrDispatchInitializationEvent} from './init-queue';\n\nexport function fetchBindings<SpecificBindings extends AnyBindings>(\n  element: Element\n) {\n  return new Promise<SpecificBindings>((resolve, reject) => {\n    const event = buildCustomEvent<InitializeEventHandler>(\n      initializeEventName,\n      (bindings: unknown) => resolve(bindings as SpecificBindings)\n    );\n    const parent = closest(element, initializableElements.join(', '));\n    if (!parent) {\n      reject(new MissingInterfaceParentError(element.nodeName.toLowerCase()));\n      return;\n    }\n    enqueueOrDispatchInitializationEvent(parent, event, element);\n  });\n}\nexport type InitializeEventHandler = (bindings: AnyBindings) => void;\nexport class MissingInterfaceParentError extends Error {\n  constructor(elementName: string) {\n    super(\n      `The \"${elementName}\" element must be the child of the following elements: ${initializableElements.join(\n        ', '\n      )}`\n    );\n  }\n}\nexport const initializableElements = [\n  'atomic-recs-interface',\n  'atomic-search-interface',\n  'atomic-commerce-interface',\n  'atomic-commerce-recommendation-interface',\n  'atomic-relevance-inspector',\n  'atomic-insight-interface',\n  'atomic-external',\n];\nexport const initializeEventName = 'atomic/initializeComponent';\n"],"mappings":"MAsBaA,UAAoCC,MAC/C,WAAAC,CAAYC,GACVC,MACE,QAAQD,2DAAqEE,EAAsBC,KACjG,Q,QAKKD,EAAwB,CACnC,wBACA,0BACA,4BACA,2CACA,6BACA,2BACA,mB,MAEWE,EAAsB,oC","ignoreList":[]}