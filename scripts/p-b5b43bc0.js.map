{"version":3,"names":["RadioButton","props","classNames","onMouseDown","style","rippleColor","getRippleColorForButtonStyle","push","getClassNameForButtonStyle","e","createRipple","color","checked","class","handleKeyDown","event","selectWhenFocused","key","radioGroup","currentTarget","parentNode","isArrowKey","preventDefault","buttons","getRadioButtons","currentIndex","getCurrentIndex","newIndex","getNewIndex","length","focus","includes","Array","from","querySelectorAll","currentButton","findIndex","button","attributes","name","groupName","join","part","ariaLabel","text","ariaCurrent","value","ref","h","onKeyDown","type","onChange","onChecked"],"sources":["src/components/common/stencil-radio-button.tsx"],"sourcesContent":["import {FunctionalComponent, h} from '@stencil/core';\nimport {JSXBase} from '@stencil/core/internal';\nimport {createRipple} from '../../utils/ripple';\nimport {RadioButtonProps} from './radio-button';\nimport {\n  getClassNameForButtonStyle,\n  getRippleColorForButtonStyle,\n} from './stencil-button-style';\n\n/**\n * @deprecated Should only be used for Stencil components; for Lit components, use the RadioButtonProps from radio-button.ts instead.\n */\nexport interface StencilRadioButtonProps extends Omit<RadioButtonProps, 'ref'> {\n  ref?(element?: HTMLInputElement): void;\n}\n\n/**\n * @deprecated Should only be used for Stencil components; for Lit components, use the radioButton function instead.\n */\nexport const RadioButton: FunctionalComponent<StencilRadioButtonProps> = (\n  props\n) => {\n  const classNames = ['btn-radio'];\n  let onMouseDown:\n    | JSXBase.DOMAttributes<HTMLInputElement>['onMouseDown']\n    | undefined;\n  if (props.style) {\n    const rippleColor = getRippleColorForButtonStyle(props.style);\n    classNames.push(getClassNameForButtonStyle(props.style));\n\n    onMouseDown = (e) => createRipple(e, {color: rippleColor});\n  }\n  if (props.checked) {\n    classNames.push('selected');\n  }\n  if (props.class) {\n    classNames.push(props.class);\n  }\n\n  const handleKeyDown = (event: KeyboardEvent) => {\n    if (props.selectWhenFocused !== false) {\n      return;\n    }\n    const {key} = event;\n    const radioGroup = (event.currentTarget as HTMLElement).parentNode;\n\n    if (!radioGroup || !isArrowKey(key)) {\n      return;\n    }\n\n    event.preventDefault();\n\n    const buttons = getRadioButtons(radioGroup);\n    const currentIndex = getCurrentIndex(\n      buttons,\n      event.currentTarget as HTMLInputElement\n    );\n    const newIndex = getNewIndex(key, currentIndex, buttons.length);\n\n    if (buttons[newIndex]) {\n      buttons[newIndex].focus();\n    }\n  };\n\n  const isArrowKey = (key: string) => {\n    return ['ArrowLeft', 'ArrowRight', 'ArrowDown', 'ArrowUp'].includes(key);\n  };\n\n  const getRadioButtons = (radioGroup: ParentNode) => {\n    return Array.from(\n      radioGroup.querySelectorAll('[type=\"radio\"]')\n    ) as HTMLInputElement[];\n  };\n\n  const getCurrentIndex = (\n    buttons: HTMLInputElement[],\n    currentButton: HTMLInputElement\n  ) => {\n    return buttons.findIndex((button) => button === currentButton);\n  };\n\n  const getNewIndex = (key: string, currentIndex: number, length: number) => {\n    switch (key) {\n      case 'ArrowLeft':\n      case 'ArrowUp':\n        return (currentIndex - 1 + length) % length;\n      case 'ArrowRight':\n      case 'ArrowDown':\n        return (currentIndex + 1) % length;\n      default:\n        return currentIndex;\n    }\n  };\n\n  const attributes = {\n    name: props.groupName,\n    key: props.key,\n    checked: props.checked,\n    class: classNames.join(' '),\n    part: props.part,\n    'aria-label': props.ariaLabel ?? props.text,\n    'aria-current': props.ariaCurrent,\n    value: props.text,\n    ref: props.ref,\n  };\n\n  return (\n    <input\n      onKeyDown={handleKeyDown}\n      type=\"radio\"\n      onChange={(e) =>\n        (e.currentTarget as HTMLInputElement).checked && props.onChecked?.()\n      }\n      onMouseDown={onMouseDown}\n      {...attributes}\n    />\n  );\n};\n"],"mappings":"yHAmBaA,EACXC,IAEA,MAAMC,EAAa,CAAC,aACpB,IAAIC,EAGJ,GAAIF,EAAMG,MAAO,CACf,MAAMC,EAAcC,EAA6BL,EAAMG,OACvDF,EAAWK,KAAKC,EAA2BP,EAAMG,QAEjDD,EAAeM,GAAMC,EAAaD,EAAG,CAACE,MAAON,G,CAE/C,GAAIJ,EAAMW,QAAS,CACjBV,EAAWK,KAAK,W,CAElB,GAAIN,EAAMY,MAAO,CACfX,EAAWK,KAAKN,EAAMY,M,CAGxB,MAAMC,EAAiBC,IACrB,GAAId,EAAMe,oBAAsB,MAAO,CACrC,M,CAEF,MAAMC,IAACA,GAAOF,EACd,MAAMG,EAAcH,EAAMI,cAA8BC,WAExD,IAAKF,IAAeG,EAAWJ,GAAM,CACnC,M,CAGFF,EAAMO,iBAEN,MAAMC,EAAUC,EAAgBN,GAChC,MAAMO,EAAeC,EACnBH,EACAR,EAAMI,eAER,MAAMQ,EAAWC,EAAYX,EAAKQ,EAAcF,EAAQM,QAExD,GAAIN,EAAQI,GAAW,CACrBJ,EAAQI,GAAUG,O,GAItB,MAAMT,EAAcJ,GACX,CAAC,YAAa,aAAc,YAAa,WAAWc,SAASd,GAGtE,MAAMO,EAAmBN,GAChBc,MAAMC,KACXf,EAAWgB,iBAAiB,mBAIhC,MAAMR,EAAkB,CACtBH,EACAY,IAEOZ,EAAQa,WAAWC,GAAWA,IAAWF,IAGlD,MAAMP,EAAc,CAACX,EAAaQ,EAAsBI,KACtD,OAAQZ,GACN,IAAK,YACL,IAAK,UACH,OAAQQ,EAAe,EAAII,GAAUA,EACvC,IAAK,aACL,IAAK,YACH,OAAQJ,EAAe,GAAKI,EAC9B,QACE,OAAOJ,E,EAIb,MAAMa,EAAa,CACjBC,KAAMtC,EAAMuC,UACZvB,IAAKhB,EAAMgB,IACXL,QAASX,EAAMW,QACfC,MAAOX,EAAWuC,KAAK,KACvBC,KAAMzC,EAAMyC,KACZ,aAAczC,EAAM0C,WAAa1C,EAAM2C,KACvC,eAAgB3C,EAAM4C,YACtBC,MAAO7C,EAAM2C,KACbG,IAAK9C,EAAM8C,KAGb,OACEC,EAAA,SACEC,UAAWnC,EACXoC,KAAK,QACLC,SAAW1C,GACRA,EAAEU,cAAmCP,SAAWX,EAAMmD,cAEzDjD,YAAaA,KACTmC,GACJ,S","ignoreList":[]}