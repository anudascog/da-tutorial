{"file":"atomic-insight-smart-snippet.entry.js","mappings":"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","names":["buildInsightSmartSnippet"],"sources":["src/components/insight/smart-snippets/atomic-insight-smart-snippet/atomic-insight-smart-snippet.pcss?tag=atomic-insight-smart-snippet&encapsulation=shadow","src/components/insight/smart-snippets/atomic-insight-smart-snippet/atomic-insight-smart-snippet.tsx"],"sourcesContent":["@import '../../../common/smart-snippets/atomic-smart-snippet/atomic-smart-snippet.pcss';\n","import {getAttributesFromLinkSlot} from '@/src/components/common/item-link/attributes-slot';\nimport {SmartSnippetFeedbackBanner} from '@/src/components/common/smart-snippets/atomic-smart-snippet-feedback-banner';\nimport {\n  SmartSnippetFooter,\n  SmartSnippetQuestion,\n  SmartSnippetWrapper,\n} from '@/src/components/common/smart-snippets/atomic-smart-snippet/smart-snippet-common';\nimport {Hidden} from '@/src/components/common/stencil-hidden';\nimport {randomID} from '@/src/utils/utils';\nimport {\n  buildSmartSnippet as buildInsightSmartSnippet,\n  SmartSnippet as InsightSmartSnippet,\n  SmartSnippetState as InsightSmartSnippetState,\n} from '@coveo/headless/insight';\nimport {Component, Prop, State, Element, h} from '@stencil/core';\nimport {\n  InitializableComponent,\n  InitializeBindings,\n  BindStateToController,\n} from '../../../../utils/initialization-utils';\nimport {InsightBindings} from '../../atomic-insight-interface/atomic-insight-interface';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-smart-snippet',\n  styleUrl: 'atomic-insight-smart-snippet.pcss',\n  shadow: true,\n})\nexport class AtomicInsightSmartSnippet\n  implements InitializableComponent<InsightBindings>\n{\n  @InitializeBindings() public bindings!: InsightBindings;\n  public smartSnippet!: InsightSmartSnippet;\n\n  @BindStateToController('smartSnippet')\n  @State()\n  public smartSnippetState!: InsightSmartSnippetState;\n  public error!: Error;\n\n  @Element() public host!: HTMLElement;\n\n  private id!: string;\n  private modalRef?: HTMLAtomicSmartSnippetFeedbackModalElement;\n\n  /**\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the question at the top of the snippet, from 1 to 5.\n   */\n  @Prop({reflect: true}) public headingLevel = 0;\n\n  /**\n   * The maximum height (in pixels) a snippet can have before the component truncates it and displays a \"show more\" button.\n   */\n  @Prop({reflect: true}) maximumHeight = 250;\n  /**\n   * When the answer is partly hidden, how much of its height (in pixels) should be visible.\n   */\n  @Prop({reflect: true}) collapsedHeight = 180;\n\n  /**\n   * Sets the style of the snippet.\n   *\n   * Example:\n   * ```ts\n   * smartSnippet.snippetStyle = `\n   *   b {\n   *     color: blue;\n   *   }\n   * `;\n   * ```\n   */\n  @Prop({reflect: true}) snippetStyle?: string;\n\n  @State() feedbackSent = false;\n\n  public initialize() {\n    this.id ||= randomID();\n    this.smartSnippet = buildInsightSmartSnippet(this.bindings.engine);\n  }\n\n  private setModalRef(ref: HTMLElement) {\n    this.modalRef = ref as HTMLAtomicInsightSmartSnippetFeedbackModalElement;\n  }\n\n  private setFeedbackSent(isSent: boolean) {\n    this.feedbackSent = isSent;\n  }\n\n  public componentWillUpdate() {\n    if (!(this.smartSnippetState.liked || this.smartSnippetState.disliked)) {\n      this.setFeedbackSent(false);\n    }\n  }\n\n  public render() {\n    if (!this.smartSnippetState.answerFound) {\n      return <Hidden></Hidden>;\n    }\n\n    const source = this.smartSnippetState.source;\n\n    return (\n      <SmartSnippetWrapper\n        headingLevel={this.headingLevel}\n        i18n={this.bindings.i18n}\n      >\n        <atomic-smart-snippet-collapse-wrapper>\n          <SmartSnippetQuestion\n            headingLevel={this.headingLevel}\n            question={this.smartSnippetState.question}\n          />\n          <atomic-smart-snippet-expandable-answer\n            collapsedHeight={this.collapsedHeight}\n            expanded={this.smartSnippetState.expanded}\n            exportparts=\"answer,show-more-button,show-less-button,truncated-answer\"\n            htmlContent={this.smartSnippetState.answer}\n            maximumHeight={this.maximumHeight}\n            onCollapse={() => this.smartSnippet.collapse()}\n            onExpand={() => this.smartSnippet.expand()}\n            part=\"body\"\n            snippetStyle={this.style}\n          ></atomic-smart-snippet-expandable-answer>\n          <SmartSnippetFooter i18n={this.bindings.i18n}>\n            {source && (\n              <atomic-smart-snippet-source\n                anchorAttributes={getAttributesFromLinkSlot(\n                  this.host,\n                  'source-anchor-attributes'\n                )}\n                onBeginDelayedSelectSource={\n                  this.smartSnippet.beginDelayedSelectSource\n                }\n                onCancelPendingSelectSource={\n                  this.smartSnippet.cancelPendingSelectSource\n                }\n                onSelectSource={this.smartSnippet.selectSource}\n                source={source}\n              ></atomic-smart-snippet-source>\n            )}\n            <SmartSnippetFeedbackBanner\n              disliked={this.smartSnippetState.disliked}\n              explainWhyRef={(button) => {\n                if (this.modalRef) {\n                  this.modalRef.source = button;\n                }\n              }}\n              feedbackSent={this.feedbackSent}\n              id={this.id}\n              i18n={this.bindings.i18n}\n              liked={this.smartSnippetState.liked}\n              onDislike={() => {\n                this.loadModal();\n                this.smartSnippet.dislike();\n              }}\n              onLike={() => this.smartSnippet.like()}\n              onPressExplainWhy={() => (this.modalRef!.isOpen = true)}\n            ></SmartSnippetFeedbackBanner>\n          </SmartSnippetFooter>\n        </atomic-smart-snippet-collapse-wrapper>\n      </SmartSnippetWrapper>\n    );\n  }\n\n  private get style() {\n    const styleTag = this.host\n      .querySelector('template')\n      ?.content.querySelector('style');\n    if (!styleTag) {\n      return this.snippetStyle;\n    }\n    return styleTag.innerHTML;\n  }\n\n  private loadModal() {\n    if (this.modalRef) {\n      return;\n    }\n    const modalRef = document.createElement(\n      'atomic-insight-smart-snippet-feedback-modal'\n    );\n    modalRef.addEventListener('feedbackSent', () => {\n      this.setFeedbackSent(true);\n    });\n    this.setModalRef(modalRef);\n    this.host.insertAdjacentElement('beforebegin', modalRef);\n  }\n}\n"],"version":3}