{"file":"atomic-commerce-load-more-products.entry.js","mappings":";;;;;;;;;;;;;;;;AAAA,MAAM,iCAAiC,GAAG,wq2DAAwq2D,CAAC;AACnt2D,6CAAe,iCAAiC;;;;;;;;;;;;MCsCnC,8BAA8B;;;QAaxB,gBAAW,GAAG,KAAK,CAAC;;;;2BAAN,KAAK;;IAE7B,UAAU;QACf,IAAI,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,KAAK,iBAAiB,EAAE;YAC7D,IAAI,CAAC,eAAe,GAAG,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;SAClE;aAAM;YACL,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;SAC1D;QACD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,CAAC;QAEpD,uBAAuB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,WAAW;YACvD,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;SAChC,CAAC,CAAC;KACJ;IAED,IAAY,WAAW;QACrB,OAAO,IAAI,CAAC,2BAA2B,CAAC,QAAQ,CAAC,MAAM,CAAC;KACzD;IAEO,MAAM,OAAO;QACnB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,EAAE,oBAAoB,EAAE,CAAC;QAC7D,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE,CAAC;KACrC;IAEM,MAAM;QACX,MAAM,EAAC,IAAI,EAAC,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC7B,QACE,EAAC,aAAa,qDACZ,UAAU,EAAE,IAAI,CAAC,eAAe,CAAC,YAAY,GAAG,CAAC,EACjD,QAAQ,EAAE,IAAI,CAAC,WAAW,IAE1B,EAAC,iBAAiB,uDAChB,EAAC,eAAe,qDACd,IAAI,EAAE,IAAI,CAAC,WAAW,EACtB,EAAE,EAAE,IAAI,CAAC,eAAe,CAAC,YAAY,EACrC,IAAI,EAAE,IAAI,EACV,KAAK,EAAC,+BAA+B,GACrC,EACF,EAAC,mBAAmB,qDAClB,IAAI,EAAE,IAAI,CAAC,WAAW,EACtB,EAAE,EAAE,IAAI,CAAC,eAAe,CAAC,YAAY,GACrC,EACF,EAAC,cAAc,qDACb,IAAI,EAAE,IAAI,EACV,KAAK,EAAE,oBAAoB,EAC3B,aAAa,EAAE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,YAAY,EACnE,OAAO,EAAE,MAAM,IAAI,CAAC,OAAO,EAAE,GAC7B,CACgB,CACN,EAChB;KACH;;AA/D4B;IAA5B,kBAAkB,EAAE;gEAAoC;AAMjD;IAFP,qBAAqB,CAAC,YAAY,CAAC;uEAEM;AAGlC;IAFP,qBAAqB,CAAC,iBAAiB,CAAC;mFAE+B;;;;;","names":[],"sources":["src/components/commerce/atomic-commerce-load-more-products/atomic-commerce-load-more-products.pcss?tag=atomic-commerce-load-more-products&encapsulation=shadow","src/components/commerce/atomic-commerce-load-more-products/atomic-commerce-load-more-products.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\n\n/**\n * @prop --atomic-more-results-progress-bar-color-from: Color of the start of the gradient for the load more results progress bar.\n * @prop --atomic-more-results-progress-bar-color-to: Color of the end of the gradient for the load more results progress bar.\n */\n.progress-bar {\n  @apply from-more-results-progress-bar-color-from;\n  @apply to-more-results-progress-bar-color-to;\n}\n","import {\n  Pagination,\n  PaginationState,\n  buildSearch,\n  buildProductListing,\n  ProductListing,\n  Search,\n  ProductListingState,\n  SearchState,\n} from '@coveo/headless/commerce';\nimport {Component, h, State} from '@stencil/core';\nimport {\n  BindStateToController,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {createAppLoadedListener} from '../../common/interface/store';\nimport {LoadMoreContainer} from '../../common/load-more/container';\nimport {LoadMoreGuard} from '../../common/load-more/guard';\nimport {LoadMoreProgressBar} from '../../common/load-more/progress-bar';\nimport {LoadMoreButton} from '../../common/load-more/stencil-button';\nimport {LoadMoreSummary} from '../../common/load-more/summary';\nimport {CommerceBindings} from '../atomic-commerce-interface/atomic-commerce-interface';\n\n/**\n * The `atomic-commerce-load-more-products` component allows the user to load additional products if more are available.\n *\n * @part container - The container of the component.\n * @part showing-results - The summary displaying which products are shown and how many are available.\n * @part highlight - The highlighted number of products displayed and number of products available.\n * @part progress-bar - The progress bar displaying a percentage of results shown over the total number of products available.\n * @part load-more-results-button - The \"Load more products\" button.\n *\n * @alpha\n */\n@Component({\n  tag: 'atomic-commerce-load-more-products',\n  styleUrl: 'atomic-commerce-load-more-products.pcss',\n  shadow: true,\n})\nexport class AtomicCommerceLoadMoreProducts {\n  @InitializeBindings() public bindings!: CommerceBindings;\n  public pagination!: Pagination;\n  public listingOrSearch!: ProductListing | Search;\n\n  @BindStateToController('pagination')\n  @State()\n  private paginationState!: PaginationState;\n  @BindStateToController('listingOrSearch')\n  @State()\n  private productListingOrSearchState!: ProductListingState | SearchState;\n\n  @State() public error!: Error;\n  @State() private isAppLoaded = false;\n\n  public initialize() {\n    if (this.bindings.interfaceElement.type === 'product-listing') {\n      this.listingOrSearch = buildProductListing(this.bindings.engine);\n    } else {\n      this.listingOrSearch = buildSearch(this.bindings.engine);\n    }\n    this.pagination = this.listingOrSearch.pagination();\n\n    createAppLoadedListener(this.bindings.store, (isAppLoaded) => {\n      this.isAppLoaded = isAppLoaded;\n    });\n  }\n\n  private get lastProduct() {\n    return this.productListingOrSearchState.products.length;\n  }\n\n  private async onClick() {\n    this.bindings.store.state.resultList?.focusOnNextNewResult();\n    this.pagination.fetchMoreProducts();\n  }\n\n  public render() {\n    const {i18n} = this.bindings;\n    return (\n      <LoadMoreGuard\n        hasResults={this.paginationState.totalEntries > 0}\n        isLoaded={this.isAppLoaded}\n      >\n        <LoadMoreContainer>\n          <LoadMoreSummary\n            from={this.lastProduct}\n            to={this.paginationState.totalEntries}\n            i18n={i18n}\n            label=\"showing-products-of-load-more\"\n          />\n          <LoadMoreProgressBar\n            from={this.lastProduct}\n            to={this.paginationState.totalEntries}\n          />\n          <LoadMoreButton\n            i18n={i18n}\n            label={'load-more-products'}\n            moreAvailable={this.lastProduct < this.paginationState.totalEntries}\n            onClick={() => this.onClick()}\n          />\n        </LoadMoreContainer>\n      </LoadMoreGuard>\n    );\n  }\n}\n"],"version":3}