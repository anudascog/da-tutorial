{"file":"atomic-product-template.entry.cjs.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;MA2Ba,qBAAqB;IAmChC;;;;;;;;;QArBe,eAAU,GAA+B,EAAE,CAAC;;;;;;QAOd,cAAS,GAGlD,EAAE,CAAC;;;;;QAMsC,iBAAY,GAGrD,EAAE,CAAC;;0BAnBiD,EAAE;yBAUtD,EAAE;4BASF,EAAE;KAEU;IAEhB,iBAAiB;QACf,IAAI,CAAC,qBAAqB,GAAG,IAAIA,kDAAqB,CAAC;YACrD,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,QAAQ,EAAE,CAAC,GAAG;gBACZ,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;aAClB;YACD,YAAY,EAAE;gBACZ,8BAA8B;gBAC9B,qCAAqC;gBACrC,6CAA6C;aAC9C;YACD,UAAU,EAAE,IAAI;SACjB,CAAC,CAAC;KACJ;IAEM,iBAAiB;QACtB,IAAI,CAAC,qBAAqB,CAAC,eAAe,GAAGC,gDAAmB,CAC9D,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,YAAY,CAClB,CAAC;KACH;;;;IAMM,MAAM,WAAW;QACtB,OAAO,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;KAC5E;IAEM,MAAM;QACX,OAAO,IAAI,CAAC,qBAAqB,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC7D;;;AAhD4C;IAApCC,kBAAO,CAAC,EAAC,WAAW,EAAE,IAAI,EAAC,CAAC;wDAG9B;AAMsC;IAApCA,kBAAO,CAAC,EAAC,WAAW,EAAE,IAAI,EAAC,CAAC;2DAG9B;;;;","names":["ProductTemplateCommon","makeMatchConditions","MapProp"],"sources":["src/components/commerce/atomic-product-template/atomic-product-template.tsx"],"sourcesContent":["import {\n  ProductTemplate,\n  ProductTemplateCondition,\n} from '@coveo/headless/commerce';\nimport {Component, Element, Prop, Method, State} from '@stencil/core';\nimport {MapProp} from '../../../utils/props-utils';\nimport {\n  makeMatchConditions,\n  ProductTemplateCommon,\n} from '../../common/product-template/stencil-product-template-common';\n\n/**\n * @alpha\n * * A product template determines the format of the query results, depending on the conditions that are defined for each template.\n *\n * A `template` element must be the child of an `atomic-product-template`. Furthermore, an `atomic-commerce-product-list`, `atomic-commerce-recommendation-list`, or `atomic-commerce-search-box-instant-products` must be the parent of each `atomic-product-template`.\n *\n * **Note:** Any `<script>` tags that are defined inside a `<template>` element will not be executed when the products are being rendered.\n * @MapProp name: mustMatch;attr: must-match;docs: The field and values that must be matched by a product item for the template to apply. For example, a template with the following attribute only applies to product items whose `filetype` is `lithiummessage` or `YouTubePlaylist`: `must-match-filetype=\"lithiummessage,YouTubePlaylist\"`;type: Record<string, string[]> ;default: {}\n * @MapProp name: mustNotMatch;attr: must-not-match;docs: The field and values that must not be matched by a product item for the template to apply. For example, a template with the following attribute only applies to product items whose `filetype` is not `lithiummessage`: `must-not-match-filetype=\"lithiummessage\";type: Record<string, string[]> ;default: {}\n * @slot default - The default slot where to insert the template element.\n * @slot link - A `template` element that contains a single `atomic-product-link` component.\n */\n@Component({\n  tag: 'atomic-product-template',\n  shadow: true,\n})\nexport class AtomicProductTemplate {\n  private productTemplateCommon!: ProductTemplateCommon;\n\n  @State() public error!: Error;\n\n  @Element() public host!: HTMLDivElement;\n\n  /**\n   * A function that must return true on products for the product template to apply.\n   * Set programmatically before initialization, not via attribute.\n   *\n   * For example, the following targets a template and sets a condition to make it apply only to products whose `ec_name` contains `singapore`:\n   * `document.querySelector('#target-template').conditions = [(product) => /singapore/i.test(product.ec_name)];`\n   */\n  @Prop() public conditions: ProductTemplateCondition[] = [];\n\n  /**\n   * The field and values that define which result items the condition must be applied to. For example, a template with the following attribute\n   * only applies to result items whose `filetype` is `lithiummessage` or `YouTubePlaylist`: `must-match-filetype=\"lithiummessage,YouTubePlaylist\"\n   * `;type: Record<string, string[]> ;default: {}\n   */\n  @Prop() @MapProp({splitValues: true}) public mustMatch: Record<\n    string,\n    string[]\n  > = {};\n\n  /**\n   * The field and values that define which result items the condition must not be applied to. For example, a template with the following attribute\n   * only applies to result items whose `filetype` is not `lithiummessage`: `must-not-match-filetype=\"lithiummessage\";type: Record<string, string[]> ;default: {}\n   */\n  @Prop() @MapProp({splitValues: true}) public mustNotMatch: Record<\n    string,\n    string[]\n  > = {};\n\n  constructor() {}\n\n  connectedCallback() {\n    this.productTemplateCommon = new ProductTemplateCommon({\n      host: this.host,\n      setError: (err) => {\n        this.error = err;\n      },\n      validParents: [\n        'atomic-commerce-product-list',\n        'atomic-commerce-recommendation-list',\n        'atomic-commerce-search-box-instant-products',\n      ],\n      allowEmpty: true,\n    });\n  }\n\n  public componentWillLoad() {\n    this.productTemplateCommon.matchConditions = makeMatchConditions(\n      this.mustMatch,\n      this.mustNotMatch\n    );\n  }\n\n  /**\n   * Gets the product template to apply based on the evaluated conditions.\n   */\n  @Method()\n  public async getTemplate(): Promise<ProductTemplate<DocumentFragment> | null> {\n    return this.productTemplateCommon.getTemplate(this.conditions, this.error);\n  }\n\n  public render() {\n    return this.productTemplateCommon.renderIfError(this.error);\n  }\n}\n"],"version":3}