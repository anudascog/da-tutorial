{"file":"atomic-insight-smart-snippet-suggestions.entry.js","mappings":"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","names":["buildInsightSmartSnippetQuestionsList"],"sources":["src/components/insight/smart-snippets/atomic-insight-smart-snippet-suggestions/atomic-insight-smart-snippet-suggestions.pcss?tag=atomic-insight-smart-snippet-suggestions&encapsulation=shadow","src/components/insight/smart-snippets/atomic-insight-smart-snippet-suggestions/atomic-insight-smart-snippet-suggestions.tsx"],"sourcesContent":["@import '../../../common/smart-snippets/atomic-smart-snippet-suggestions/atomic-smart-snippet-suggestions.pcss';\n","import {getAttributesFromLinkSlot} from '@/src/components/common/item-link/attributes-slot';\nimport {Hidden} from '@/src/components/common/stencil-hidden';\nimport {randomID} from '@/src/utils/utils';\nimport {\n  buildSmartSnippetQuestionsList as buildInsightSmartSnippetQuestionsList,\n  SmartSnippetQuestionsList as InsightSmartSnippetQuestionsList,\n  SmartSnippetQuestionsListState as InsightSmartSnippetQuestionsListState,\n  Result,\n  SmartSnippetRelatedQuestion,\n} from '@coveo/headless/insight';\nimport {Component, Prop, State, Element, h} from '@stencil/core';\nimport ArrowDown from '../../../../images/arrow-down.svg';\nimport ArrowRight from '../../../../images/arrow-right.svg';\nimport {\n  InitializableComponent,\n  InitializeBindings,\n  BindStateToController,\n} from '../../../../utils/initialization-utils';\nimport {\n  getQuestionPart,\n  SmartSnippetSuggestionsAnswerAndSourceWrapper,\n  SmartSnippetSuggestionsFooter,\n  SmartSnippetSuggestionsQuestion,\n  SmartSnippetSuggestionsQuestionWrapper,\n  SmartSnippetSuggestionsWrapper,\n} from '../../../common/smart-snippets/atomic-smart-snippet-suggestions/smart-snippet-suggestions-common';\nimport {InsightBindings} from '../../atomic-insight-interface/atomic-insight-interface';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-smart-snippet-suggestions',\n  styleUrl: 'atomic-insight-smart-snippet-suggestions.pcss',\n  shadow: true,\n})\nexport class AtomicInsightSmartSnippetSuggestions\n  implements InitializableComponent<InsightBindings>\n{\n  @InitializeBindings() public bindings!: InsightBindings;\n  public smartSnippetQuestionsList!: InsightSmartSnippetQuestionsList;\n  @BindStateToController('smartSnippetQuestionsList')\n  @State()\n  public smartSnippetQuestionsListState!: InsightSmartSnippetQuestionsListState;\n  public error!: Error;\n  @Element() public host!: HTMLElement;\n\n  /**\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the \"People also ask\" heading over the snippets, from 1 to 5.\n   */\n  @Prop({reflect: true}) public headingLevel = 0;\n\n  /**\n   * Sets the style of the snippets.\n   *\n   * Example:\n   * ```ts\n   * smartSnippet.snippetStyle = `\n   *   b {\n   *     color: blue;\n   *   }\n   * `;\n   * ```\n   */\n  @Prop() snippetStyle?: string;\n\n  private id!: string;\n\n  public initialize() {\n    this.id ||= randomID('atomic-smart-snippet-suggestions-');\n    this.smartSnippetQuestionsList = buildInsightSmartSnippetQuestionsList(\n      this.bindings.engine\n    );\n  }\n\n  public render() {\n    console.log(this.smartSnippetQuestionsListState);\n    if (!this.smartSnippetQuestionsListState.questions.length) {\n      return <Hidden></Hidden>;\n    }\n\n    return (\n      <SmartSnippetSuggestionsWrapper\n        headingLevel={this.headingLevel}\n        i18n={this.bindings.i18n}\n      >\n        {this.smartSnippetQuestionsListState.questions.map(\n          (relatedQuestion, i) => this.renderRelatedQuestion(relatedQuestion, i)\n        )}\n      </SmartSnippetSuggestionsWrapper>\n    );\n  }\n\n  private renderRelatedQuestion(\n    relatedQuestion: SmartSnippetRelatedQuestion,\n    index: number\n  ) {\n    return (\n      <SmartSnippetSuggestionsQuestionWrapper\n        expanded={relatedQuestion.expanded}\n        key={relatedQuestion.questionAnswerId}\n      >\n        <SmartSnippetSuggestionsQuestion\n          ariaControls={`${this.id}-${index}`}\n          expanded={relatedQuestion.expanded}\n          headingLevel={this.headingLevel}\n          onClick={() => this.toggleQuestion(relatedQuestion)}\n          question={relatedQuestion.question}\n        >\n          <atomic-icon\n            icon={relatedQuestion.expanded ? ArrowDown : ArrowRight}\n            part={getQuestionPart('icon', relatedQuestion.expanded)}\n            class=\"mr-3 w-2.5 stroke-[1.25]\"\n          ></atomic-icon>\n        </SmartSnippetSuggestionsQuestion>\n        {relatedQuestion.expanded && this.renderAnswer(relatedQuestion, index)}\n      </SmartSnippetSuggestionsQuestionWrapper>\n    );\n  }\n\n  private renderAnswer(\n    relatedQuestion: SmartSnippetRelatedQuestion,\n    index: number\n  ) {\n    return (\n      <SmartSnippetSuggestionsAnswerAndSourceWrapper\n        expanded={relatedQuestion.expanded}\n        id={`${this.id}-${index}`}\n      >\n        <atomic-smart-snippet-answer\n          exportparts=\"answer\"\n          htmlContent={relatedQuestion.answer}\n          innerStyle={this.style}\n          onSelectInlineLink={(e) =>\n            this.smartSnippetQuestionsList.selectInlineLink(\n              relatedQuestion.questionAnswerId,\n              e.detail\n            )\n          }\n          onBeginDelayedSelectInlineLink={(e) =>\n            this.smartSnippetQuestionsList.beginDelayedSelectInlineLink(\n              relatedQuestion.questionAnswerId,\n              e.detail\n            )\n          }\n          onCancelPendingSelectInlineLink={(e) =>\n            this.smartSnippetQuestionsList.cancelPendingSelectInlineLink(\n              relatedQuestion.questionAnswerId,\n              e.detail\n            )\n          }\n        ></atomic-smart-snippet-answer>\n        {relatedQuestion.source &&\n          this.renderSource(\n            relatedQuestion.questionAnswerId,\n            relatedQuestion.source\n          )}\n      </SmartSnippetSuggestionsAnswerAndSourceWrapper>\n    );\n  }\n\n  private renderSource(questionAnswerId: string, source: Result) {\n    return (\n      <SmartSnippetSuggestionsFooter i18n={this.bindings.i18n}>\n        <atomic-smart-snippet-source\n          anchorAttributes={getAttributesFromLinkSlot(\n            this.host,\n            'source-anchor-attributes'\n          )}\n          onBeginDelayedSelectSource={() =>\n            this.smartSnippetQuestionsList.beginDelayedSelectSource(\n              questionAnswerId\n            )\n          }\n          onCancelPendingSelectSource={() =>\n            this.smartSnippetQuestionsList.cancelPendingSelectSource(\n              questionAnswerId\n            )\n          }\n          onSelectSource={() =>\n            this.smartSnippetQuestionsList.selectSource(questionAnswerId)\n          }\n          source={source}\n        ></atomic-smart-snippet-source>\n      </SmartSnippetSuggestionsFooter>\n    );\n  }\n\n  private get style() {\n    const styleTag = this.host\n      .querySelector('template')\n      ?.content.querySelector('style');\n    if (!styleTag) {\n      return this.snippetStyle;\n    }\n    return styleTag.innerHTML;\n  }\n\n  private toggleQuestion(relatedQuestion: SmartSnippetRelatedQuestion) {\n    if (relatedQuestion.expanded) {\n      this.smartSnippetQuestionsList.collapse(relatedQuestion.questionAnswerId);\n    } else {\n      this.smartSnippetQuestionsList.expand(relatedQuestion.questionAnswerId);\n    }\n  }\n}\n"],"version":3}