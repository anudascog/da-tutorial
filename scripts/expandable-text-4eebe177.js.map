{"file":"expandable-text-4eebe177.js","mappings":";;;;AAiBA,MAAM,iBAAiB,GAAG,CAAC,aAA4B;IACrD,MAAM,YAAY,GAAkC;QAClD,IAAI,EAAE,iBAAiB;QACvB,CAAC,EAAE,cAAc;QACjB,CAAC,EAAE,cAAc;QACjB,CAAC,EAAE,cAAc;QACjB,CAAC,EAAE,cAAc;KAClB,CAAC;IACF,OAAO,YAAY,CAAC,aAAa,CAAC,IAAI,cAAc,CAAC;AACvD,CAAC,CAAC;AAEF,MAAM,oBAAoB,GAAG,CAC3B,UAAmB,EACnB,WAAoB,EACpB,aAAsB,EACtB,cAAwC,EACxC,aAAqB,EACrB,aAAqB;IAErB,IAAI,WAAW,GAAG,0DAA0D,CAAC;IAC7E,IAAI,CAAC,WAAW,IAAI,CAAC,UAAU,EAAE;QAC/B,WAAW,IAAI,YAAY,CAAC;KAC7B;SAAM,IAAI,CAAC,aAAa,IAAI,CAAC,WAAW,IAAI,UAAU,EAAE;QACvD,WAAW,IAAI,SAAS,CAAC;KAC1B;IAED,MAAM,KAAK,GAAG,UAAU,GAAG,aAAa,GAAG,aAAa,CAAC;IAEzD,QACE,EAAC,MAAM,IACL,KAAK,EAAC,cAAc,EACpB,KAAK,EAAE,WAAW,EAClB,KAAK,EAAE,KAAK,EACZ,OAAO,EAAE,cAAc;QAEvB,mBACE,IAAI,EAAE,UAAU,GAAG,SAAS,GAAG,QAAQ,EACvC,KAAK,EAAC,yBAAyB,GAClB;QACd,KAAK,CACC,EACT;AACJ,CAAC,CAAC;MAEW,cAAc,GAA6C,CACtE,EACE,UAAU,EACV,WAAW,EACX,aAAa,EACb,cAAc,EACd,aAAa,EACb,aAAa,EACb,aAAa,GAAG,KAAK,GACtB,EACD,QAAQ;IAER,QACE,WAAK,KAAK,EAAC,2BAA2B;QACpC,WACE,IAAI,EAAC,iBAAiB,EACtB,KAAK,EAAE,mBAAmB,CAAC,UAAU,GAAG,iBAAiB,CAAC,aAAa,CAAC,GAAG,EAAE,cAAc,aAAa,EAAE,IAEzG,QAAQ,CACL;QACL,oBAAoB,CACnB,UAAU,EACV,WAAW,EACX,aAAa,EACb,cAAc,EACd,aAAa,EACb,aAAa,CACd,CACG,EACN;AACJ;;;;","names":[],"sources":["src/components/common/expandable-text/expandable-text.tsx"],"sourcesContent":["import {FunctionalComponent, h} from '@stencil/core';\nimport MinusIcon from '../../../images/minus.svg';\nimport PlusIcon from '../../../images/plus.svg';\nimport {Button} from '../stencil-button';\n\nexport type TruncateAfter = 'none' | '1' | '2' | '3' | '4';\n\ninterface ExpandableTextProps {\n  isExpanded: boolean;\n  isTruncated: boolean;\n  isCollapsible?: boolean;\n  truncateAfter: TruncateAfter;\n  onToggleExpand: (e: MouseEvent | undefined) => void;\n  showMoreLabel: string;\n  showLessLabel: string;\n}\n\nconst getLineClampClass = (truncateAfter: TruncateAfter) => {\n  const lineClampMap: Record<TruncateAfter, string> = {\n    none: 'line-clamp-none',\n    1: 'line-clamp-1',\n    2: 'line-clamp-2',\n    3: 'line-clamp-3',\n    4: 'line-clamp-4',\n  };\n  return lineClampMap[truncateAfter] || 'line-clamp-2';\n};\n\nconst renderShowHideButton = (\n  isExpanded: boolean,\n  isTruncated: boolean,\n  isCollapsible: boolean,\n  onToggleExpand: (e?: MouseEvent) => void,\n  showMoreLabel: string,\n  showLessLabel: string\n) => {\n  let buttonClass = 'expandable-text-button p-1 text-xs leading-[calc(1/.75)]';\n  if (!isTruncated && !isExpanded) {\n    buttonClass += ' invisible';\n  } else if (!isCollapsible && !isTruncated && isExpanded) {\n    buttonClass += ' hidden';\n  }\n\n  const label = isExpanded ? showLessLabel : showMoreLabel;\n\n  return (\n    <Button\n      style=\"text-primary\"\n      class={buttonClass}\n      title={label}\n      onClick={onToggleExpand}\n    >\n      <atomic-icon\n        icon={isExpanded ? MinusIcon : PlusIcon}\n        class=\"mx-1 w-2 align-baseline\"\n      ></atomic-icon>\n      {label}\n    </Button>\n  );\n};\n\nexport const ExpandableText: FunctionalComponent<ExpandableTextProps> = (\n  {\n    isExpanded,\n    isTruncated,\n    truncateAfter,\n    onToggleExpand,\n    showMoreLabel,\n    showLessLabel,\n    isCollapsible = false,\n  },\n  children\n) => {\n  return (\n    <div class=\"flex flex-col items-start\">\n      <div\n        part=\"expandable-text\"\n        class={`expandable-text ${!isExpanded ? getLineClampClass(truncateAfter) : ''} min-lines-${truncateAfter}`}\n      >\n        {children}\n      </div>\n      {renderShowHideButton(\n        isExpanded,\n        isTruncated,\n        isCollapsible,\n        onToggleExpand,\n        showMoreLabel,\n        showLessLabel\n      )}\n    </div>\n  );\n};\n"],"version":3}