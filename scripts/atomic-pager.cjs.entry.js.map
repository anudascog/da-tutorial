{"file":"atomic-pager.entry.cjs.js","mappings":"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","names":["ArrowLeftIcon","ArrowRightIcon","randomID","buildSearchStatus","buildPager","createAppLoadedListener","h","PagerGuard","PagerNavigation","PagerPreviousButton","PagerPageButtons","PagerPageButton","PagerNextButton","InitializeBindings","BindStateToController"],"sources":["src/components/search/atomic-pager/atomic-pager.pcss?tag=atomic-pager&encapsulation=shadow","src/components/search/atomic-pager/atomic-pager.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\n","import {\n  buildPager,\n  buildSearchStatus,\n  Pager,\n  PagerState,\n  SearchStatus,\n  SearchStatusState,\n} from '@coveo/headless';\nimport {Component, Event, EventEmitter, h, Prop, State} from '@stencil/core';\nimport ArrowLeftIcon from '../../../images/arrow-left-rounded.svg';\nimport ArrowRightIcon from '../../../images/arrow-right-rounded.svg';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {randomID} from '../../../utils/utils';\nimport {createAppLoadedListener} from '../../common/interface/store';\nimport {\n  PagerNextButton,\n  PagerPageButton,\n  PagerPageButtons,\n  PagerPreviousButton,\n} from '../../common/pager/stencil-pager-buttons';\nimport {PagerGuard} from '../../common/pager/stencil-pager-guard';\nimport {PagerNavigation} from '../../common/pager/stencil-pager-navigation';\nimport {Bindings} from '../atomic-search-interface/atomic-search-interface';\n\n/**\n * The `atomic-pager` provides buttons that allow the end user to navigate through the different result pages.\n *\n * @part buttons - The list of the next/previous buttons and page-buttons.\n * @part page-buttons - The list of page buttons.\n * @part page-button - The page button.\n * @part active-page-button - The active page button.\n * @part previous-button - The previous button.\n * @part next-button - The next button.\n * @part previous-button-icon - Icon of the previous button.\n * @part next-button-icon - Icon of the next button.\n */\n@Component({\n  tag: 'atomic-pager',\n  styleUrl: 'atomic-pager.pcss',\n  shadow: true,\n})\nexport class AtomicPager implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  public pager!: Pager;\n  public searchStatus!: SearchStatus;\n\n  @BindStateToController('pager')\n  @State()\n  public pagerState!: PagerState;\n  @BindStateToController('searchStatus')\n  @State()\n  public searchStatusState!: SearchStatusState;\n  @State() error!: Error;\n  @State() private isAppLoaded = false;\n\n  @Event({\n    eventName: 'atomic/scrollToTop',\n  })\n  private scrollToTopEvent!: EventEmitter;\n\n  /**\n   * Specifies how many page buttons to display in the pager.\n   */\n  @Prop({reflect: true}) numberOfPages = 5;\n\n  /**\n   * The SVG icon to use to display the Previous button.\n   *\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\n   * - Use a stringified SVG to display it directly.\n   */\n  @Prop({reflect: true}) previousButtonIcon: string = ArrowLeftIcon;\n\n  /**\n   * The SVG icon to use to display the Next button.\n   *\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\n   * - Use a stringified SVG to display it directly.\n   */\n  @Prop({reflect: true}) nextButtonIcon: string = ArrowRightIcon;\n\n  private radioGroupName = randomID('atomic-pager-');\n\n  public initialize() {\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\n    this.pager = buildPager(this.bindings.engine, {\n      options: {numberOfPages: this.numberOfPages},\n    });\n    createAppLoadedListener(this.bindings.store, (isAppLoaded) => {\n      this.isAppLoaded = isAppLoaded;\n    });\n  }\n\n  public render() {\n    return (\n      <PagerGuard\n        hasError={this.searchStatusState.hasError}\n        hasItems={this.searchStatusState.hasResults}\n        isAppLoaded={this.isAppLoaded}\n      >\n        <PagerNavigation i18n={this.bindings.i18n}>\n          <PagerPreviousButton\n            icon={this.previousButtonIcon}\n            disabled={!this.pagerState.hasPreviousPage}\n            i18n={this.bindings.i18n}\n            onClick={() => {\n              this.pager.previousPage();\n              this.focusOnFirstResultAndScrollToTop();\n            }}\n          />\n          <PagerPageButtons i18n={this.bindings.i18n}>\n            {this.pagerState.currentPages.map((pageNumber) => {\n              return (\n                <PagerPageButton\n                  isSelected={this.pager.isCurrentPage(pageNumber)}\n                  ariaLabel={this.bindings.i18n.t('page-number', {pageNumber})}\n                  onChecked={() => {\n                    this.pager.selectPage(pageNumber);\n                    this.focusOnFirstResultAndScrollToTop();\n                  }}\n                  page={pageNumber}\n                  groupName={this.radioGroupName}\n                  text={pageNumber.toLocaleString(this.bindings.i18n.language)}\n                />\n              );\n            })}\n          </PagerPageButtons>\n          <PagerNextButton\n            icon={this.nextButtonIcon}\n            disabled={!this.pagerState.hasNextPage}\n            i18n={this.bindings.i18n}\n            onClick={() => {\n              this.pager.nextPage();\n              this.focusOnFirstResultAndScrollToTop();\n            }}\n          />\n        </PagerNavigation>\n      </PagerGuard>\n    );\n  }\n\n  private async focusOnFirstResultAndScrollToTop() {\n    await this.bindings.store.state.resultList?.focusOnFirstResultAfterNextSearch();\n    this.scrollToTopEvent.emit();\n  }\n}\n"],"version":3}