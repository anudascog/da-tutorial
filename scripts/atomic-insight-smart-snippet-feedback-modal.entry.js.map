{"file":"atomic-insight-smart-snippet-feedback-modal.entry.js","mappings":";;;;;;;;;;;;;;;;;AAAA,MAAM,yCAAyC,GAAG,4u2DAA4u2D,CAAC;AAC/x2D,qDAAe,yCAAyC;;;;;;;;;;;;MCyC3C,sCAAsC;;;;QAUX,WAAM,GAAG,KAAK,CAAC;QAIpC,WAAM,GAAG,QAAQ,CAChC,2CAA2C,CAC5C,CAAC;;;sBAN6C,KAAK;;;IAWpD,eAAe,CAAC,MAAe;QAC7B,IAAI,MAAM,EAAE;YACV,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,CAAC;YACtC,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC;SAChC;KACF;IAED,UAAU;QACR,IAAI,CAAC,YAAY,GAAGA,iBAAwB,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;KACpE;IAEM,MAAM;QACX,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE7B,QACE,qEACE,UAAU,EAAE,KAAK,EACjB,MAAM,EAAE,IAAI,CAAC,MAAM,EACnB,SAAS,EAAE,IAAI,CAAC,IAAI,EACpB,MAAM,EAAE,IAAI,CAAC,MAAM,EACnB,KAAK,EAAE,MAAM,IAAI,CAAC,KAAK,EAAE,EACzB,WAAW,EAAE,yBAAyB,IAEtC,EAAC,+BAA+B,qDAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAI,EAC7D,EAAC,6BAA6B,qDAC5B,MAAM,EAAE,IAAI,CAAC,MAAM,EACnB,QAAQ,EAAE,CAAC,CAAQ,KAAK,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,IAE5C,EAAC,+BAA+B,qDAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,IACtD,2BAA2B,CAAC,GAAG,CAC9B,CAAC,EAAC,EAAE,EAAE,SAAS,EAAE,mBAAmB,EAAC,MACnC,EAAC,+BAA+B,IAC9B,mBAAmB,EAAE,mBAAmB,EACxC,aAAa,EAAE,IAAI,CAAC,aAAa,EACjC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,EACxB,EAAE,EAAE,EAAE,EACN,SAAS,EAAE,SAAS,EACpB,QAAQ,EAAE;gBACR,IAAI,CAAC,aAAa,GAAG,mBAAmB,CAAC;aAC1C,GACD,CACH,CACF,CAC+B,EAClC,EAAC,gCAAgC,qDAC/B,aAAa,EAAE,IAAI,CAAC,aAAa,EACjC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,EACxB,kBAAkB,EAAE,CAAC,GAAG,MAAM,IAAI,CAAC,eAAe,GAAG,GAAG,CAAC,GACzD,CAC4B,EAChC,EAAC,+BAA+B,qDAC9B,MAAM,EAAE,IAAI,CAAC,MAAM,EACnB,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,EACxB,OAAO,EAAE,MAAM,IAAI,CAAC,KAAK,EAAE,GAC3B,CACW,EACf;KACH;IAEO,KAAK;QACX,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,YAAY,CAAC,kBAAkB,EAAE,CAAC;KACxC;IAEO,YAAY,CAAC,CAAQ;QAC3B,CAAC,CAAC,cAAc,EAAE,CAAC;QAEnB,IAAI,IAAI,CAAC,aAAa,KAAK,OAAO,EAAE;YAClC,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,IAAI,CAAC,eAAgB,CAAC,KAAK,CAAC,CAAC;SACrE;aAAM;YACL,IAAI,CAAC,YAAY,CAAC,YAAY,CAC5B,IAAI,CAAC,aAAqC,CAC3C,CAAC;SACH;QACD,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;QACzB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;KACrB;;;;;;AA9F4B;IAA5B,kBAAkB,EAAE;wEAAmC;;;;;","names":["buildInsightSmartSnippet"],"sources":["src/components/insight/smart-snippets/atomic-insight-smart-snippet-feedback-modal/atomic-insight-smart-snippet-feedback-modal.pcss?tag=atomic-insight-smart-snippet-feedback-modal&encapsulation=shadow","src/components/insight/smart-snippets/atomic-insight-smart-snippet-feedback-modal/atomic-insight-smart-snippet-feedback-modal.tsx"],"sourcesContent":["@import '../../../common/smart-snippets/atomic-smart-snippet-feedback-modal/atomic-smart-snippet-feedback-modal.pcss';\n","import {ATOMIC_MODAL_EXPORT_PARTS} from '@/src/components/common/atomic-modal/export-parts';\nimport {\n  SmartSnippetFeebackModalOptions,\n  SmartSnippetFeedbackModalBody,\n  SmartSnippetFeedbackModalDetails,\n  SmartSnippetFeedbackModalFooter,\n  SmartSnippetFeedbackModalHeader,\n  SmartSnippetFeedbackModalOption,\n  smartSnippetFeedbackOptions,\n} from '@/src/components/common/smart-snippets/atomic-smart-snippet-feedback-modal/smart-snippet-feedback-modal-common';\nimport {updateBreakpoints} from '@/src/utils/replace-breakpoint';\nimport {randomID} from '@/src/utils/utils';\nimport {\n  buildSmartSnippet as buildInsightSmartSnippet,\n  SmartSnippet as InsightSmartSnippet,\n  SmartSnippetFeedback as InsightSmartSnippetFeedback,\n  SmartSnippetFeedback,\n} from '@coveo/headless/insight';\nimport {\n  Component,\n  State,\n  Prop,\n  Watch,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n} from '@stencil/core';\nimport {\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {InsightBindings} from '../../atomic-insight-interface/atomic-insight-interface';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-smart-snippet-feedback-modal',\n  styleUrl: 'atomic-insight-smart-snippet-feedback-modal.pcss',\n  shadow: true,\n})\nexport class AtomicInsightSmartSnippetFeedbackModal\n  implements InitializableComponent<InsightBindings>\n{\n  @InitializeBindings() public bindings!: InsightBindings;\n  @Element() public host!: HTMLElement;\n  public smartSnippet!: InsightSmartSnippet;\n\n  @State() public error!: Error;\n\n  @Prop({mutable: true}) source?: HTMLElement;\n  @Prop({reflect: true, mutable: true}) isOpen = false;\n\n  @State() currentAnswer?: InsightSmartSnippetFeedback | 'other' | undefined;\n  private detailsInputRef?: HTMLTextAreaElement;\n  private readonly formId = randomID(\n    'atomic-smart-snippet-feedback-modal-form-'\n  );\n\n  @Event() feedbackSent!: EventEmitter;\n\n  @Watch('isOpen')\n  watchToggleOpen(isOpen: boolean) {\n    if (isOpen) {\n      this.smartSnippet.openFeedbackModal();\n      this.currentAnswer = undefined;\n    }\n  }\n\n  initialize() {\n    this.smartSnippet = buildInsightSmartSnippet(this.bindings.engine);\n  }\n\n  public render() {\n    updateBreakpoints(this.host);\n\n    return (\n      <atomic-modal\n        fullscreen={false}\n        source={this.source}\n        container={this.host}\n        isOpen={this.isOpen}\n        close={() => this.close()}\n        exportparts={ATOMIC_MODAL_EXPORT_PARTS}\n      >\n        <SmartSnippetFeedbackModalHeader i18n={this.bindings.i18n} />\n        <SmartSnippetFeedbackModalBody\n          formId={this.formId}\n          onSubmit={(e: Event) => this.sendFeedback(e)}\n        >\n          <SmartSnippetFeebackModalOptions i18n={this.bindings.i18n}>\n            {smartSnippetFeedbackOptions.map(\n              ({id, localeKey, correspondingAnswer}) => (\n                <SmartSnippetFeedbackModalOption\n                  correspondingAnswer={correspondingAnswer}\n                  currentAnswer={this.currentAnswer}\n                  i18n={this.bindings.i18n}\n                  id={id}\n                  localeKey={localeKey}\n                  onChange={() => {\n                    this.currentAnswer = correspondingAnswer;\n                  }}\n                />\n              )\n            )}\n          </SmartSnippetFeebackModalOptions>\n          <SmartSnippetFeedbackModalDetails\n            currentAnswer={this.currentAnswer}\n            i18n={this.bindings.i18n}\n            setDetailsInputRef={(ref) => (this.detailsInputRef = ref)}\n          />\n        </SmartSnippetFeedbackModalBody>\n        <SmartSnippetFeedbackModalFooter\n          formId={this.formId}\n          i18n={this.bindings.i18n}\n          onClick={() => this.close()}\n        />\n      </atomic-modal>\n    );\n  }\n\n  private close() {\n    this.isOpen = false;\n    this.smartSnippet.closeFeedbackModal();\n  }\n\n  private sendFeedback(e: Event) {\n    e.preventDefault();\n\n    if (this.currentAnswer === 'other') {\n      this.smartSnippet.sendDetailedFeedback(this.detailsInputRef!.value);\n    } else {\n      this.smartSnippet.sendFeedback(\n        this.currentAnswer as SmartSnippetFeedback\n      );\n    }\n    this.feedbackSent.emit();\n    this.isOpen = false;\n  }\n}\n"],"version":3}