{"version":3,"names":["atomicInsightResultAttachToCaseActionCss","AtomicInsightResultAttachToCaseActionStyle0","AtomicInsightResultAttachToCaseAction","initialize","caseId","this","bindings","engine","state","insightCaseContext","attachToCase","buildAttachToCase","options","result","onClick","isAttached","detach","emit","callback","attach","getIcon","DetachIcon","AttachIcon","getTooltip","i18n","t","render","h","IconButton","key","partPrefix","style","icon","title","__decorate","InitializeBindings","ResultContext","BindStateToController"],"sources":["src/components/insight/atomic-insight-result-attach-to-case-action/atomic-insight-result-attach-to-case-action.pcss?tag=atomic-insight-result-attach-to-case-action","src/components/insight/atomic-insight-result-attach-to-case-action/atomic-insight-result-attach-to-case-action.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\n","import {AttachToCase, buildAttachToCase, Result} from '@coveo/headless/insight';\nimport {Component, Event, State, h, Element, EventEmitter} from '@stencil/core';\nimport AttachIcon from '../../../images/attach.svg';\nimport DetachIcon from '../../../images/detach.svg';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {IconButton} from '../../common/iconButton';\nimport {ResultContext} from '../../search/result-template-components/result-template-decorators';\nimport {InsightBindings} from '../atomic-insight-interface/atomic-insight-interface';\n\nexport interface InsightResultAttachToCaseEvent {\n  callback: () => void;\n  result: Result;\n}\n/**\n * @internal\n * The `atomic-insight-result-attach-to-case-action` component can be nested inside a `atomic-insight-result-actions` to render an interactive button that will emit an `atomic/insight/attachToCase/attach` or `atomic/insight/attachToCase/detach` JavaScript event, based on its current state, when clicked.\n *\n * @part result-action-container - The result action container\n * @part result-action-button - The result action button\n * @part result-action-icon - The result action icon\n */\n@Component({\n  tag: 'atomic-insight-result-attach-to-case-action',\n  styleUrl: 'atomic-insight-result-attach-to-case-action.pcss',\n})\nexport class AtomicInsightResultAttachToCaseAction\n  implements InitializableComponent<InsightBindings>\n{\n  @InitializeBindings() public bindings!: InsightBindings;\n  @ResultContext() private result!: Result;\n\n  @Element() host!: HTMLElement;\n  @State() public error!: Error;\n\n  public attachToCase!: AttachToCase;\n\n  @BindStateToController('attachToCase')\n  @State()\n  public attachToCaseState!: {};\n\n  @Event({\n    eventName: 'atomic/insight/attachToCase/attach',\n    composed: true,\n    cancelable: true,\n    bubbles: true,\n  })\n  private attach!: EventEmitter<InsightResultAttachToCaseEvent>;\n\n  @Event({\n    eventName: 'atomic/insight/attachToCase/detach',\n    composed: true,\n    cancelable: true,\n    bubbles: true,\n  })\n  private detach!: EventEmitter<InsightResultAttachToCaseEvent>;\n\n  public initialize() {\n    const caseId: string =\n      this.bindings.engine.state.insightCaseContext?.caseId || '';\n    this.attachToCase = buildAttachToCase(this.bindings.engine, {\n      options: {\n        result: this.result,\n        caseId: caseId,\n      },\n    });\n  }\n\n  private onClick() {\n    if (this.attachToCase.isAttached()) {\n      this.detach.emit({\n        callback: this.attachToCase.detach,\n        result: this.result,\n      });\n    } else {\n      this.attach.emit({\n        callback: this.attachToCase.attach,\n        result: this.result,\n      });\n    }\n  }\n\n  private getIcon() {\n    return this.attachToCase.isAttached() ? DetachIcon : AttachIcon;\n  }\n\n  private getTooltip() {\n    return this.attachToCase.isAttached()\n      ? this.bindings.i18n.t('detach-from-case')\n      : this.bindings.i18n.t('attach-to-case');\n  }\n\n  public render() {\n    return (\n      <IconButton\n        partPrefix=\"result-action\"\n        style=\"outline-neutral\"\n        icon={this.getIcon()}\n        title={this.getTooltip()}\n        onClick={() => this.onClick()}\n      />\n    );\n  }\n}\n"],"mappings":"q4GAAA,MAAMA,EAA2C,k60DACjD,MAAAC,EAAeD,E,iXC4BFE,EAAqC,M,qMA+BzC,UAAAC,GACL,MAAMC,EACJC,KAAKC,SAASC,OAAOC,MAAMC,oBAAoBL,QAAU,GAC3DC,KAAKK,aAAeC,EAAkBN,KAAKC,SAASC,OAAQ,CAC1DK,QAAS,CACPC,OAAQR,KAAKQ,OACbT,OAAQA,I,CAKN,OAAAU,GACN,GAAIT,KAAKK,aAAaK,aAAc,CAClCV,KAAKW,OAAOC,KAAK,CACfC,SAAUb,KAAKK,aAAaM,OAC5BH,OAAQR,KAAKQ,Q,KAEV,CACLR,KAAKc,OAAOF,KAAK,CACfC,SAAUb,KAAKK,aAAaS,OAC5BN,OAAQR,KAAKQ,Q,EAKX,OAAAO,GACN,OAAOf,KAAKK,aAAaK,aAAeM,EAAaC,C,CAG/C,UAAAC,GACN,OAAOlB,KAAKK,aAAaK,aACrBV,KAAKC,SAASkB,KAAKC,EAAE,oBACrBpB,KAAKC,SAASkB,KAAKC,EAAE,iB,CAGpB,MAAAC,GACL,OACEC,EAACC,EAAU,CAAAC,IAAA,2CACTC,WAAW,gBACXC,MAAM,kBACNC,KAAM3B,KAAKe,UACXa,MAAO5B,KAAKkB,aACZT,QAAS,IAAMT,KAAKS,W,6BAtEGoB,EAAA,CAA5BC,K,+BACwBD,EAAA,CAAxBE,K,6BASMF,EAAA,CAFNG,EAAsB,iB","ignoreList":[]}