{"version":3,"names":["createStore","initialState","listeners","Map","state","Proxy","set","target","prop","value","oldValue","has","cb","get","propName","onChange","callback","Set","add","delete","size","createBaseStore","store","getUniqueIDFromEngine","_engine","Error","unsetLoadingFlag","loadingFlag","flags","loadingFlags","filter","setLoadingFlag","concat","isRefineModalFacet","registerFacet","facetType","data","clearExistingFacetElement","facetId","facetElements","facetElement","getAttribute","element","push","getFacetElements","isInDocument","waitUntilAppLoaded","length","createAppLoadedListener","updateIsAppLoaded","isAppLoaded"],"sources":["src/components/common/interface/store.ts"],"sourcesContent":["import {DateFacetValue, NumericFacetValue} from '@coveo/headless';\nimport {isInDocument} from '../../../utils/utils';\nimport {\n  FacetInfo,\n  FacetStore,\n  FacetType,\n  FacetValueFormat,\n} from '../facets/facet-common-store';\nimport {AnyEngineType} from './bindings';\n\nexport function createStore<StoreData extends Record<string, unknown>>(\n  initialState: StoreData\n): CommonStore<StoreData> {\n  const listeners = new Map<\n    keyof StoreData,\n    Set<(newValue: unknown) => void>\n  >();\n\n  const state = new Proxy(initialState, {\n    set(target, prop: string, value) {\n      const oldValue = target[prop];\n      if (oldValue !== value) {\n        (target as Record<string, unknown>)[prop] = value;\n\n        if (listeners.has(prop)) {\n          for (const cb of listeners.get(prop)!) {\n            cb(value);\n          }\n        }\n      }\n      return true;\n    },\n  });\n\n  const get = <PropName extends keyof StoreData>(\n    propName: PropName\n  ): StoreData[PropName] => {\n    return state[propName];\n  };\n\n  const set = <PropName extends keyof StoreData>(\n    propName: PropName,\n    value: StoreData[PropName]\n  ): void => {\n    state[propName] = value;\n  };\n\n  const onChange = <PropName extends keyof StoreData>(\n    propName: PropName,\n    callback: (newValue: StoreData[PropName]) => void\n  ): (() => void) => {\n    if (!listeners.has(propName)) {\n      listeners.set(propName, new Set());\n    }\n    listeners.get(propName)!.add(callback as (newValue: unknown) => void);\n\n    return () => {\n      listeners.get(propName)!.delete(callback as (newValue: unknown) => void);\n      if (listeners.get(propName)!.size === 0) {\n        listeners.delete(propName);\n      }\n    };\n  };\n\n  return {\n    state,\n    get,\n    set,\n    onChange,\n  };\n}\n\nexport interface CommonStore<StoreData> {\n  state: StoreData;\n  get: <PropName extends keyof StoreData>(\n    propName: PropName\n  ) => StoreData[PropName];\n  set: <PropName extends keyof StoreData>(\n    propName: PropName,\n    value: StoreData[PropName]\n  ) => void;\n  onChange: <PropName extends keyof StoreData>(\n    propName: PropName,\n    cb: (newValue: StoreData[PropName]) => void\n  ) => () => void;\n}\n\nexport type BaseStore<T> = CommonStore<T> & {\n  getUniqueIDFromEngine(engine: unknown): string | undefined;\n};\n\nexport function createBaseStore<T extends {}>(initialState: T): BaseStore<T> {\n  const store = createStore(initialState) as CommonStore<T>;\n\n  return {\n    ...store,\n\n    getUniqueIDFromEngine(_engine: AnyEngineType) {\n      throw new Error(\n        'getUniqueIDFromEngine not implemented at the base store level.'\n      );\n    },\n  };\n}\n\nexport interface ResultListInfo {\n  focusOnNextNewResult(): void;\n  focusOnFirstResultAfterNextSearch(): Promise<void>;\n}\n\nexport function unsetLoadingFlag(\n  store: CommonStore<{loadingFlags: string[]}>,\n  loadingFlag: string\n) {\n  const flags = store.state.loadingFlags;\n  store.state.loadingFlags = flags.filter((value) => value !== loadingFlag);\n}\n\nexport function setLoadingFlag(\n  store: CommonStore<{loadingFlags: string[]}>,\n  loadingFlag: string\n) {\n  const flags = store.state.loadingFlags;\n  store.state.loadingFlags = flags.concat(loadingFlag);\n}\n\ninterface Facets {\n  facets: FacetStore<FacetInfo>;\n  numericFacets: FacetStore<FacetInfo & FacetValueFormat<NumericFacetValue>>;\n  dateFacets: FacetStore<FacetInfo & FacetValueFormat<DateFacetValue>>;\n  categoryFacets: FacetStore<FacetInfo>;\n  facetElements: HTMLElement[];\n}\n\nexport const isRefineModalFacet = 'is-refine-modal';\n\nexport function registerFacet<T extends FacetType, U extends string>(\n  store: CommonStore<Facets>,\n  facetType: T,\n  data: Facets[T][U] & {facetId: U; element: HTMLElement}\n) {\n  const clearExistingFacetElement = (facetType: FacetType, facetId: string) => {\n    if (store.state[facetType][facetId]) {\n      store.state.facetElements = store.state.facetElements.filter(\n        (facetElement) => facetElement.getAttribute('facet-id') !== facetId\n      );\n    }\n  };\n\n  if (data.element.getAttribute(isRefineModalFacet) !== null) {\n    return;\n  }\n\n  clearExistingFacetElement(facetType, data.facetId);\n  store.state.facetElements.push(data.element);\n  store.state[facetType][data.facetId] = data;\n}\n\nexport function getFacetElements(store: CommonStore<Facets>) {\n  return store.state.facetElements.filter((element) => isInDocument(element));\n}\n\nexport function waitUntilAppLoaded(\n  store: CommonStore<{loadingFlags: string[]}>,\n  callback: () => void\n) {\n  if (!store.state.loadingFlags.length) {\n    callback();\n  } else {\n    store.onChange('loadingFlags', (flags) => {\n      if (!flags.length) {\n        callback();\n      }\n    });\n  }\n}\n\nexport function createAppLoadedListener(\n  store: CommonStore<{loadingFlags: string[]}>,\n  callback: (isAppLoaded: boolean) => void\n) {\n  const updateIsAppLoaded = () => {\n    const isAppLoaded = store.state.loadingFlags.length === 0;\n    callback(isAppLoaded);\n  };\n\n  store.onChange('loadingFlags', updateIsAppLoaded);\n  updateIsAppLoaded();\n}\n"],"mappings":"6CAUgBA,EACdC,GAEA,MAAMC,EAAY,IAAIC,IAKtB,MAAMC,EAAQ,IAAIC,MAAMJ,EAAc,CACpC,GAAAK,CAAIC,EAAQC,EAAcC,GACxB,MAAMC,EAAWH,EAAOC,GACxB,GAAIE,IAAaD,EAAO,CACrBF,EAAmCC,GAAQC,EAE5C,GAAIP,EAAUS,IAAIH,GAAO,CACvB,IAAK,MAAMI,KAAMV,EAAUW,IAAIL,GAAQ,CACrCI,EAAGH,E,GAIT,OAAO,I,IAIX,MAAMI,EACJC,GAEOV,EAAMU,GAGf,MAAMR,EAAM,CACVQ,EACAL,KAEAL,EAAMU,GAAYL,CAAK,EAGzB,MAAMM,EAAW,CACfD,EACAE,KAEA,IAAKd,EAAUS,IAAIG,GAAW,CAC5BZ,EAAUI,IAAIQ,EAAU,IAAIG,I,CAE9Bf,EAAUW,IAAIC,GAAWI,IAAIF,GAE7B,MAAO,KACLd,EAAUW,IAAIC,GAAWK,OAAOH,GAChC,GAAId,EAAUW,IAAIC,GAAWM,OAAS,EAAG,CACvClB,EAAUiB,OAAOL,E,EAEpB,EAGH,MAAO,CACLV,QACAS,MACAP,MACAS,WAEJ,C,SAqBgBM,EAA8BpB,GAC5C,MAAMqB,EAAQtB,EAAYC,GAE1B,MAAO,IACFqB,EAEH,qBAAAC,CAAsBC,GACpB,MAAM,IAAIC,MACR,iE,EAIR,C,SAOgBC,EACdJ,EACAK,GAEA,MAAMC,EAAQN,EAAMlB,MAAMyB,aAC1BP,EAAMlB,MAAMyB,aAAeD,EAAME,QAAQrB,GAAUA,IAAUkB,GAC/D,C,SAEgBI,EACdT,EACAK,GAEA,MAAMC,EAAQN,EAAMlB,MAAMyB,aAC1BP,EAAMlB,MAAMyB,aAAeD,EAAMI,OAAOL,EAC1C,C,MAUaM,EAAqB,kB,SAElBC,EACdZ,EACAa,EACAC,GAEA,MAAMC,EAA4B,CAACF,EAAsBG,KACvD,GAAIhB,EAAMlB,MAAM+B,GAAWG,GAAU,CACnChB,EAAMlB,MAAMmC,cAAgBjB,EAAMlB,MAAMmC,cAAcT,QACnDU,GAAiBA,EAAaC,aAAa,cAAgBH,G,GAKlE,GAAIF,EAAKM,QAAQD,aAAaR,KAAwB,KAAM,CAC1D,M,CAGFI,EAA0BF,EAAWC,EAAKE,SAC1ChB,EAAMlB,MAAMmC,cAAcI,KAAKP,EAAKM,SACpCpB,EAAMlB,MAAM+B,GAAWC,EAAKE,SAAWF,CACzC,C,SAEgBQ,EAAiBtB,GAC/B,OAAOA,EAAMlB,MAAMmC,cAAcT,QAAQY,GAAYG,EAAaH,IACpE,C,SAEgBI,EACdxB,EACAN,GAEA,IAAKM,EAAMlB,MAAMyB,aAAakB,OAAQ,CACpC/B,G,KACK,CACLM,EAAMP,SAAS,gBAAiBa,IAC9B,IAAKA,EAAMmB,OAAQ,CACjB/B,G,KAIR,C,SAEgBgC,EACd1B,EACAN,GAEA,MAAMiC,EAAoB,KACxB,MAAMC,EAAc5B,EAAMlB,MAAMyB,aAAakB,SAAW,EACxD/B,EAASkC,EAAY,EAGvB5B,EAAMP,SAAS,eAAgBkC,GAC/BA,GACF,Q","ignoreList":[]}