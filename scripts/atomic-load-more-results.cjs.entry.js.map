{"file":"atomic-load-more-results.entry.cjs.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA,MAAM,wBAAwB,GAAG,wq2DAAwq2D,CAAC;AAC1s2D,oCAAe,wBAAwB;;;;;;;;;;;;MCkC1B,qBAAqB;;;QAYf,gBAAW,GAAG,KAAK,CAAC;;;;2BAAN,KAAK;;IAE7B,UAAU;QACf,IAAI,CAAC,YAAY,GAAGA,0BAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC5D,IAAI,CAAC,UAAU,GAAGC,wBAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;YACtD,OAAO,EAAE;gBACP,eAAe,EAAE,EAAE;aACpB;SACF,CAAC,CAAC;QACHC,6BAAuB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,WAAW;YACvD,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;SAChC,CAAC,CAAC;KACJ;IAEO,MAAM,OAAO;QACnB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,EAAE,oBAAoB,EAAE,CAAC;QAC7D,IAAI,CAAC,UAAU,CAAC,gBAAgB,EAAE,CAAC;KACpC;IAEM,MAAM;QACX,MAAM,EAAC,UAAU,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC;QAC7D,MAAM,EAAC,IAAI,EAAC,GAAG,IAAI,CAAC,QAAQ,CAAC;QAE7B,QACEC,QAACC,qBAAa,qDACZ,UAAU,EAAE,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAC7C,QAAQ,EAAE,IAAI,CAAC,WAAW,IAE1BD,QAACE,yBAAiB,uDAChBF,QAACG,uBAAe,qDAAC,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,GAAI,EACnDH,QAACI,2BAAmB,qDAAC,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,GAAI,EAC3CJ,QAACK,sBAAc,qDACb,IAAI,EAAE,IAAI,EACV,aAAa,EAAE,IAAI,CAAC,eAAe,CAAC,oBAAoB,EACxD,OAAO,EAAE,MAAM,IAAI,CAAC,OAAO,EAAE,GAC7B,CACgB,CACN,EAChB;KACH;;AAlD4B;IAA5BC,sCAAkB,EAAE;uDAA4B;AAMzC;IAFPC,yCAAqB,CAAC,cAAc,CAAC;gEAEQ;AAGtC;IAFPA,yCAAqB,CAAC,YAAY,CAAC;8DAEM;;;;;","names":["buildQuerySummary","buildResultList","createAppLoadedListener","h","LoadMoreGuard","LoadMoreContainer","LoadMoreSummary","LoadMoreProgressBar","LoadMoreButton","InitializeBindings","BindStateToController"],"sources":["src/components/search/atomic-load-more-results/atomic-load-more-results.pcss?tag=atomic-load-more-results&encapsulation=shadow","src/components/search/atomic-load-more-results/atomic-load-more-results.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\n\n/**\n * @prop --atomic-more-results-progress-bar-color-from: Color of the start of the gradient for the load more results progress bar.\n * @prop --atomic-more-results-progress-bar-color-to: Color of the end of the gradient for the load more results progress bar.\n */\n.progress-bar {\n  @apply from-more-results-progress-bar-color-from;\n  @apply to-more-results-progress-bar-color-to;\n}\n","import {\n  QuerySummary,\n  QuerySummaryState,\n  buildQuerySummary,\n  ResultList,\n  ResultListState,\n  buildResultList,\n} from '@coveo/headless';\nimport {Component, h, State} from '@stencil/core';\nimport {\n  BindStateToController,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {createAppLoadedListener} from '../../common/interface/store';\nimport {LoadMoreContainer} from '../../common/load-more/container';\nimport {LoadMoreGuard} from '../../common/load-more/guard';\nimport {LoadMoreProgressBar} from '../../common/load-more/progress-bar';\nimport {LoadMoreButton} from '../../common/load-more/stencil-button';\nimport {LoadMoreSummary} from '../../common/load-more/summary';\nimport {Bindings} from '../atomic-search-interface/atomic-search-interface';\n\n/**\n * The `atomic-load-more-results` component allows the user to load additional results if more are available.\n *\n * @part container - The container of the component.\n * @part showing-results - The summary displaying which results are shown and how many are available.\n * @part highlight - The highlighted number of results displayed and number of results available.\n * @part progress-bar - The progress bar displaying a percentage of results shown over the total number of results available.\n * @part load-more-results-button - The \"Load more results\" button.\n */\n@Component({\n  tag: 'atomic-load-more-results',\n  styleUrl: 'atomic-load-more-results.pcss',\n  shadow: true,\n})\nexport class AtomicLoadMoreResults {\n  @InitializeBindings() public bindings!: Bindings;\n  public querySummary!: QuerySummary;\n  public resultList!: ResultList;\n\n  @BindStateToController('querySummary')\n  @State()\n  private querySummaryState!: QuerySummaryState;\n  @BindStateToController('resultList')\n  @State()\n  private resultListState!: ResultListState;\n  @State() public error!: Error;\n  @State() private isAppLoaded = false;\n\n  public initialize() {\n    this.querySummary = buildQuerySummary(this.bindings.engine);\n    this.resultList = buildResultList(this.bindings.engine, {\n      options: {\n        fieldsToInclude: [],\n      },\n    });\n    createAppLoadedListener(this.bindings.store, (isAppLoaded) => {\n      this.isAppLoaded = isAppLoaded;\n    });\n  }\n\n  private async onClick() {\n    this.bindings.store.state.resultList?.focusOnNextNewResult();\n    this.resultList.fetchMoreResults();\n  }\n\n  public render() {\n    const {lastResult: from, total: to} = this.querySummaryState;\n    const {i18n} = this.bindings;\n\n    return (\n      <LoadMoreGuard\n        hasResults={this.querySummaryState.hasResults}\n        isLoaded={this.isAppLoaded}\n      >\n        <LoadMoreContainer>\n          <LoadMoreSummary from={from} to={to} i18n={i18n} />\n          <LoadMoreProgressBar from={from} to={to} />\n          <LoadMoreButton\n            i18n={i18n}\n            moreAvailable={this.resultListState.moreResultsAvailable}\n            onClick={() => this.onClick()}\n          />\n        </LoadMoreContainer>\n      </LoadMoreGuard>\n    );\n  }\n}\n"],"version":3}