{"file":"atomic-insight-result.entry.js","mappings":";;;;;;;;;;;;AAAA,MAAM,sBAAsB,GAAG,u/ncAAu/nc,CAAC;AACvhoc,kCAAe,sBAAsB;;MC0BxB,mBAAmB;;;;;;QAkCtB,YAAO,GAAuB,QAAQ,CAAC;;;;;;QAOvC,cAAS,GAAyB,MAAM,CAAC;;;;QAKzC,YAAO,GAAG,EAAE,CAAC;;;;;;uBAZiB,QAAQ;yBAOJ,MAAM;uBAK9B,EAAE;;;IAQb,aAAa,CAClB,KAA4D;QAE5D,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,KAAK,CAAC,eAAe,EAAE,CAAC;QACxB,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KAC3B;IAGM,wBAAwB,CAAC,KAAkC;QAChE,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,KAAK,CAAC,eAAe,EAAE,CAAC;QACxB,IAAI,IAAI,CAAC,iBAAiB,EAAE;YAC1B,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;SACtC;KACF;IAGM,sBAAsB,CAAC,KAAkB;QAC9C,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;KACpC;IAGM,0BAA0B,CAAC,KAAsC;QACtE,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,KAAK,CAAC,eAAe,EAAE,CAAC;QACxB,KAAK,CAAC,MAAM,CAAC;YACX,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,SAAS,EAAE,IAAI,CAAC,SAAU;SAC3B,CAAC,CAAC;KACJ;IAEM,iBAAiB;QACtB,IAAI,CAAC,MAAM,GAAG,IAAI,UAAU,CAC1B,IAAI,CAAC,OAAQ,CAAC,QAAQ,EACtB,MAAM,EACN,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,SAAS,CACf,CAAC;KACH;IAEO,cAAc;QACpB,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAQ,CAAC,QAAQ,CAAC;aACtC,GAAG,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,SAAS,CAAC;aAC/B,IAAI,CAAC,EAAE,CAAC,CAAC;KACb;IAEM,MAAM;QACX,QACE,EAAC,IAAI,qDAAC,KAAK,EAAE,oBAAoB,IAE/B,4DACE,KAAK,EAAE,eAAe,IAAI,CAAC,MAAM;iBAC9B,UAAU,EAAE;iBACZ,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;iBACpB,IAAI,CAAC,GAAG,CAAC,EAAE,EACd,SAAS,EAAE,IAAI,CAAC,cAAc,EAAE,GAC3B,CACF,EACP;KACH;IAEM,gBAAgB;QACrB,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,KAAK,EAAE;YAClC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAC/C;KACF;;;;;;;","names":[],"sources":["src/components/insight/atomic-insight-result/atomic-insight-result.pcss?tag=atomic-insight-result&encapsulation=shadow","src/components/insight/atomic-insight-result/atomic-insight-result.tsx"],"sourcesContent":["@import '../../common/template-system/template-system.pcss';\n\n:host {\n  @apply atomic-template-system;\n  @apply relative;\n\n  .with-sections:not(.child-result) {\n    padding-top: var(--atomic-layout-spacing-y);\n    padding-bottom: var(--atomic-layout-spacing-y);\n    padding-right: var(--atomic-layout-spacing-x);\n    padding-left: var(--atomic-layout-spacing-x);\n  }\n}\n\n:host(:hover) {\n  .with-sections {\n    @apply bg-neutral-lighter;\n  }\n  atomic-insight-result-action-bar {\n    @apply visible;\n  }\n}\n\n:host(:first-of-type) {\n  .with-sections:not(.child-result) {\n    @apply pt-8;\n  }\n  atomic-insight-result-action-bar {\n    @apply top-0;\n  }\n}\n","import {\n  Result as InsightResult,\n  InteractiveResult as InsightInteractiveResult,\n  FoldedResult as InsightFoldedResult,\n} from '@coveo/headless/insight';\nimport {Component, h, Prop, Element, Listen, Host} from '@stencil/core';\nimport {\n  DisplayConfig,\n  InteractiveItemContextEvent,\n  ItemContextEvent,\n} from '../../common/item-list/item-decorators';\nimport {resultComponentClass} from '../../common/item-list/stencil-item-list-common';\nimport {\n  ItemLayout,\n  ItemDisplayDensity,\n  ItemDisplayImageSize,\n} from '../../common/layout/display-options';\nimport {InsightStore} from '../atomic-insight-interface/store';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-result',\n  styleUrl: 'atomic-insight-result.pcss',\n  shadow: true,\n})\nexport class AtomicInsightResult {\n  private layout!: ItemLayout;\n  @Element() host!: HTMLElement;\n\n  /**\n   * Whether an atomic-result-link inside atomic-insight-result should stop click event propagation.\n   */\n  @Prop() stopPropagation?: boolean;\n\n  /**\n   * The result item.\n   */\n  @Prop() result!: InsightResult | InsightFoldedResult;\n\n  /**\n   * The InteractiveResult item.\n   * @internal\n   */\n  @Prop() interactiveResult!: InsightInteractiveResult;\n\n  /**\n   * Global Atomic state.\n   * @internal\n   */\n  @Prop() store?: InsightStore;\n\n  /**\n   * The result content to display.\n   */\n  @Prop() content?: ParentNode;\n\n  /**\n   * How large or small results should be.\n   */\n  @Prop() density: ItemDisplayDensity = 'normal';\n\n  /**\n   * The size of the visual section in result list items.\n   *\n   * This is overwritten by the image size defined in the result content, if it exists.\n   */\n  @Prop() imageSize: ItemDisplayImageSize = 'icon';\n\n  /**\n   * The classes to add to the result element.\n   */\n  @Prop() classes = '';\n\n  /**\n   * @internal\n   */\n  @Prop() loadingFlag?: string;\n\n  @Listen('atomic/resolveResult')\n  public resolveResult(\n    event: ItemContextEvent<InsightFoldedResult | InsightResult>\n  ) {\n    event.preventDefault();\n    event.stopPropagation();\n    event.detail(this.result);\n  }\n\n  @Listen('atomic/resolveInteractiveResult')\n  public resolveInteractiveResult(event: InteractiveItemContextEvent) {\n    event.preventDefault();\n    event.stopPropagation();\n    if (this.interactiveResult) {\n      event.detail(this.interactiveResult);\n    }\n  }\n\n  @Listen('atomic/resolveStopPropagation')\n  public resolveStopPropagation(event: CustomEvent) {\n    event.detail(this.stopPropagation);\n  }\n\n  @Listen('atomic/resolveResultDisplayConfig')\n  public resolveResultDisplayConfig(event: ItemContextEvent<DisplayConfig>) {\n    event.preventDefault();\n    event.stopPropagation();\n    event.detail({\n      density: this.density,\n      imageSize: this.imageSize!,\n    });\n  }\n\n  public connectedCallback() {\n    this.layout = new ItemLayout(\n      this.content!.children,\n      'list',\n      this.density,\n      this.imageSize\n    );\n  }\n\n  private getContentHTML() {\n    return Array.from(this.content!.children)\n      .map((child) => child.outerHTML)\n      .join('');\n  }\n\n  public render() {\n    return (\n      <Host class={resultComponentClass}>\n        {/* deepcode ignore ReactSetInnerHtml: This is not React code */}\n        <div\n          class={`result-root ${this.layout\n            .getClasses()\n            .concat(this.classes)\n            .join(' ')}`}\n          innerHTML={this.getContentHTML()}\n        ></div>\n      </Host>\n    );\n  }\n\n  public componentDidLoad() {\n    if (this.loadingFlag && this.store) {\n      this.store.unsetLoadingFlag(this.loadingFlag);\n    }\n  }\n}\n"],"version":3}