{"version":3,"names":["atomicRefineModalCss","AtomicRefineModalStyle0","AtomicRefineModal","this","isOpen","collapseFacetsAfter","watchEnabled","host","querySelector","append","createFacetSlot","initialize","breadcrumbManager","buildBreadcrumbManager","bindings","engine","sort","buildSort","querySummary","buildQuerySummary","searchStatus","buildSearchStatus","facetManager","buildFacetManager","tabManager","buildTabManager","divSlot","document","createElement","setAttribute","addFacetColumnStyling","facets","store","getFacetElements","boundInterfaces","getBoundInterfaces","sortByDocumentPosition","facetsSection","horizontalFacetsSection","boundInterface","facetSection","findSection","push","horizontalFacetSection","triagedFacets","triageFacetsByParents","triagedFacet","values","sortedFacets","i","length","get","visibleFacets","invisibleFacets","sortFacetVisibility","getAllFacets","visibleFacetsClone","cloneFacets","invisibleFacetsClone","generator","makeAutomaticFacetGenerator","updateCollapseFacetsDependingOnFacetsVisibility","mainInterface","closest","Error","boundExternalInterfaces","Array","from","querySelectorAll","filter","atomicExternal","map","facet","classList","remove","popoverClass","isRefineModalFacet","clone","cloneNode","isCollapsed","state","automaticFacetSet","desiredCount","el","style","display","flexDirection","gap","options","sortOptions","select","e","composedPath","option","find","expression","value","sortBy","criteria","buildOption","label","tabs","shouldDisplayOnCurrentTab","included","excluded","tabManagerState","activeTab","h","selected","isSortedBy","i18n","t","renderSort","RefineModalSortSection","onSelect","renderFilters","hasFacetElements","hasAutomaticFacets","set","undefined","RefineModalFiltersSection","withFacets","withAutomaticFacets","breadcrumbManagerState","hasBreadcrumbs","RefineModalFiltersClearButton","onClick","deselectAll","render","RefineModal","key","onClose","title","numberOfItems","querySummaryState","total","openButton","RefineModalBody","componentDidLoad","__decorate","InitializeBindings","BindStateToController"],"sources":["src/components/search/atomic-refine-modal/atomic-refine-modal.pcss?tag=atomic-refine-modal&encapsulation=shadow","src/components/search/atomic-refine-modal/atomic-refine-modal.tsx"],"sourcesContent":["@import '../../common/refine-modal/refine-modal-common.pcss';\n\n:host {\n  position: absolute;\n}\n\n/**\n * @prop --atomic-refine-modal-facet-margin: The spacing between the modal's facets.\n */\nselect:hover + div,\nselect:focus-visible + div {\n  @apply text-primary-light;\n}\n","import {\n  BreadcrumbManager,\n  buildBreadcrumbManager,\n  BreadcrumbManagerState,\n  QuerySummary,\n  QuerySummaryState,\n  FacetManagerState,\n  Sort,\n  buildSort,\n  SortState,\n  buildQuerySummary,\n  buildSearchStatus,\n  SearchStatus,\n  FacetManager,\n  buildFacetManager,\n  TabManager,\n  TabManagerState,\n  buildTabManager,\n} from '@coveo/headless';\nimport {Component, h, State, Prop, Element, Watch} from '@stencil/core';\nimport {\n  AtomicInterface,\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {shouldDisplayOnCurrentTab} from '../../../utils/tab-utils';\nimport {sortByDocumentPosition} from '../../../utils/utils';\nimport {findSection} from '../../common/atomic-layout-section/sections';\nimport {popoverClass} from '../../common/facets/popover/popover-type';\nimport {\n  BaseFacetElement,\n  sortFacetVisibility,\n  triageFacetsByParents,\n  collapseFacetsAfter,\n} from '../../common/facets/stencil-facet-common';\nimport {isRefineModalFacet} from '../../common/interface/store';\nimport {RefineModalBody} from '../../common/refine-modal/body';\nimport {\n  RefineModalFiltersClearButton,\n  RefineModalFiltersSection,\n} from '../../common/refine-modal/filters';\nimport {RefineModal} from '../../common/refine-modal/modal';\nimport {RefineModalSortSection} from '../../common/refine-modal/sort';\nimport {Bindings} from '../atomic-search-interface/atomic-search-interface';\nimport {SortDropdownOption} from '../atomic-search-interface/store';\n\n/**\n * The `atomic-refine-modal` is automatically created as a child of the `atomic-search-interface` when the `atomic-refine-toggle` is initialized.\n *\n * When the modal is opened, the class `atomic-modal-opened` is added to the interface element and the body, allowing further customization.\n *\n * @part container - The modal's outermost container.\n * @part header-wrapper - The wrapper around the header.\n * @part header - The header of the modal, containing the title.\n * @part title - The title of the modal.\n * @part close-button - The button in the header that closes the modal.\n * @part close-icon - The icon of the close button.\n * @part header-ruler - The horizontal ruler underneath the header.\n * @part body-wrapper - The wrapper around the body.\n * @part body - The body of the modal, between the header and the footer.\n * @part content - The wrapper around the content inside the body of the modal.\n * @part section-title - The title for each section.\n * @part section-sort-title - The title for the sort section.\n * @part section-filters-title - The title for the filters section.\n * @part select-wrapper - The wrapper around the select element, used to position the icon.\n * @part select - The `<select>` element of the dropdown list.\n * @part select-icon-wrapper - The wrapper around the sort icon that's used to align it.\n * @part select-icon - The select dropdown's sort icon.\n * @part filter-section - The section containing facets and the \"filters\" title.\n * @part filter-clear-all - The button that resets all actively selected facet values.\n * @part footer-wrapper - The wrapper with a shadow or background color around the footer.\n * @part footer - The footer of the modal.\n * @part footer-content - The wrapper around the content inside the footer of the modal, containing the button to view results.\n * @part footer-button - The button in the footer that closes the modal.\n * @part footer-button-text - The text inside the button in the footer that closes the modal.\n * @part footer-button-count - The count inside the button in the footer that closes the modal.\n */\n@Component({\n  tag: 'atomic-refine-modal',\n  styleUrl: 'atomic-refine-modal.pcss',\n  shadow: true,\n})\nexport class AtomicRefineModal implements InitializableComponent {\n  private sort!: Sort;\n  private breadcrumbManager!: BreadcrumbManager;\n  public querySummary!: QuerySummary;\n  public searchStatus!: SearchStatus;\n  public facetManager!: FacetManager;\n  @InitializeBindings() public bindings!: Bindings;\n  @Element() public host!: HTMLElement;\n\n  @BindStateToController('querySummary')\n  @State()\n  public querySummaryState!: QuerySummaryState;\n  @BindStateToController('breadcrumbManager')\n  @State()\n  private breadcrumbManagerState!: BreadcrumbManagerState;\n  @BindStateToController('facetManager')\n  @State()\n  public facetManagerState!: FacetManagerState;\n  @State() @BindStateToController('sort') public sortState!: SortState;\n  public tabManager!: TabManager;\n  @BindStateToController('tabManager')\n  @State()\n  public tabManagerState!: TabManagerState;\n  @State() public error!: Error;\n\n  @Prop({mutable: true}) openButton?: HTMLElement;\n\n  @Prop({reflect: true, mutable: true}) isOpen = false;\n\n  /**\n   * The number of expanded facets inside the refine modal.\n   * Remaining facets are automatically collapsed.\n   *\n   * Using the value `0` collapses all facets.\n   */\n  @Prop({reflect: true}) public collapseFacetsAfter = 0;\n\n  @Watch('isOpen')\n  watchEnabled(isOpen: boolean) {\n    if (isOpen) {\n      if (this.host.querySelector('div[slot=\"facets\"]')) {\n        return;\n      }\n\n      this.host.append(this.createFacetSlot());\n    }\n  }\n\n  public initialize() {\n    this.breadcrumbManager = buildBreadcrumbManager(this.bindings.engine);\n    this.sort = buildSort(this.bindings.engine);\n    this.querySummary = buildQuerySummary(this.bindings.engine);\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\n    this.facetManager = buildFacetManager(this.bindings.engine);\n    this.tabManager = buildTabManager(this.bindings.engine);\n    this.watchEnabled(this.isOpen);\n  }\n\n  private createFacetSlot(): HTMLDivElement {\n    const divSlot = document.createElement('div');\n    divSlot.setAttribute('slot', 'facets');\n    this.addFacetColumnStyling(divSlot);\n\n    const facets = this.bindings.store.getFacetElements() as BaseFacetElement[];\n    const boundInterfaces = this.getBoundInterfaces().sort(\n      sortByDocumentPosition\n    );\n    const facetsSection = [];\n    const horizontalFacetsSection = [];\n    for (const boundInterface of boundInterfaces) {\n      const facetSection = findSection(boundInterface, 'facets');\n      if (facetSection) {\n        facetsSection.push(facetSection);\n      }\n      const horizontalFacetSection = findSection(\n        boundInterface,\n        'horizontal-facets'\n      );\n      if (horizontalFacetSection) {\n        horizontalFacetsSection.push(horizontalFacetSection);\n      }\n    }\n    const triagedFacets = triageFacetsByParents(\n      facets,\n      ...horizontalFacetsSection,\n      ...facetsSection\n    );\n    for (const triagedFacet of triagedFacets.values()) {\n      triagedFacet.sort(sortByDocumentPosition);\n    }\n\n    const sortedFacets = [];\n    for (let i = 0; i < boundInterfaces.length; i++) {\n      sortedFacets.push(...(triagedFacets.get(facetsSection[i]) || []));\n      sortedFacets.push(\n        ...(triagedFacets.get(horizontalFacetsSection[i]) || [])\n      );\n    }\n    sortedFacets.push(...(triagedFacets.get(null) || []));\n\n    const {visibleFacets, invisibleFacets} = sortFacetVisibility(\n      sortedFacets,\n      this.bindings.store.getAllFacets()\n    );\n\n    const visibleFacetsClone = this.cloneFacets(visibleFacets);\n    const invisibleFacetsClone = this.cloneFacets(invisibleFacets);\n\n    collapseFacetsAfter(visibleFacetsClone, this.collapseFacetsAfter);\n\n    divSlot.append(...visibleFacetsClone);\n    divSlot.append(...invisibleFacetsClone);\n\n    const generator = this.makeAutomaticFacetGenerator();\n    if (generator) {\n      generator.updateCollapseFacetsDependingOnFacetsVisibility(\n        this.collapseFacetsAfter,\n        visibleFacets.length\n      );\n      divSlot.append(generator);\n    }\n\n    return divSlot;\n  }\n\n  private getBoundInterfaces(): AtomicInterface[] {\n    const mainInterface: AtomicInterface | null =\n      this.host.closest('atomic-search-interface') ??\n      this.host.closest('atomic-external')?.boundInterface ??\n      null;\n    if (!mainInterface) {\n      throw new Error('Cannot find bound interface');\n    }\n    const boundExternalInterfaces = Array.from(\n      document.querySelectorAll('atomic-external')\n    ).filter(\n      (atomicExternal) => atomicExternal.boundInterface === mainInterface\n    );\n    return [...boundExternalInterfaces, mainInterface];\n  }\n\n  private cloneFacets(facets: BaseFacetElement[]): BaseFacetElement[] {\n    return facets.map((facet, i) => {\n      facet.classList.remove(popoverClass);\n      facet.setAttribute(isRefineModalFacet, '');\n      const clone = facet.cloneNode(true) as BaseFacetElement;\n      clone.isCollapsed =\n        this.collapseFacetsAfter === -1\n          ? false\n          : i + 1 > this.collapseFacetsAfter;\n      return clone;\n    });\n  }\n\n  private makeAutomaticFacetGenerator() {\n    if (!this.bindings.engine.state.automaticFacetSet?.desiredCount) {\n      return;\n    }\n    const generator = document.createElement(\n      'atomic-automatic-facet-generator'\n    );\n\n    generator.setAttribute(\n      'desired-count',\n      `${this.bindings.engine.state.automaticFacetSet?.desiredCount}`\n    );\n    this.addFacetColumnStyling(generator);\n\n    return generator;\n  }\n\n  private addFacetColumnStyling(el: HTMLElement) {\n    el.style.display = 'flex';\n    el.style.flexDirection = 'column';\n    el.style.gap = 'var(--atomic-refine-modal-facet-margin, 20px)';\n  }\n\n  private get options() {\n    return this.bindings.store.state.sortOptions;\n  }\n\n  private select(e: Event) {\n    const select = e.composedPath()[0] as HTMLSelectElement;\n    const option = this.options.find(\n      (option) => option.expression === select.value\n    );\n    option && this.sort.sortBy(option.criteria);\n  }\n\n  private buildOption({expression, criteria, label, tabs}: SortDropdownOption) {\n    if (\n      !shouldDisplayOnCurrentTab(\n        [...tabs.included],\n        [...tabs.excluded],\n        this.tabManagerState?.activeTab\n      )\n    ) {\n      return;\n    }\n    return (\n      <option value={expression} selected={this.sort.isSortedBy(criteria)}>\n        {this.bindings.i18n.t(label)}\n      </option>\n    );\n  }\n\n  private renderSort() {\n    if (!this.options.length) {\n      return;\n    }\n\n    return (\n      <RefineModalSortSection\n        i18n={this.bindings.i18n}\n        onSelect={(option) => this.select(option)}\n      >\n        {this.options.map((option) => this.buildOption(option))}\n      </RefineModalSortSection>\n    );\n  }\n\n  private renderFilters() {\n    const hasFacetElements = this.bindings.store.getFacetElements().length > 0;\n    const hasAutomaticFacets =\n      this.bindings.engine.state.automaticFacetSet?.set !== undefined;\n\n    if (!hasFacetElements && !hasAutomaticFacets) {\n      return;\n    }\n\n    const {i18n} = this.bindings;\n\n    return (\n      <RefineModalFiltersSection\n        i18n={i18n}\n        withFacets={hasFacetElements}\n        withAutomaticFacets={hasAutomaticFacets}\n      >\n        {this.breadcrumbManagerState.hasBreadcrumbs && (\n          <RefineModalFiltersClearButton\n            i18n={i18n}\n            onClick={() => this.breadcrumbManager.deselectAll()}\n          />\n        )}\n      </RefineModalFiltersSection>\n    );\n  }\n\n  public render() {\n    return (\n      <RefineModal\n        i18n={this.bindings.i18n}\n        host={this.host}\n        isOpen={this.isOpen}\n        onClose={() => (this.isOpen = false)}\n        title={this.bindings.i18n.t('sort-and-filter')}\n        numberOfItems={this.querySummaryState.total}\n        openButton={this.openButton}\n      >\n        <RefineModalBody>\n          {this.renderSort()}\n          {this.renderFilters()}\n        </RefineModalBody>\n      </RefineModal>\n    );\n  }\n\n  public componentDidLoad() {\n    this.host.style.display = '';\n  }\n}\n"],"mappings":"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","ignoreList":[]}