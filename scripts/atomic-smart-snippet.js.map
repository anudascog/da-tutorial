{"file":"atomic-smart-snippet.js","mappings":"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","names":["AtomicSmartSnippet"],"sources":["src/components/search/smart-snippets/atomic-smart-snippet/atomic-smart-snippet.pcss?tag=atomic-smart-snippet&encapsulation=shadow","src/components/search/smart-snippets/atomic-smart-snippet/atomic-smart-snippet.tsx"],"sourcesContent":["@import '../../../common/smart-snippets/atomic-smart-snippet/atomic-smart-snippet.pcss';\n","import {SmartSnippetFeedbackBanner} from '@/src/components/common/smart-snippets/atomic-smart-snippet-feedback-banner';\nimport {\n  SmartSnippetTruncatedAnswer,\n  SmartSnippetWrapper,\n  SmartSnippetFooter,\n  SmartSnippetQuestion,\n} from '@/src/components/common/smart-snippets/atomic-smart-snippet/smart-snippet-common';\nimport {randomID} from '@/src/utils/utils';\nimport {\n  buildSmartSnippet,\n  buildTabManager,\n  InlineLink,\n  SmartSnippet,\n  SmartSnippetState,\n  TabManager,\n  TabManagerState,\n} from '@coveo/headless';\nimport {Component, Prop, State, Element, Listen, h} from '@stencil/core';\nimport {\n  InitializableComponent,\n  InitializeBindings,\n  BindStateToController,\n} from '../../../../utils/initialization-utils';\nimport {ArrayProp} from '../../../../utils/props-utils';\nimport {shouldDisplayOnCurrentTab} from '../../../../utils/tab-utils';\nimport {getAttributesFromLinkSlot} from '../../../common/item-link/attributes-slot';\nimport {Hidden} from '../../../common/stencil-hidden';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\n\n/**\n * The `atomic-smart-snippet` component displays the excerpt of a document that would be most likely to answer a particular query.\n *\n * You can style the snippet by inserting a template element as follows:\n * ```html\n * <atomic-smart-snippet>\n *   <template>\n *     <style>\n *       b {\n *         color: blue;\n *       }\n *     </style>\n *   </template>\n * </atomic-smart-snippet>\n * ```\n *\n * @slot source-anchor-attributes - Lets you pass [attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attributes) down to anchor elements, overriding other attributes.\n * To be used exclusively in anchor elements, such as: `<a slot=\"source-anchor-attributes\" target=\"_blank\"></a>`.\n *\n * @part smart-snippet - The wrapper of the entire smart snippet.\n * @part question - The header displaying the question that is answered by the found document excerpt.\n * @part answer - The container displaying the full document excerpt.\n * @part truncated-answer - The container displaying only part of the answer.\n * @part show-more-button - The show more button.\n * @part show-less-button - The show less button.\n * @part body - The body of the smart snippet, containing the truncated answer and the show more or show less button.\n * @part footer - The footer underneath the answer.\n * @part source-url - The URL to the document the excerpt is from.\n * @part source-title - The title of the document the excerpt is from.\n * @part feedback-banner - The feedback banner underneath the source.\n * @part feedback-inquiry-and-buttons - A wrapper around the feedback inquiry and the feedback buttons.\n * @part feedback-inquiry - The message asking the end user to provide feedback on whether the excerpt was useful.\n * @part feedback-buttons - The wrapper around the buttons after the inquiry.\n * @part feedback-like-button - The button allowing the end user to signal that the excerpt was useful.\n * @part feedback-dislike-button - The button allowing the end user to signal that the excerpt wasn't useful.\n * @part feedback-thank-you-container - The wrapper around the 'thank you' message and feedback button.\n * @part feedback-thank-you - The message thanking the end user for providing feedback.\n * @part feedback-explain-why-button - The button a user can press to provide detailed feedback.\n */\n@Component({\n  tag: 'atomic-smart-snippet',\n  styleUrl: 'atomic-smart-snippet.pcss',\n  shadow: true,\n})\nexport class AtomicSmartSnippet implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  public smartSnippet!: SmartSnippet;\n  @BindStateToController('smartSnippet')\n  @State()\n  public smartSnippetState!: SmartSnippetState;\n  public tabManager!: TabManager;\n  @BindStateToController('tabManager')\n  @State()\n  public tabManagerState!: TabManagerState;\n  public error!: Error;\n\n  @Element() private host!: HTMLElement;\n  private id!: string;\n\n  connectedCallback(): void {\n    this.id ||= randomID();\n  }\n\n  private modalRef?: HTMLAtomicSmartSnippetFeedbackModalElement;\n\n  /**\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the question at the top of the snippet, from 1 to 5.\n   */\n  @Prop({reflect: true}) public headingLevel = 0;\n\n  /**\n   * The maximum height (in pixels) a snippet can have before the component truncates it and displays a \"show more\" button.\n   */\n  @Prop({reflect: true}) maximumHeight = 250;\n  /**\n   * When the answer is partly hidden, how much of its height (in pixels) should be visible.\n   */\n  @Prop({reflect: true}) collapsedHeight = 180;\n\n  /**\n   * Sets the style of the snippet.\n   *\n   * Example:\n   * ```ts\n   * smartSnippet.snippetStyle = `\n   *   b {\n   *     color: blue;\n   *   }\n   * `;\n   * ```\n   */\n  @Prop({reflect: true}) snippetStyle?: string;\n\n  /**\n   * The tabs on which the smart snippet can be displayed. This property should not be used at the same time as `tabs-excluded`.\n   *\n   * Set this property as a stringified JSON array, e.g.,\n   * ```html\n   *  <atomic-smart-snippet tabs-included='[\"tabIDA\", \"tabIDB\"]'></atomic-smart-snippet snippet>\n   * ```\n   * If you don't set this property, the smart snippet can be displayed on any tab. Otherwise, the smart snippet can only be displayed on the specified tabs.\n   */\n  @ArrayProp()\n  @Prop({reflect: true, mutable: true})\n  public tabsIncluded: string[] | string = '[]';\n\n  /**\n   * The tabs on which this smart snippet must not be displayed. This property should not be used at the same time as `tabs-included`.\n   *\n   * Set this property as a stringified JSON array, e.g.,\n   * ```html\n   *  <atomic-smart-snippet tabs-excluded='[\"tabIDA\", \"tabIDB\"]'></atomic-smart-snippet>\n   * ```\n   * If you don't set this property, the smart snippet can be displayed on any tab. Otherwise, the smart snippet won't be displayed on any of the specified tabs.\n   */\n  @ArrayProp()\n  @Prop({reflect: true, mutable: true})\n  public tabsExcluded: string[] | string = '[]';\n\n  @State() feedbackSent = false;\n\n  @Prop({reflect: true}) public snippetMaximumHeight?: number;\n\n  @Prop({reflect: true}) public snippetCollapsedHeight?: number;\n\n  @Listen('selectInlineLink')\n  onSelectInlineLink(event: CustomEvent<InlineLink>) {\n    this.smartSnippet.selectInlineLink(event.detail);\n  }\n\n  @Listen('beginDelayedSelectInlineLink')\n  onBeginDelayedSelectInlineLink(event: CustomEvent<InlineLink>) {\n    this.smartSnippet.beginDelayedSelectInlineLink(event.detail);\n  }\n\n  @Listen('cancelPendingSelectInlineLink')\n  onCancelPendingSelectInlineLink(event: CustomEvent<InlineLink>) {\n    this.smartSnippet.cancelPendingSelectInlineLink(event.detail);\n  }\n\n  public initialize() {\n    this.smartSnippet = buildSmartSnippet(this.bindings.engine);\n    this.tabManager = buildTabManager(this.bindings.engine);\n  }\n\n  public componentWillUpdate() {\n    if (!(this.smartSnippetState.liked || this.smartSnippetState.disliked)) {\n      this.setFeedbackSent(false);\n    }\n  }\n\n  public render() {\n    if (\n      !shouldDisplayOnCurrentTab(\n        [...this.tabsIncluded],\n        [...this.tabsExcluded],\n        this.tabManagerState?.activeTab\n      )\n    ) {\n      return <Hidden></Hidden>;\n    }\n\n    if (!this.smartSnippetState.answerFound) {\n      return <Hidden></Hidden>;\n    }\n\n    const source = this.smartSnippetState.source;\n\n    return (\n      <SmartSnippetWrapper\n        headingLevel={this.headingLevel}\n        i18n={this.bindings.i18n}\n      >\n        <atomic-smart-snippet-collapse-wrapper\n          collapsedHeight={this.snippetCollapsedHeight}\n          maximumHeight={this.snippetMaximumHeight}\n        >\n          <SmartSnippetQuestion\n            headingLevel={this.headingLevel}\n            question={this.smartSnippetState.question}\n          />\n          {this.snippetMaximumHeight !== undefined ? (\n            <SmartSnippetTruncatedAnswer\n              answer={this.smartSnippetState.answer}\n              style={this.style}\n            />\n          ) : (\n            <atomic-smart-snippet-expandable-answer\n              collapsedHeight={this.collapsedHeight}\n              expanded={this.smartSnippetState.expanded}\n              exportparts=\"answer,show-more-button,show-less-button,truncated-answer\"\n              htmlContent={this.smartSnippetState.answer}\n              maximumHeight={this.maximumHeight}\n              onCollapse={() => this.smartSnippet.collapse()}\n              onExpand={() => this.smartSnippet.expand()}\n              part=\"body\"\n              snippetStyle={this.style}\n            ></atomic-smart-snippet-expandable-answer>\n          )}\n          <SmartSnippetFooter i18n={this.bindings.i18n}>\n            {source && (\n              <atomic-smart-snippet-source\n                anchorAttributes={getAttributesFromLinkSlot(\n                  this.host,\n                  'source-anchor-attributes'\n                )}\n                onBeginDelayedSelectSource={\n                  this.smartSnippet.beginDelayedSelectSource\n                }\n                onCancelPendingSelectSource={\n                  this.smartSnippet.cancelPendingSelectSource\n                }\n                onSelectSource={this.smartSnippet.selectSource}\n                source={source}\n              ></atomic-smart-snippet-source>\n            )}\n            <SmartSnippetFeedbackBanner\n              disliked={this.smartSnippetState.disliked}\n              explainWhyRef={(button) => {\n                if (this.modalRef) {\n                  this.modalRef.source = button;\n                }\n              }}\n              feedbackSent={this.feedbackSent}\n              id={this.id}\n              i18n={this.bindings.i18n}\n              liked={this.smartSnippetState.liked}\n              onDislike={() => {\n                this.loadModal();\n                this.smartSnippet.dislike();\n              }}\n              onLike={() => this.smartSnippet.like()}\n              onPressExplainWhy={() => (this.modalRef!.isOpen = true)}\n            ></SmartSnippetFeedbackBanner>\n          </SmartSnippetFooter>\n        </atomic-smart-snippet-collapse-wrapper>\n      </SmartSnippetWrapper>\n    );\n  }\n\n  private setModalRef(ref: HTMLElement) {\n    this.modalRef = ref as HTMLAtomicSmartSnippetFeedbackModalElement;\n  }\n\n  private setFeedbackSent(isSent: boolean) {\n    this.feedbackSent = isSent;\n  }\n\n  private get style() {\n    const styleTag = this.host\n      .querySelector('template')\n      ?.content.querySelector('style');\n    if (!styleTag) {\n      return this.snippetStyle;\n    }\n    return styleTag.innerHTML;\n  }\n\n  private loadModal() {\n    if (this.modalRef) {\n      return;\n    }\n    const modalRef = document.createElement(\n      'atomic-smart-snippet-feedback-modal'\n    );\n    modalRef.addEventListener('feedbackSent', () => {\n      this.setFeedbackSent(true);\n    });\n    this.setModalRef(modalRef);\n    this.host.insertAdjacentElement('beforebegin', modalRef);\n  }\n}\n"],"version":3}