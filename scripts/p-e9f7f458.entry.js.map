{"version":3,"names":["atomicInsightResultQuickviewActionCss","AtomicInsightResultQuickviewActionStyle0","AtomicInsightResultQuickviewAction","this","sandbox","onNextQuickview","evt","stopImmediatePropagation","quickview","next","onPreviousQuickview","previous","focusTarget","buttonFocusTarget","FocusTargetController","initialize","buildQuickview","bindings","engine","options","result","Schema","StringValue","required","regex","validate","addQuickviewModalIfNeeded","quickviewModalRef","quickviewModal","interfaceElement","querySelector","document","createElement","setAttribute","appendChild","updateModalContent","state","content","total","quickviewState","totalResults","current","currentResult","modalCloseCallback","focus","quickviewAriaMessage","isLoading","i18n","t","first","last","title","onClick","event","stopPropagation","fetchResultContent","shouldRenderQuickview","resultHasPreview","render","h","IconButton","key","partPrefix","style","ref","setTarget","icon","QuickviewIcon","__decorate","InitializeBindings","ResultContext","BindStateToController","AriaLiveRegion"],"sources":["src/components/insight/atomic-insight-result-quickview-action/atomic-insight-result-quickview-action.pcss?tag=atomic-insight-result-quickview-action","src/components/insight/atomic-insight-result-quickview-action/atomic-insight-result-quickview-action.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\n","import {Schema, StringValue} from '@coveo/bueno';\nimport {\n  buildQuickview,\n  QuickviewState,\n  Quickview,\n  Result,\n} from '@coveo/headless';\nimport {Component, Listen, Prop, State, h, Element} from '@stencil/core';\nimport QuickviewIcon from '../../../images/preview.svg';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {\n  AriaLiveRegion,\n  FocusTargetController,\n} from '../../../utils/stencil-accessibility-utils';\nimport {IconButton} from '../../common/iconButton';\nimport {Bindings} from '../../search/atomic-search-interface/atomic-search-interface';\nimport {ResultContext} from '../../search/result-template-components/result-template-decorators';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-result-quickview-action',\n  styleUrl: 'atomic-insight-result-quickview-action.pcss',\n})\nexport class AtomicInsightResultQuickviewAction\n  implements InitializableComponent\n{\n  @InitializeBindings() public bindings!: Bindings;\n  @ResultContext() private result!: Result;\n\n  private buttonFocusTarget?: FocusTargetController;\n\n  @Element() host!: HTMLElement;\n  @State() public error!: Error;\n\n  public quickview!: Quickview;\n\n  @BindStateToController('quickview')\n  @State()\n  public quickviewState!: QuickviewState;\n\n  /**\n   * The `sandbox` attribute to apply to the quickview iframe.\n   *\n   * The quickview is loaded inside an iframe with a [`sandbox`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-sandbox) attribute for security reasons.\n   *\n   * This attribute exists primarily to protect against potential XSS attacks that could originate from the document being displayed.\n   *\n   * By default, the sandbox attributes are: `allow-popups allow-top-navigation allow-same-origin`.\n   *\n   * `allow-same-origin` is not optional, and must always be included in the list of allowed capabilities for the component to function properly.\n   */\n  @Prop()\n  public sandbox = 'allow-popups allow-top-navigation allow-same-origin';\n\n  @AriaLiveRegion('quickview')\n  protected quickviewAriaMessage!: string;\n\n  @Listen('atomic/quickview/next', {target: 'body'})\n  public onNextQuickview(evt: Event) {\n    evt.stopImmediatePropagation();\n    this.quickview.next();\n  }\n\n  @Listen('atomic/quickview/previous', {target: 'body'})\n  public onPreviousQuickview(evt: Event) {\n    evt.stopImmediatePropagation();\n    this.quickview.previous();\n  }\n\n  private quickviewModalRef?: HTMLAtomicQuickviewModalElement;\n\n  public get focusTarget() {\n    if (!this.buttonFocusTarget) {\n      this.buttonFocusTarget = new FocusTargetController(this);\n    }\n    return this.buttonFocusTarget;\n  }\n\n  public initialize() {\n    this.quickview = buildQuickview(this.bindings.engine, {\n      options: {result: this.result},\n    });\n    new Schema({\n      sandbox: new StringValue({\n        required: true,\n        regex: /allow-same-origin/,\n      }),\n    }).validate({sandbox: this.sandbox});\n  }\n\n  private addQuickviewModalIfNeeded() {\n    if (this.quickviewModalRef) {\n      return;\n    }\n\n    const quickviewModal = this.bindings.interfaceElement.querySelector(\n      'atomic-quickview-modal'\n    );\n    if (quickviewModal) {\n      this.quickviewModalRef = quickviewModal;\n      return;\n    }\n    this.quickviewModalRef = document.createElement('atomic-quickview-modal');\n    this.quickviewModalRef.setAttribute('sandbox', this.sandbox);\n    this.bindings.interfaceElement.appendChild(this.quickviewModalRef);\n  }\n\n  private updateModalContent() {\n    if (this.quickviewModalRef && this.quickview.state.content) {\n      this.quickviewModalRef.content = this.quickview.state.content;\n      this.quickviewModalRef.result = this.result;\n      this.quickviewModalRef.total = this.quickviewState.totalResults;\n      this.quickviewModalRef.current = this.quickviewState.currentResult;\n      this.quickviewModalRef.modalCloseCallback = () =>\n        this.focusTarget.focus();\n\n      this.quickviewAriaMessage = this.quickviewState.isLoading\n        ? this.bindings.i18n.t('quickview-loading')\n        : this.bindings.i18n.t('quickview-loaded', {\n            first: this.quickviewState.currentResult,\n            last: this.quickviewState.totalResults,\n            title: this.result.title,\n          });\n    }\n  }\n\n  private onClick(event?: MouseEvent) {\n    event?.stopPropagation();\n    this.quickview.fetchResultContent();\n  }\n\n  private get shouldRenderQuickview() {\n    return this.quickviewState.resultHasPreview;\n  }\n\n  public render() {\n    this.addQuickviewModalIfNeeded();\n    this.updateModalContent();\n    if (this.shouldRenderQuickview) {\n      return (\n        <IconButton\n          partPrefix=\"result-action\"\n          style=\"outline-neutral\"\n          ref={this.focusTarget.setTarget}\n          icon={QuickviewIcon}\n          title={this.bindings.i18n.t('quickview')}\n          onClick={() => this.onClick()}\n        />\n      );\n    }\n  }\n}\n"],"mappings":"omBAAA,MAAMA,EAAwC,k60DAC9C,MAAAC,EAAeD,E,iXC4BFE,EAAkC,M,yBA6BtCC,KAAAC,QAAU,sD,gEAAA,qD,CAMV,eAAAC,CAAgBC,GACrBA,EAAIC,2BACJJ,KAAKK,UAAUC,M,CAIV,mBAAAC,CAAoBJ,GACzBA,EAAIC,2BACJJ,KAAKK,UAAUG,U,CAKjB,eAAWC,GACT,IAAKT,KAAKU,kBAAmB,CAC3BV,KAAKU,kBAAoB,IAAIC,EAAsBX,K,CAErD,OAAOA,KAAKU,iB,CAGP,UAAAE,GACLZ,KAAKK,UAAYQ,EAAeb,KAAKc,SAASC,OAAQ,CACpDC,QAAS,CAACC,OAAQjB,KAAKiB,UAEzB,IAAIC,EAAO,CACTjB,QAAS,IAAIkB,EAAY,CACvBC,SAAU,KACVC,MAAO,wBAERC,SAAS,CAACrB,QAASD,KAAKC,S,CAGrB,yBAAAsB,GACN,GAAIvB,KAAKwB,kBAAmB,CAC1B,M,CAGF,MAAMC,EAAiBzB,KAAKc,SAASY,iBAAiBC,cACpD,0BAEF,GAAIF,EAAgB,CAClBzB,KAAKwB,kBAAoBC,EACzB,M,CAEFzB,KAAKwB,kBAAoBI,SAASC,cAAc,0BAChD7B,KAAKwB,kBAAkBM,aAAa,UAAW9B,KAAKC,SACpDD,KAAKc,SAASY,iBAAiBK,YAAY/B,KAAKwB,kB,CAG1C,kBAAAQ,GACN,GAAIhC,KAAKwB,mBAAqBxB,KAAKK,UAAU4B,MAAMC,QAAS,CAC1DlC,KAAKwB,kBAAkBU,QAAUlC,KAAKK,UAAU4B,MAAMC,QACtDlC,KAAKwB,kBAAkBP,OAASjB,KAAKiB,OACrCjB,KAAKwB,kBAAkBW,MAAQnC,KAAKoC,eAAeC,aACnDrC,KAAKwB,kBAAkBc,QAAUtC,KAAKoC,eAAeG,cACrDvC,KAAKwB,kBAAkBgB,mBAAqB,IAC1CxC,KAAKS,YAAYgC,QAEnBzC,KAAK0C,qBAAuB1C,KAAKoC,eAAeO,UAC5C3C,KAAKc,SAAS8B,KAAKC,EAAE,qBACrB7C,KAAKc,SAAS8B,KAAKC,EAAE,mBAAoB,CACvCC,MAAO9C,KAAKoC,eAAeG,cAC3BQ,KAAM/C,KAAKoC,eAAeC,aAC1BW,MAAOhD,KAAKiB,OAAO+B,O,EAKrB,OAAAC,CAAQC,GACdA,GAAOC,kBACPnD,KAAKK,UAAU+C,oB,CAGjB,yBAAYC,GACV,OAAOrD,KAAKoC,eAAekB,gB,CAGtB,MAAAC,GACLvD,KAAKuB,4BACLvB,KAAKgC,qBACL,GAAIhC,KAAKqD,sBAAuB,CAC9B,OACEG,EAACC,EAAU,CAAAC,IAAA,2CACTC,WAAW,gBACXC,MAAM,kBACNC,IAAK7D,KAAKS,YAAYqD,UACtBC,KAAMC,EACNhB,MAAOhD,KAAKc,SAAS8B,KAAKC,EAAE,aAC5BI,QAAS,IAAMjD,KAAKiD,W,8BAxHCgB,EAAA,CAA5BC,K,+BACwBD,EAAA,CAAxBE,K,6BAWMF,EAAA,CAFNG,EAAsB,c,qCAmBbH,EAAA,CADTI,EAAe,c","ignoreList":[]}