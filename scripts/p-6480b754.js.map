{"version":3,"names":["SearchBoxWrapper","props","children","getClasses","baseClasses","focusClasses","disabled","join","h","part","class","onFocusout","TextAreaClearButton","inputRef","bindings","onClick","defaultButtonProps","Button","style","focus","ariaLabel","i18n","t","icon","ClearSlim","getPopupAttributes","autocomplete","autocapitalize","autocorrect","activeDescendant","id","syncTextWithReplica","elem","value","parent","parentNode","dataset","replicatedValue","resetReplicaText","collapseTextArea","classList","remove","expandTextArea","add","SearchTextArea","textAreaRef","loading","onInput","onFocus","onBlur","onChange","onKeyDown","onKeyUp","onClear","popup","defaultInputProps","placeholder","rows","e","key","shiftKey","preventDefault","target","promiseTimeout","prom","ms","timeout","Promise","_","reject","setTimeout","Error","race","then","clearTimeout","SuggestionManager","constructor","ownerSearchBoxProps","this","suggestions","leftSuggestionElements","rightSuggestionElements","leftPanel","undefined","rightPanel","suggestedQuery","keyboardActiveDescendant","queryDataAttribute","suggestionEvents","previousActiveDescendantElement","leftSuggestions","rightSuggestions","triggerSuggestions","debounce","executeQuerySuggestion","getSuggestionDelay","partialSuggestionBindings","clearSuggestions","getSuggestions","getSuggestionElements","allSuggestionElements","activeDescendantElement","hasActiveDescendant","querySelector","onSubmit","clickOnActiveElement","updateActiveDescendant","forceUpdate","getHost","updateKeyboardActiveDescendant","click","isRightPanelInFocus","isNullOrUndefined","panelInFocus","initializeSuggestions","map","event","registerSuggestionsFromEvent","stopPropagation","push","detail","registerSuggestions","isDoubleList","Boolean","length","focusPanel","side","panel","firstElementChild","panelHasActiveDescendant","contains","newValue","updateDescendants","clearSuggestionElements","focusNextValue","hasSuggestions","nextOrFirstValue","focusValue","scrollActiveDescendantIntoView","updateQueryFromSuggestion","onSuggestionMouseOver","item","thisPanel","query","updateSuggestedQuery","onSuggestionClick","updateOwnerSearchboxQuery","onSelect","focusPreviousValue","firstValue","previousOrLastValue","settled","allSettled","suggestion","resolve","getSuggestionTimeout","fulfilledSuggestions","forEach","j","status","getLogger","warn","splitSuggestions","isDefault","filter","sort","sortSuggestions","getAndFilterLeftSuggestionElements","defaultSuggestedQuery","find","elementHasQuery","lastValue","lastElementChild","firstChild","parentOfActiveDescendant","parentElement","previousElementSibling","a","b","position","nextElementSibling","scrollIntoView","block","getAttribute","getSearchBoxValue","updateQuery","onSuggestedQueryChange","updateSuggestionElements","isPanelInFocus","escaped","DOMPurify","sanitize","CSS","escape","closest","suggestionElements","filterOnDuplicate","Set","out","suggestionElement","has","elements","renderItems","flat","max","getNumberOfSuggestionsToDisplay","elementHasNoQuery","slice","newPrevDescendantElement"],"sources":["src/components/common/search-box/stencil-search-box-wrapper.tsx","src/components/common/search-box/stencil-text-area-clear-button.tsx","src/components/common/search-box/stencil-search-text-area.tsx","src/utils/promise-utils.ts","src/components/common/suggestions/stencil-suggestion-manager.ts"],"sourcesContent":["import {FunctionalComponent, h} from '@stencil/core';\n\ninterface Props {\n  disabled: boolean;\n  onFocusout?: (event: FocusEvent) => void;\n}\n\nexport const SearchBoxWrapper: FunctionalComponent<Props> = (\n  props,\n  children\n) => {\n  const getClasses = () => {\n    const baseClasses =\n      'flex bg-background w-full border border-neutral rounded-md focus-within:ring-3 absolute top-0 left-0';\n    const focusClasses = props.disabled\n      ? 'focus-within:border-disabled focus-within:ring-neutral'\n      : 'focus-within:border-primary focus-within:ring-ring-primary';\n\n    return [baseClasses, focusClasses].join(' ');\n  };\n\n  return (\n    <div part=\"wrapper\" class={getClasses()} onFocusout={props.onFocusout}>\n      {children}\n    </div>\n  );\n};\n","import {FunctionalComponent, h} from '@stencil/core';\nimport ClearSlim from '../../../images/clear-slim.svg';\nimport {AnyBindings} from '../interface/bindings';\nimport {Button, StencilButtonProps} from '../stencil-button';\n\ninterface Props extends Partial<StencilButtonProps> {\n  bindings: AnyBindings;\n  inputRef: HTMLInputElement | HTMLTextAreaElement | null;\n}\n\nexport const TextAreaClearButton: FunctionalComponent<Props> = ({\n  inputRef,\n  bindings,\n  onClick,\n  ...defaultButtonProps\n}) => (\n  <div\n    part=\"clear-button-wrapper\"\n    class=\"ml-2 flex items-center justify-center py-2\"\n  >\n    <Button\n      style=\"text-transparent\"\n      part=\"clear-button\"\n      class=\"text-neutral-dark flex h-8 w-8 shrink-0 items-center justify-center\"\n      onClick={() => {\n        onClick?.();\n        inputRef?.focus();\n      }}\n      ariaLabel={bindings.i18n.t('clear')}\n      {...defaultButtonProps}\n    >\n      <atomic-icon\n        part=\"clear-icon\"\n        icon={ClearSlim}\n        class=\"h-4 w-4\"\n      ></atomic-icon>\n    </Button>\n  </div>\n);\n","import {FunctionalComponent, h} from '@stencil/core';\nimport {JSXBase} from '@stencil/core/internal';\nimport {AnyBindings} from '../interface/bindings';\nimport {TextAreaClearButton} from './stencil-text-area-clear-button';\n\ninterface Props extends JSXBase.TextareaHTMLAttributes<HTMLTextAreaElement> {\n  textAreaRef: HTMLTextAreaElement;\n  loading: boolean;\n  bindings: AnyBindings;\n  value: string;\n  ariaLabel: string;\n  onClear(): void;\n  popup?: {\n    id: string;\n    activeDescendant: string;\n    expanded: boolean;\n    hasSuggestions: boolean;\n  };\n}\n\nfunction getPopupAttributes(props: Required<Props>['popup']) {\n  return {\n    autocomplete: 'off',\n    autocapitalize: 'off',\n    autocorrect: 'off',\n    ...(props.activeDescendant && {\n      'aria-activedescendant': props.activeDescendant,\n    }),\n    'aria-autocomplete': 'both',\n    'aria-haspopup': 'true',\n    'aria-controls': props.id,\n  };\n}\n\nfunction syncTextWithReplica(elem: HTMLTextAreaElement, value?: string) {\n  const parent = elem?.parentNode as HTMLElement;\n  if (!parent) {\n    return;\n  }\n  if (elem.value === '\\n') {\n    return;\n  }\n  parent.dataset.replicatedValue = value ?? elem.value;\n}\n\nfunction resetReplicaText(elem: HTMLTextAreaElement) {\n  const parent = elem?.parentNode as HTMLElement;\n  if (parent) {\n    delete parent.dataset.replicatedValue;\n  }\n}\n\nfunction collapseTextArea(elem: HTMLTextAreaElement) {\n  const parent = elem?.parentNode as HTMLElement;\n  if (parent) {\n    parent.classList.remove('expanded');\n  }\n}\n\nfunction expandTextArea(elem: HTMLTextAreaElement) {\n  const parent = elem?.parentNode as HTMLElement;\n  if (parent) {\n    parent.classList.add('expanded');\n  }\n}\n\nexport const SearchTextArea: FunctionalComponent<Props> = ({\n  textAreaRef,\n  loading,\n  bindings,\n  onInput,\n  onFocus,\n  onBlur,\n  onChange,\n  onKeyDown,\n  onKeyUp,\n  value,\n  ariaLabel,\n  onClear,\n  popup,\n  ...defaultInputProps\n}) => (\n  <div class=\"flex grow overflow-hidden\">\n    <div part=\"textarea-expander\" class=\"grid grow overflow-hidden\">\n      <textarea\n        part=\"textarea\"\n        aria-label={ariaLabel}\n        placeholder={bindings.i18n.t('search')}\n        class=\"placeholder-neutral-dark\"\n        rows={1}\n        onInput={(e) => {\n          onInput?.(e);\n          syncTextWithReplica(textAreaRef);\n        }}\n        onKeyDown={(e) => {\n          syncTextWithReplica(textAreaRef);\n          if (e.key === 'Enter') {\n            if (e.shiftKey) {\n              return;\n            }\n            e.preventDefault();\n          }\n          onKeyDown?.(e);\n        }}\n        onKeyUp={(e) => {\n          onKeyUp?.(e);\n          if (e.key === 'Enter') {\n            e.preventDefault();\n            return;\n          }\n          syncTextWithReplica(textAreaRef);\n        }}\n        onBlur={(e) => {\n          onBlur?.(e);\n          collapseTextArea(textAreaRef);\n          syncTextWithReplica(textAreaRef);\n        }}\n        onChange={(e) => {\n          onChange?.(e);\n          syncTextWithReplica(textAreaRef);\n        }}\n        onFocus={(e) => {\n          onFocus?.(e);\n          const target = e.target as HTMLTextAreaElement;\n          syncTextWithReplica(textAreaRef ?? target);\n          expandTextArea(textAreaRef ?? target);\n        }}\n        autocomplete=\"off\"\n        {...(popup && getPopupAttributes(popup))}\n        {...defaultInputProps}\n        value={value}\n      />\n    </div>\n\n    {loading && (\n      <div class=\"searchbox-button-wrapper ml-2 flex items-center justify-center\">\n        <span\n          part=\"loading\"\n          class=\"loading mr-2 grid h-5 w-5 animate-spin place-items-center rounded-full bg-linear-to-r\"\n        ></span>\n      </div>\n    )}\n    {!loading && value && (\n      <TextAreaClearButton\n        inputRef={textAreaRef}\n        bindings={bindings}\n        onClick={() => {\n          onClear();\n          resetReplicaText(textAreaRef);\n        }}\n      />\n    )}\n  </div>\n);\n","export function promiseTimeout<T>(prom: T | Promise<T>, ms: number) {\n  let id: NodeJS.Timeout;\n  const timeout = new Promise((_, reject) => {\n    id = setTimeout(() => {\n      reject(new Error('Promise timed out.'));\n    }, ms);\n  });\n  return Promise.race([prom, timeout]).then(() => {\n    clearTimeout(id);\n  });\n}\n","import {isNullOrUndefined} from '@coveo/bueno';\nimport {forceUpdate} from '@stencil/core';\nimport DOMPurify from 'dompurify';\nimport {debounce} from '../../../utils/debounce-utils';\nimport {promiseTimeout} from '../../../utils/promise-utils';\nimport {\n  SearchBoxSuggestionElement,\n  SearchBoxSuggestionsBindings,\n  SearchBoxSuggestionsEvent,\n  elementHasNoQuery,\n  elementHasQuery,\n} from './suggestions-common';\n\n/**\n * List of suggestions that will be displayed along other lists (e.g recent queries) when the search box's input is selected.\n */\nexport interface SearchBoxSuggestions {\n  /**\n   * The search box will sort the position of suggestions using this value, the lowest value being first.\n   * By default, the DOM position will be used.\n   */\n  position: number;\n  /**\n   * Whether the suggestions should be listed in the right or left panel. By default, the suggestions are listed in the right panel.\n   */\n  panel?: 'left' | 'right';\n  /**\n   * Method that returns the list of elements which will be rendered in the list of suggestions.\n   */\n  renderItems(): SearchBoxSuggestionElement[];\n  /**\n   * Hook called when the user changes the search box's input value. This can lead to all the query suggestions being updated.\n   */\n  onInput?(): Promise<unknown> | void;\n  /**\n   * Hook called when the current suggested query changes as the user navigates the list of suggestions.\n   * This is used for instant results, which are rendered based on the current suggested query.\n   * @param q The new current suggested query.\n   */\n  onSuggestedQueryChange?(q: string): Promise<unknown> | void;\n}\n\ninterface SearchBoxProps {\n  getSearchBoxValue: () => string;\n  updateQuery: (suggestedQuery: string) => void;\n  getSuggestionTimeout: () => number;\n  getNumberOfSuggestionsToDisplay: () => number;\n  getSuggestionDelay: () => number;\n  getLogger: () => Pick<typeof console, 'warn'>;\n  getHost: () => HTMLElement;\n}\n\nexport class SuggestionManager<SearchBoxController> {\n  public suggestions: SearchBoxSuggestions[] = [];\n  public leftSuggestionElements: SearchBoxSuggestionElement[] = [];\n  public rightSuggestionElements: SearchBoxSuggestionElement[] = [];\n  public leftPanel: HTMLElement | undefined = undefined;\n  public rightPanel: HTMLElement | undefined = undefined;\n  public triggerSuggestions: () => Promise<void>;\n  public activeDescendant = '';\n  public suggestedQuery = '';\n  public keyboardActiveDescendant = '';\n\n  private queryDataAttribute = 'data-query';\n  private suggestionEvents: SearchBoxSuggestionsEvent<SearchBoxController>[] =\n    [];\n\n  private previousActiveDescendantElement: HTMLElement | null = null;\n  private leftSuggestions: SearchBoxSuggestions[] = [];\n  private rightSuggestions: SearchBoxSuggestions[] = [];\n\n  constructor(private ownerSearchBoxProps: SearchBoxProps) {\n    this.triggerSuggestions = debounce(\n      () => this.executeQuerySuggestion(),\n      this.ownerSearchBoxProps.getSuggestionDelay()\n    );\n  }\n\n  public get partialSuggestionBindings(): Pick<\n    SearchBoxSuggestionsBindings<SearchBoxController>,\n    | 'suggestedQuery'\n    | 'clearSuggestions'\n    | 'triggerSuggestions'\n    | 'getSuggestions'\n    | 'getSuggestionElements'\n  > {\n    return {\n      suggestedQuery: () => this.suggestedQuery,\n      clearSuggestions: () => this.clearSuggestions(),\n      triggerSuggestions: () => this.triggerSuggestions(),\n      getSuggestions: () => this.suggestions,\n      getSuggestionElements: () => this.allSuggestionElements,\n    };\n  }\n\n  public get activeDescendantElement(): HTMLElement | null {\n    if (!this.hasActiveDescendant) {\n      return null;\n    }\n\n    return (\n      this.leftPanel?.querySelector(`#${this.activeDescendant}`) ||\n      this.rightPanel?.querySelector(`#${this.activeDescendant}`) ||\n      null\n    );\n  }\n\n  public onSubmit() {\n    this.clickOnActiveElement();\n    this.clearSuggestions();\n  }\n\n  public updateActiveDescendant(id = '') {\n    this.activeDescendant = id;\n    forceUpdate(this.ownerSearchBoxProps.getHost());\n  }\n\n  public updateKeyboardActiveDescendant(id = '') {\n    this.keyboardActiveDescendant = id;\n  }\n\n  public clickOnActiveElement() {\n    this.activeDescendantElement?.click();\n    this.updateActiveDescendant();\n  }\n\n  public isRightPanelInFocus() {\n    if (\n      isNullOrUndefined(this.panelInFocus) ||\n      isNullOrUndefined(this.rightPanel)\n    ) {\n      return false;\n    }\n\n    return this.panelInFocus === this.rightPanel;\n  }\n\n  public initializeSuggestions(\n    bindings: SearchBoxSuggestionsBindings<SearchBoxController>\n  ) {\n    this.suggestions = this.suggestionEvents.map((event) => event(bindings));\n  }\n\n  public registerSuggestionsFromEvent(\n    event: CustomEvent<SearchBoxSuggestionsEvent<SearchBoxController>>,\n    bindings: SearchBoxSuggestionsBindings<SearchBoxController>\n  ) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.suggestionEvents.push(event.detail);\n    this.suggestions.push(event.detail(bindings));\n  }\n\n  public registerSuggestions(suggestions: SearchBoxSuggestions) {\n    this.suggestions.push(suggestions);\n  }\n\n  public get isDoubleList() {\n    return Boolean(\n      this.leftSuggestionElements.length && this.rightSuggestionElements.length\n    );\n  }\n\n  public focusPanel(side: 'left' | 'right') {\n    const panel = side === 'left' ? this.leftPanel : this.rightPanel;\n\n    if (this.panelInFocus === panel) {\n      return;\n    }\n    if (panel && panel.firstElementChild) {\n      const panelHasActiveDescendant =\n        this.previousActiveDescendantElement &&\n        panel.contains(this.previousActiveDescendantElement);\n      const newValue = panelHasActiveDescendant\n        ? this.previousActiveDescendantElement!\n        : (panel.firstElementChild as HTMLElement);\n      this.updateDescendants(newValue.id);\n    }\n  }\n\n  public clearSuggestions() {\n    this.clearSuggestionElements();\n    this.updateActiveDescendant();\n  }\n\n  public focusNextValue() {\n    if (!this.hasSuggestions || !this.nextOrFirstValue) {\n      return;\n    }\n\n    this.focusValue(this.nextOrFirstValue as HTMLElement);\n  }\n\n  public focusValue(value: HTMLElement) {\n    this.updateKeyboardActiveDescendant(value.id);\n    this.updateActiveDescendant(value.id);\n    this.scrollActiveDescendantIntoView();\n    this.updateQueryFromSuggestion();\n  }\n\n  public onSuggestionMouseOver(\n    item: SearchBoxSuggestionElement,\n    side: 'left' | 'right',\n    id: string\n  ) {\n    const thisPanel = side === 'left' ? this.leftPanel : this.rightPanel;\n    // When hovering, always reset the keyboard active descendant\n    this.updateKeyboardActiveDescendant();\n    if (this.panelInFocus === thisPanel) {\n      this.updateActiveDescendant(id);\n    } else {\n      this.updateDescendants(id);\n    }\n    if (item.query) {\n      this.updateSuggestedQuery(item.query);\n    }\n  }\n\n  public onSuggestionClick(item: SearchBoxSuggestionElement, e: Event) {\n    if (item.query) {\n      this.clearSuggestions();\n      this.updateOwnerSearchboxQuery(item.query);\n    }\n    item.onSelect && item.onSelect(e);\n  }\n\n  public get hasSuggestions() {\n    return !!this.allSuggestionElements.length;\n  }\n\n  public get allSuggestionElements() {\n    return [...this.leftSuggestionElements, ...this.rightSuggestionElements];\n  }\n\n  public focusPreviousValue() {\n    if (this.firstValue === this.activeDescendantElement) {\n      this.updateKeyboardActiveDescendant();\n      this.updateActiveDescendant();\n      return;\n    }\n\n    if (!this.hasSuggestions || !this.previousOrLastValue) {\n      return;\n    }\n\n    this.focusValue(this.previousOrLastValue as HTMLElement);\n  }\n\n  public get hasActiveDescendant() {\n    return this.activeDescendant !== '';\n  }\n\n  private async executeQuerySuggestion() {\n    this.updateActiveDescendant();\n    const settled = await Promise.allSettled(\n      this.suggestions.map((suggestion) =>\n        promiseTimeout(\n          suggestion.onInput ? suggestion.onInput() : Promise.resolve(),\n          this.ownerSearchBoxProps.getSuggestionTimeout()\n        )\n      )\n    );\n\n    const fulfilledSuggestions: SearchBoxSuggestions[] = [];\n\n    settled.forEach((prom, j) => {\n      if (prom.status === 'fulfilled') {\n        fulfilledSuggestions.push(this.suggestions[j]);\n      } else {\n        this.ownerSearchBoxProps\n          .getLogger()\n          .warn(\n            'Some query suggestions are not being shown because the promise timed out.'\n          );\n      }\n    });\n\n    const splitSuggestions = (side: 'left' | 'right', isDefault = false) =>\n      fulfilledSuggestions\n        .filter(\n          (suggestion) =>\n            suggestion.panel === side || (!suggestion.panel && isDefault)\n        )\n        .sort(this.sortSuggestions);\n\n    this.leftSuggestions = splitSuggestions('left', true);\n    this.leftSuggestionElements = this.getAndFilterLeftSuggestionElements();\n\n    this.rightSuggestions = splitSuggestions('right');\n    this.rightSuggestionElements = this.getSuggestionElements(\n      this.rightSuggestions\n    );\n\n    const defaultSuggestedQuery =\n      this.allSuggestionElements.find(elementHasQuery)?.query || '';\n\n    this.updateSuggestedQuery(defaultSuggestedQuery);\n  }\n\n  private get lastValue() {\n    return this.panelInFocus?.lastElementChild;\n  }\n\n  private get previousOrLastValue() {\n    if (!this.hasActiveDescendant) {\n      return this.lastValue?.firstChild;\n    }\n\n    const parentOfActiveDescendant =\n      this.activeDescendantElement?.parentElement;\n    return (\n      parentOfActiveDescendant?.previousElementSibling?.firstChild ||\n      this.firstValue?.firstChild\n    );\n  }\n\n  private sortSuggestions(a: SearchBoxSuggestions, b: SearchBoxSuggestions) {\n    return a.position - b.position;\n  }\n\n  private get nextOrFirstValue() {\n    if (!this.hasActiveDescendant) {\n      return this.firstValue?.firstChild;\n    }\n\n    const parentOfActiveDescendant =\n      this.activeDescendantElement?.parentElement;\n    return (\n      parentOfActiveDescendant?.nextElementSibling?.firstChild ||\n      this.firstValue?.firstChild\n    );\n  }\n\n  private get firstValue() {\n    return this.panelInFocus?.firstElementChild;\n  }\n\n  private get panelInFocus() {\n    if (this.leftPanel?.contains(this.activeDescendantElement)) {\n      return this.leftPanel;\n    }\n    if (this.rightPanel?.contains(this.activeDescendantElement)) {\n      return this.rightPanel;\n    }\n    return this.leftPanel || this.rightPanel;\n  }\n\n  private scrollActiveDescendantIntoView() {\n    this.activeDescendantElement?.scrollIntoView({\n      block: 'nearest',\n    });\n  }\n\n  private updateQueryFromSuggestion() {\n    const suggestedQuery = this.activeDescendantElement?.getAttribute(\n      this.queryDataAttribute\n    );\n    this.updateOwnerSearchboxQuery(suggestedQuery || '');\n  }\n\n  private updateOwnerSearchboxQuery(query: string) {\n    if (query && this.ownerSearchBoxProps.getSearchBoxValue() !== query) {\n      this.ownerSearchBoxProps.updateQuery(query);\n      this.updateSuggestedQuery(query);\n    }\n  }\n\n  private async updateSuggestedQuery(suggestedQuery: string) {\n    await Promise.allSettled(\n      this.suggestions.map((suggestion) =>\n        promiseTimeout(\n          suggestion.onSuggestedQueryChange\n            ? suggestion.onSuggestedQueryChange(suggestedQuery)\n            : Promise.resolve(),\n          this.ownerSearchBoxProps.getSuggestionTimeout()\n        )\n      )\n    );\n    this.suggestedQuery = suggestedQuery;\n    this.updateSuggestionElements(suggestedQuery);\n    forceUpdate(this.ownerSearchBoxProps.getHost());\n  }\n\n  private updateSuggestionElements(query: string) {\n    if (!this.isPanelInFocus(this.leftPanel, query)) {\n      this.leftSuggestionElements = this.getAndFilterLeftSuggestionElements();\n    }\n\n    if (!this.isPanelInFocus(this.rightPanel, query)) {\n      this.rightSuggestionElements = this.getSuggestionElements(\n        this.rightSuggestions\n      );\n    }\n  }\n\n  public forceUpdate() {\n    this.updateSuggestionElements(this.suggestedQuery);\n    forceUpdate(this.ownerSearchBoxProps.getHost());\n  }\n\n  private isPanelInFocus(\n    panel: HTMLElement | undefined,\n    query: string\n  ): boolean {\n    if (!this.activeDescendantElement) {\n      return false;\n    }\n\n    if (query) {\n      const escaped = DOMPurify.sanitize(query);\n      return !!panel?.querySelector(\n        `[${this.queryDataAttribute}=\"${CSS.escape(escaped)}\"]`\n      );\n    }\n\n    return this.activeDescendantElement?.closest('ul') === panel;\n  }\n\n  private getAndFilterLeftSuggestionElements() {\n    const suggestionElements = this.getSuggestionElements(this.leftSuggestions);\n    const filterOnDuplicate = new Set();\n\n    const out = suggestionElements.filter((suggestionElement) => {\n      if (isNullOrUndefined(suggestionElement.query)) {\n        return true;\n      }\n      if (filterOnDuplicate.has(suggestionElement.query)) {\n        return false;\n      } else {\n        filterOnDuplicate.add(suggestionElement.query);\n        return true;\n      }\n    });\n\n    return out;\n  }\n\n  private getSuggestionElements(suggestions: SearchBoxSuggestions[]) {\n    const elements = suggestions\n      .map((suggestion) => suggestion.renderItems())\n      .flat();\n\n    const max =\n      this.ownerSearchBoxProps.getNumberOfSuggestionsToDisplay() +\n      elements.filter(elementHasNoQuery).length;\n\n    return elements.slice(0, max);\n  }\n\n  private updateDescendants(activeDescendant = '') {\n    const newPrevDescendantElement = this.activeDescendantElement;\n    this.previousActiveDescendantElement = newPrevDescendantElement;\n    this.updateActiveDescendant(activeDescendant);\n  }\n\n  private clearSuggestionElements() {\n    this.leftSuggestionElements = [];\n    this.rightSuggestionElements = [];\n  }\n}\n"],"mappings":"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","ignoreList":[]}