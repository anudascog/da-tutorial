{"version":3,"names":["atomicLoadMoreResultsCss","AtomicLoadMoreResultsStyle0","AtomicLoadMoreResults","this","isAppLoaded","initialize","querySummary","buildQuerySummary","bindings","engine","resultList","buildResultList","options","fieldsToInclude","createAppLoadedListener","store","onClick","state","focusOnNextNewResult","fetchMoreResults","render","lastResult","from","total","to","querySummaryState","i18n","h","LoadMoreGuard","key","hasResults","isLoaded","LoadMoreContainer","LoadMoreSummary","LoadMoreProgressBar","LoadMoreButton","moreAvailable","resultListState","moreResultsAvailable","__decorate","InitializeBindings","BindStateToController"],"sources":["src/components/search/atomic-load-more-results/atomic-load-more-results.pcss?tag=atomic-load-more-results&encapsulation=shadow","src/components/search/atomic-load-more-results/atomic-load-more-results.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\n\n/**\n * @prop --atomic-more-results-progress-bar-color-from: Color of the start of the gradient for the load more results progress bar.\n * @prop --atomic-more-results-progress-bar-color-to: Color of the end of the gradient for the load more results progress bar.\n */\n.progress-bar {\n  @apply from-more-results-progress-bar-color-from;\n  @apply to-more-results-progress-bar-color-to;\n}\n","import {\n  QuerySummary,\n  QuerySummaryState,\n  buildQuerySummary,\n  ResultList,\n  ResultListState,\n  buildResultList,\n} from '@coveo/headless';\nimport {Component, h, State} from '@stencil/core';\nimport {\n  BindStateToController,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {createAppLoadedListener} from '../../common/interface/store';\nimport {LoadMoreContainer} from '../../common/load-more/container';\nimport {LoadMoreGuard} from '../../common/load-more/guard';\nimport {LoadMoreProgressBar} from '../../common/load-more/progress-bar';\nimport {LoadMoreButton} from '../../common/load-more/stencil-button';\nimport {LoadMoreSummary} from '../../common/load-more/summary';\nimport {Bindings} from '../atomic-search-interface/atomic-search-interface';\n\n/**\n * The `atomic-load-more-results` component allows the user to load additional results if more are available.\n *\n * @part container - The container of the component.\n * @part showing-results - The summary displaying which results are shown and how many are available.\n * @part highlight - The highlighted number of results displayed and number of results available.\n * @part progress-bar - The progress bar displaying a percentage of results shown over the total number of results available.\n * @part load-more-results-button - The \"Load more results\" button.\n */\n@Component({\n  tag: 'atomic-load-more-results',\n  styleUrl: 'atomic-load-more-results.pcss',\n  shadow: true,\n})\nexport class AtomicLoadMoreResults {\n  @InitializeBindings() public bindings!: Bindings;\n  public querySummary!: QuerySummary;\n  public resultList!: ResultList;\n\n  @BindStateToController('querySummary')\n  @State()\n  private querySummaryState!: QuerySummaryState;\n  @BindStateToController('resultList')\n  @State()\n  private resultListState!: ResultListState;\n  @State() public error!: Error;\n  @State() private isAppLoaded = false;\n\n  public initialize() {\n    this.querySummary = buildQuerySummary(this.bindings.engine);\n    this.resultList = buildResultList(this.bindings.engine, {\n      options: {\n        fieldsToInclude: [],\n      },\n    });\n    createAppLoadedListener(this.bindings.store, (isAppLoaded) => {\n      this.isAppLoaded = isAppLoaded;\n    });\n  }\n\n  private async onClick() {\n    this.bindings.store.state.resultList?.focusOnNextNewResult();\n    this.resultList.fetchMoreResults();\n  }\n\n  public render() {\n    const {lastResult: from, total: to} = this.querySummaryState;\n    const {i18n} = this.bindings;\n\n    return (\n      <LoadMoreGuard\n        hasResults={this.querySummaryState.hasResults}\n        isLoaded={this.isAppLoaded}\n      >\n        <LoadMoreContainer>\n          <LoadMoreSummary from={from} to={to} i18n={i18n} />\n          <LoadMoreProgressBar from={from} to={to} />\n          <LoadMoreButton\n            i18n={i18n}\n            moreAvailable={this.resultListState.moreResultsAvailable}\n            onClick={() => this.onClick()}\n          />\n        </LoadMoreContainer>\n      </LoadMoreGuard>\n    );\n  }\n}\n"],"mappings":"mfAAA,MAAMA,EAA2B,qi2DACjC,MAAAC,EAAeD,E,iXCkCFE,EAAqB,M,yBAYfC,KAAAC,YAAc,M,sGAAA,K,CAExB,UAAAC,GACLF,KAAKG,aAAeC,EAAkBJ,KAAKK,SAASC,QACpDN,KAAKO,WAAaC,EAAgBR,KAAKK,SAASC,OAAQ,CACtDG,QAAS,CACPC,gBAAiB,MAGrBC,EAAwBX,KAAKK,SAASO,OAAQX,IAC5CD,KAAKC,YAAcA,CAAW,G,CAI1B,aAAMY,GACZb,KAAKK,SAASO,MAAME,MAAMP,YAAYQ,uBACtCf,KAAKO,WAAWS,kB,CAGX,MAAAC,GACL,MAAOC,WAAYC,EAAMC,MAAOC,GAAMrB,KAAKsB,kBAC3C,MAAMC,KAACA,GAAQvB,KAAKK,SAEpB,OACEmB,EAACC,EAAa,CAAAC,IAAA,2CACZC,WAAY3B,KAAKsB,kBAAkBK,WACnCC,SAAU5B,KAAKC,aAEfuB,EAACK,EAAiB,CAAAH,IAAA,4CAChBF,EAACM,EAAe,CAAAJ,IAAA,2CAACP,KAAMA,EAAME,GAAIA,EAAIE,KAAMA,IAC3CC,EAACO,EAAmB,CAAAL,IAAA,2CAACP,KAAMA,EAAME,GAAIA,IACrCG,EAACQ,EAAc,CAAAN,IAAA,2CACbH,KAAMA,EACNU,cAAejC,KAAKkC,gBAAgBC,qBACpCtB,QAAS,IAAMb,KAAKa,a,GA7CDuB,EAAA,CAA5BC,K,+BAMOD,EAAA,CAFPE,EAAsB,iB,wCAKfF,EAAA,CAFPE,EAAsB,e","ignoreList":[]}