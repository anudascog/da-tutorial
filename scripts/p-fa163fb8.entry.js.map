{"version":3,"names":["FacetSegmentedValue","props","compactCount","Intl","NumberFormat","i18n","language","notation","format","numberOfResults","count","toLocaleString","ariaLabel","t","value","displayValue","formattedCount","h","key","Button","style","part","isSelected","onClick","class","ariaPressed","toString","title","text","atomicSegmentedFacetCss","AtomicSegmentedFacetStyle0","AtomicSegmentedFacet","this","tabsIncluded","tabsExcluded","filterFacetCount","injectionDepth","numberOfValues","sortCriteria","dependsOn","allowedValues","customSort","initialize","length","console","warn","searchStatus","buildSearchStatus","bindings","engine","tabManager","buildTabManager","facet","buildFacet","options","facetOptions","facetId","state","dependenciesManager","buildFacetConditionsManager","conditions","parseDependsOn","disconnectedCallback","stopWatching","renderValuesContainer","children","classes","FacetValuesGroup","label","renderValue","facetValue","getFieldValueCaption","field","searchQuery","facetState","facetSearch","query","renderValues","values","map","toggleSingleSelect","renderLabel","hasBreadcrumbs","undefined","tabs","included","excluded","render","hasError","enabled","Hidden","firstSearchExecuted","__decorate","InitializeBindings","BindStateToController","ArrayProp","MapProp"],"sources":["src/components/search/facets/facet-segmented-value/facet-segmented-value.tsx","src/components/search/facets/atomic-segmented-facet/atomic-segmented-facet.pcss?tag=atomic-segmented-facet&encapsulation=shadow","src/components/search/facets/atomic-segmented-facet/atomic-segmented-facet.tsx"],"sourcesContent":["import {FunctionalComponent, h} from '@stencil/core';\nimport {FacetValueProps} from '../../../common/facets/stencil-facet-common';\nimport {Button} from '../../../common/stencil-button';\n\nexport const FacetSegmentedValue: FunctionalComponent<FacetValueProps> = (\n  props\n) => {\n  const compactCount = new Intl.NumberFormat(props.i18n.language, {\n    notation: 'compact',\n  }).format(props.numberOfResults);\n\n  const count = props.numberOfResults.toLocaleString(props.i18n.language);\n\n  const ariaLabel = props.i18n.t('facet-value', {\n    value: props.displayValue,\n    count: props.numberOfResults,\n    formattedCount: count,\n  });\n\n  return (\n    <li key={props.displayValue}>\n      <Button\n        style=\"square-neutral\"\n        part={`value-box${props.isSelected ? ' value-box-selected' : ''}`}\n        onClick={() => props.onClick()}\n        class={`value-box group box-border flex h-full items-center p-2 ${\n          props.isSelected\n            ? 'selected border-primary shadow-inner-primary'\n            : 'hover:border-primary-light focus-visible:border-primary-light'\n        }`}\n        ariaPressed={props.isSelected.toString()}\n        ariaLabel={ariaLabel}\n      >\n        <span\n          title={props.displayValue}\n          part=\"value-label\"\n          class={`value-label truncate ${\n            props.isSelected\n              ? 'text-primary'\n              : 'group-hover:text-primary-light group-focus:text-primary'\n          }`}\n        >\n          {props.displayValue}\n        </span>\n        <span\n          title={count}\n          part=\"value-count\"\n          class={`value-box-count mt-0 w-auto truncate pl-1 text-sm ${\n            props.isSelected\n              ? 'text-primary'\n              : 'text-neutral-dark group-hover:text-primary-light group-focus:text-primary'\n          }`}\n        >\n          {props.i18n.t('between-parentheses', {\n            text: compactCount,\n          })}\n        </span>\n      </Button>\n    </li>\n  );\n};\n","@import '../../../common/facets/facet-common.pcss';\n@import '../facet-segmented-value/facet-segmented-value.pcss';\n","import {\n  buildFacet,\n  buildFacetConditionsManager,\n  buildSearchStatus,\n  CategoryFacetValueRequest,\n  Facet,\n  FacetConditionsManager,\n  FacetOptions,\n  FacetSortCriterion,\n  FacetState,\n  FacetValue,\n  FacetValueRequest,\n  SearchStatus,\n  SearchStatusState,\n  buildTabManager,\n  TabManager,\n  TabManagerState,\n} from '@coveo/headless';\nimport {Component, h, Prop, State, VNode} from '@stencil/core';\nimport {getFieldValueCaption} from '../../../../utils/field-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {ArrayProp, MapProp} from '../../../../utils/props-utils';\nimport {parseDependsOn} from '../../../common/facets/depends-on';\nimport {FacetValuesGroup} from '../../../common/facets/facet-values-group/stencil-facet-values-group';\nimport {Hidden} from '../../../common/stencil-hidden';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\nimport {FacetSegmentedValue} from '../facet-segmented-value/facet-segmented-value';\n\n/**\n * The `atomic-segmented-facet` displays a horizontal facet of the results for the current query.\n * @part segmented-container - The container that holds the segmented facets.\n * @part label - The facet value label.\n * @part values - The facet values container.\n * @part value-box - The facet value.\n * @part value-box-selected - The selected facet value.\n * @part placeholder - The placeholder displayed when the facet is loading.\n */\n@Component({\n  tag: 'atomic-segmented-facet',\n  styleUrl: 'atomic-segmented-facet.pcss',\n  shadow: true,\n})\nexport class AtomicSegmentedFacet implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  public searchStatus!: SearchStatus;\n  public tabManager!: TabManager;\n  @State()\n  public searchStatusState!: SearchStatusState;\n  @BindStateToController('tabManager')\n  @State()\n  public tabManagerState!: TabManagerState;\n  @BindStateToController('facet')\n  @State()\n  public facetState!: FacetState;\n  public facet!: Facet;\n  @State() public error!: Error;\n\n  /**\n   * Specifies a unique identifier for the facet.\n   */\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\n  /**\n   * The field whose values you want to display in the facet.\n   */\n  @Prop({reflect: true}) public field!: string;\n  /**\n   * The non-localized label for the facet.\n   * Used in the `atomic-breadbox` component through the bindings store.\n   */\n  @Prop({reflect: true}) public label?: string;\n  /**\n   * The tabs on which the facet can be displayed. This property should not be used at the same time as `tabs-excluded`.\n   *\n   * Set this property as a stringified JSON array, e.g.,\n   * ```html\n   *  <atomic-timeframe-facet tabs-included='[\"tabIDA\", \"tabIDB\"]'></atomic-timeframe-facet>\n   * ```\n   * If you don't set this property, the facet can be displayed on any tab. Otherwise, the facet can only be displayed on the specified tabs.\n   */\n  @ArrayProp()\n  @Prop({reflect: true, mutable: true})\n  public tabsIncluded: string[] | string = '[]';\n\n  /**\n   * The tabs on which this facet must not be displayed. This property should not be used at the same time as `tabs-included`.\n   *\n   * Set this property as a stringified JSON array, e.g.,\n   * ```html\n   *  <atomic-timeframe-facet tabs-excluded='[\"tabIDA\", \"tabIDB\"]'></atomic-timeframe-facet>\n   * ```\n   * If you don't set this property, the facet can be displayed on any tab. Otherwise, the facet won't be displayed on any of the specified tabs.\n   */\n  @ArrayProp()\n  @Prop({reflect: true, mutable: true})\n  public tabsExcluded: string[] | string = '[]';\n\n  /**\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\n   *\n   *\n   * Note: Resulting count is only an estimation, in some cases this value could be incorrect.\n   */\n  @Prop({reflect: true}) public filterFacetCount = true;\n  /**\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\n   * Note: A high injectionDepth may negatively impact the facet request performance.\n   * Minimum: `0`\n   * Default: `1000`\n   */\n  @Prop() public injectionDepth = 1000;\n  /**\n   * The number of values to request for this facet.\n   * Also determines the number of additional values to request each time more values are shown.\n   */\n  @Prop({reflect: true}) public numberOfValues = 6;\n  /**\n   * The sort criterion to apply to the returned facet values.\n   * Possible values are 'score', 'alphanumeric', 'alphanumericDescending', 'occurrences', alphanumericNatural', 'alphanumericNaturalDescending' and 'automatic'.\n   */\n  @Prop({reflect: true}) public sortCriteria: FacetSortCriterion = 'automatic';\n\n  /**\n   * The required facets and values for this facet to be displayed.\n   * Examples:\n   * ```html\n   * <atomic-segmented-facet facet-id=\"abc\" field=\"objecttype\" ...></atomic-segmented-facet>\n   *\n   * <!-- To show the facet when any value is selected in the facet with id \"abc\": -->\n   * <atomic-segmented-facet\n   *   depends-on-abc\n   *   ...\n   * ></atomic-segmented-facet>\n   *\n   * <!-- To show the facet when value \"doc\" is selected in the facet with id \"abc\": -->\n   * <atomic-facet\n   *   depends-on-abc=\"doc\"\n   *   ...\n   * ></atomic-segmented-facet>\n   * ```\n   */\n  @MapProp() @Prop() public dependsOn: Record<string, string> = {};\n  /**\n   * Specifies an explicit list of `allowedValues` in the Search API request. This list is in the form of a JSON string.\n   *\n   * If you specify a list of values for this option, the facet only uses these values (if they are available in\n   * the current result set).\n   *\n   * Example:\n   *\n   * The following facet only uses the `Contact`, `Account`, and `File` values of the `objecttype` field. Even if the\n   * current result set contains other `objecttype` values, such as `Message` or `Product`, the facet does not use\n   * them.\n   *\n   * ```html\n   * <atomic-segmented-facet field=\"objecttype\" allowed-values='[\"Contact\",\"Account\",\"File\"]'></atomic-segmented-facet>\n   * ```\n   *\n   * The maximum amount of allowed values is 25.\n   *\n   * The default value is `undefined`, and the facet uses all available values for its `field` in the current result set.\n   */\n  @ArrayProp()\n  @Prop({mutable: true})\n  public allowedValues: string[] | string = '[]';\n\n  /**\n   * Identifies the facet values that must appear at the top, in this order.\n   * This parameter can be used in conjunction with the `sortCriteria` parameter.\n   *\n   * Facet values not part of the `customSort` list will be sorted according to the `sortCriteria`.\n   *\n   * Example:\n   *\n   * The following facet will sort the `Contact`, `Account`, and `File` values at the top of the list for the `objecttype` field.\n   *\n   * If there are more than these 3 values available, the rest of the list will be sorted using `occurrences`.\n   *\n   * ```html\n   * <atomic-segmented-facet field=\"objecttype\" custom-sort='[\"Contact\",\"Account\",\"File\"]' sort-criteria='occurrences'></atomic-segmented-facet>\n   * ```\n   * The maximum amount of custom sort values is 25.\n   *\n   * The default value is `undefined`, and the facet values will be sorted using only the `sortCriteria`.\n   */\n  @ArrayProp()\n  @Prop({mutable: true})\n  public customSort: string[] | string = '[]';\n\n  private dependenciesManager!: FacetConditionsManager;\n\n  public initialize() {\n    if (\n      [...this.tabsIncluded].length > 0 &&\n      [...this.tabsExcluded].length > 0\n    ) {\n      console.warn(\n        'Values for both \"tabs-included\" and \"tabs-excluded\" have been provided. This is could lead to unexpected behaviors.'\n      );\n    }\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\n    this.tabManager = buildTabManager(this.bindings.engine);\n\n    this.facet = buildFacet(this.bindings.engine, {options: this.facetOptions});\n    this.facetId = this.facet.state.facetId;\n    this.dependenciesManager = buildFacetConditionsManager(\n      this.bindings.engine,\n      {\n        facetId: this.facetId!,\n        conditions: parseDependsOn<\n          FacetValueRequest | CategoryFacetValueRequest\n        >(this.dependsOn),\n      }\n    );\n  }\n\n  disconnectedCallback() {\n    this.dependenciesManager.stopWatching();\n  }\n\n  private renderValuesContainer(children: VNode[]) {\n    const classes = 'box-container flex h-10';\n    return (\n      <FacetValuesGroup i18n={this.bindings.i18n} label={this.label}>\n        <ul class={classes} part=\"values\">\n          {children}\n        </ul>\n      </FacetValuesGroup>\n    );\n  }\n\n  private renderValue(facetValue: FacetValue, onClick: () => void) {\n    const displayValue = getFieldValueCaption(\n      this.field,\n      facetValue.value,\n      this.bindings.i18n\n    );\n    const isSelected = facetValue.state !== 'idle';\n\n    return (\n      <FacetSegmentedValue\n        displayValue={displayValue}\n        numberOfResults={facetValue.numberOfResults}\n        isSelected={isSelected}\n        i18n={this.bindings.i18n}\n        onClick={onClick}\n        searchQuery={this.facetState.facetSearch.query}\n      ></FacetSegmentedValue>\n    );\n  }\n\n  private renderValues() {\n    return this.renderValuesContainer(\n      this.facetState.values.map((value) =>\n        this.renderValue(value, () => this.facet.toggleSingleSelect(value))\n      )\n    );\n  }\n\n  private renderLabel() {\n    if (!this.label) {\n      return;\n    }\n    return (\n      <b class=\"mr-2\" part=\"label\">\n        {this.label}:\n      </b>\n    );\n  }\n\n  private get facetOptions(): FacetOptions {\n    return {\n      facetId: this.facetId,\n      field: this.field,\n      numberOfValues: this.numberOfValues,\n      sortCriteria: this.sortCriteria,\n      facetSearch: {numberOfValues: this.numberOfValues},\n      filterFacetCount: this.filterFacetCount,\n      injectionDepth: this.injectionDepth,\n      hasBreadcrumbs: false,\n      allowedValues: this.allowedValues.length\n        ? [...this.allowedValues]\n        : undefined,\n      customSort: this.customSort.length ? [...this.customSort] : undefined,\n      tabs: {\n        included: [...this.tabsIncluded],\n        excluded: [...this.tabsExcluded],\n      },\n    };\n  }\n\n  public render() {\n    if (this.searchStatus.state.hasError || !this.facet.state.enabled) {\n      return <Hidden></Hidden>;\n    }\n\n    if (!this.searchStatus.state.firstSearchExecuted) {\n      return (\n        <div\n          part=\"placeholder\"\n          aria-hidden\n          class=\"bg-neutral h-8 w-48 animate-pulse rounded\"\n        ></div>\n      );\n    }\n\n    if (!this.facetState.values.length) {\n      return <Hidden></Hidden>;\n    }\n\n    return (\n      <div\n        part=\"segmented-container\"\n        class=\"mr-2 flex h-10 items-center whitespace-nowrap\"\n      >\n        {this.renderLabel()}\n        {this.renderValues()}\n      </div>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}