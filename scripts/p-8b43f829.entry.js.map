{"version":3,"names":["TabGuard","tabsIncluded","tabsExcluded","activeTab","children","shouldDisplayOnCurrentTab","h","Hidden","Fragment","atomicResultListCss","AtomicResultListStyle0","AtomicResultList","this","loadingFlag","randomID","resultTemplateRegistered","isAppLoaded","templateHasError","display","density","imageSize","setRenderFunction","resultRenderingFunction","itemRenderingFunction","focusTarget","nextNewResultTarget","FocusTargetController","initialize","host","innerHTML","includes","console","warn","tabManager","buildTabManager","bindings","engine","resultList","buildResultList","resultsPerPage","buildResultsPerPage","itemTemplateProvider","ItemTemplateProvider","includeDefaultTemplate","templateElements","Array","from","querySelectorAll","getResultTemplateRegistered","getTemplateHasError","setResultTemplateRegistered","value","setTemplateHasError","resultListCommon","ItemListCommon","engineSubscribe","subscribe","getCurrentNumberOfItems","resultListState","results","length","getIsLoading","isLoading","nextNewItemTarget","store","createAppLoadedListener","watchTabManagerState","newValue","oldValue","unsetLoadingFlag","render","updateBreakpoints","listClasses","computeListDisplayClasses","key","tabManagerState","ItemListGuard","hasError","hasTemplate","firstRequestExecuted","firstSearchExecuted","hasItems","hasResults","DisplayWrapper","ResultsPlaceholdersGuard","displayPlaceholders","numberOfPlaceholders","resultsPerPageState","numberOfResults","ItemDisplayGuard","renderAsTable","renderAsGrid","renderAsList","getPropsForAtomicResult","result","interactiveResult","buildInteractiveResult","options","renderingFunction","getResultId","uniqueId","searchResponseId","content","getTemplateContent","linkContent","getLinkTemplateContent","getEmptyLinkTemplateContent","getItemListDisplayClasses","map","i","propsForAtomicResult","DisplayGrid","selectorForItem","item","setRef","element","setNewResultRef","firstItem","propsForTableColumns","templateContentForFirstItem","DisplayTable","logger","DisplayTableRow","rowIndex","DisplayTableData","renderItem","ref","part","__decorate","InitializeBindings","BindStateToController","ArrayProp"],"sources":["src/components/common/tabs/tab-guard.tsx","src/components/search/result-lists/atomic-result-list/atomic-result-list.pcss?tag=atomic-result-list&encapsulation=shadow","src/components/search/result-lists/atomic-result-list/atomic-result-list.tsx"],"sourcesContent":["import {Fragment, FunctionalComponent, h} from '@stencil/core';\nimport {shouldDisplayOnCurrentTab} from '../../../utils/tab-utils';\nimport {Hidden} from '../stencil-hidden';\n\ninterface TabGuardProps {\n  tabsIncluded: string | string[];\n  tabsExcluded: string | string[];\n  activeTab: string;\n}\n\nexport const TabGuard: FunctionalComponent<TabGuardProps> = (\n  {tabsIncluded, tabsExcluded, activeTab},\n  children\n) => {\n  if (\n    !shouldDisplayOnCurrentTab([...tabsIncluded], [...tabsExcluded], activeTab)\n  ) {\n    return <Hidden></Hidden>;\n  }\n  return <Fragment>{...children}</Fragment>;\n};\n","@import '../../../../global/global.pcss';\n@import '../../../common/item-list/styles/placeholders.pcss';\n@import '../../../common/item-list/styles/table-display.pcss';\n@import '../../../common/item-list/styles/list-display.pcss';\n@import '../../../common/item-list/styles/grid-display.pcss';\n\natomic-result:not(.hydrated) {\n  visibility: hidden;\n}\n","import {\n  ResultList,\n  ResultListState,\n  buildResultList,\n  ResultsPerPageState,\n  ResultsPerPage,\n  buildResultsPerPage,\n  buildInteractiveResult,\n  Result,\n  TabManager,\n  TabManagerState,\n  buildTabManager,\n} from '@coveo/headless';\nimport {Component, Element, State, Prop, Method, h, Watch} from '@stencil/core';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {ArrayProp} from '../../../../utils/props-utils';\nimport {FocusTargetController} from '../../../../utils/stencil-accessibility-utils';\nimport {randomID} from '../../../../utils/utils';\nimport {ResultsPlaceholdersGuard} from '../../../common/atomic-result-placeholder/stencil-placeholders';\nimport {createAppLoadedListener} from '../../../common/interface/store';\nimport {ItemDisplayGuard} from '../../../common/item-list/item-display-guard';\nimport {ItemListGuard} from '../../../common/item-list/item-list-guard';\nimport {ItemTemplateProvider} from '../../../common/item-list/item-template-provider';\nimport {DisplayGrid} from '../../../common/item-list/stencil-display-grid';\nimport {\n  DisplayTableData,\n  DisplayTable,\n  DisplayTableRow,\n} from '../../../common/item-list/stencil-display-table';\nimport {DisplayWrapper} from '../../../common/item-list/stencil-display-wrapper';\nimport {\n  ItemListCommon,\n  ItemRenderingFunction,\n} from '../../../common/item-list/stencil-item-list-common';\nimport {\n  ItemDisplayDensity,\n  ItemDisplayImageSize,\n  ItemDisplayLayout,\n  getItemListDisplayClasses,\n} from '../../../common/layout/display-options';\nimport {TabGuard} from '../../../common/tabs/tab-guard';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\n\n/**\n * The `atomic-result-list` component is responsible for displaying query results by applying one or more result templates.\n *\n * @slot default - The default slot where the result templates are inserted.\n * @part result-list - The element containing every result of a result list\n * @part outline - The element displaying an outline or a divider around a result\n * @part result-list-grid-clickable-container - The parent of the result & the clickable link encompassing it, when results are displayed as a grid\n * @part result-list-grid-clickable - The clickable link encompassing the result when results are displayed as a grid\n * @part result-table - The element of the result table containing a heading and a body\n * @part result-table-heading - The element containing the row of cells in the result table's heading\n * @part result-table-heading-row - The element containing cells of the result table's heading\n * @part result-table-heading-cell - The element representing a cell of the result table's heading\n * @part result-table-body - The element containing the rows of the result table's body\n * @part result-table-row - The element containing the cells of a row in the result table's body\n * @part result-table-row-odd - The element containing the cells of an odd row in the result table's body\n * @part result-table-row-even - The element containing the cells of an even row in the result table's body\n * @part result-table-cell - The element representing a cell of the result table's body\n */\n@Component({\n  tag: 'atomic-result-list',\n  styleUrl: 'atomic-result-list.pcss',\n  shadow: true,\n})\nexport class AtomicResultList implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  public resultList!: ResultList;\n  public resultsPerPage!: ResultsPerPage;\n  private loadingFlag = randomID('firstResultLoaded-');\n  private itemRenderingFunction: ItemRenderingFunction;\n  private nextNewResultTarget?: FocusTargetController;\n  private itemTemplateProvider!: ItemTemplateProvider;\n  private resultListCommon!: ItemListCommon;\n\n  @Element() public host!: HTMLDivElement;\n\n  @BindStateToController('resultList')\n  @State()\n  private resultListState!: ResultListState;\n  @BindStateToController('resultsPerPage')\n  @State()\n  private resultsPerPageState!: ResultsPerPageState;\n  public tabManager!: TabManager;\n  @BindStateToController('tabManager')\n  @State()\n  public tabManagerState!: TabManagerState;\n  @State() private resultTemplateRegistered = false;\n  @State() public error!: Error;\n  @State() private isAppLoaded = false;\n\n  @State() private templateHasError = false;\n\n  /**\n   * The desired layout to use when displaying results. Layouts affect how many results to display per row and how visually distinct they are from each other.\n   */\n  @Prop({reflect: true}) public display: ItemDisplayLayout = 'list';\n  /**\n   * The spacing of various elements in the result list, including the gap between results, the gap between parts of a result, and the font sizes of different parts in a result.\n   */\n  @Prop({reflect: true}) public density: ItemDisplayDensity = 'normal';\n\n  /**\n   * The expected size of the image displayed in the results.\n   */\n  @Prop({reflect: true, mutable: true})\n  public imageSize: ItemDisplayImageSize = 'icon';\n\n  /**\n   * The tabs on which the result list can be displayed. This property should not be used at the same time as `tabs-excluded`.\n   *\n   * Set this property as a stringified JSON array, e.g.,\n   * ```html\n   *  <atomic-result-list tabs-included='[\"tabIDA\", \"tabIDB\"]'></atomic-result-list snippet>\n   * ```\n   * If you don't set this property, the result list can be displayed on any tab. Otherwise, the result list can only be displayed on the specified tabs.\n   */\n  @ArrayProp()\n  @Prop({reflect: true, mutable: true})\n  public tabsIncluded: string[] | string = '[]';\n\n  /**\n   * The tabs on which this result list must not be displayed. This property should not be used at the same time as `tabs-included`.\n   *\n   * Set this property as a stringified JSON array, e.g.,\n   * ```html\n   *  <atomic-result-list tabs-excluded='[\"tabIDA\", \"tabIDB\"]'></atomic-result-list>\n   * ```\n   * If you don't set this property, the result list can be displayed on any tab. Otherwise, the result list won't be displayed on any of the specified tabs.\n   */\n  @ArrayProp()\n  @Prop({reflect: true, mutable: true})\n  public tabsExcluded: string[] | string = '[]';\n\n  /**\n   * Sets a rendering function to bypass the standard HTML template mechanism for rendering results.\n   * You can use this function while working with web frameworks that don't use plain HTML syntax, e.g., React, Angular or Vue.\n   *\n   * Do not use this method if you integrate Atomic in a plain HTML deployment.\n   *\n   * @param resultRenderingFunction\n   */\n  @Method() public async setRenderFunction(\n    resultRenderingFunction: ItemRenderingFunction\n  ) {\n    this.itemRenderingFunction = resultRenderingFunction;\n  }\n\n  public get focusTarget() {\n    if (!this.nextNewResultTarget) {\n      this.nextNewResultTarget = new FocusTargetController(this);\n    }\n    return this.nextNewResultTarget;\n  }\n\n  public initialize() {\n    if (this.host.innerHTML.includes('<atomic-result-children')) {\n      console.warn(\n        'Folded results will not render any children for the \"atomic-result-list\". Please use \"atomic-folded-result-list\" instead.'\n      );\n    }\n    this.tabManager = buildTabManager(this.bindings.engine);\n    this.resultList = buildResultList(this.bindings.engine);\n    this.resultsPerPage = buildResultsPerPage(this.bindings.engine);\n    this.itemTemplateProvider = new ItemTemplateProvider({\n      includeDefaultTemplate: true,\n      templateElements: Array.from(\n        this.host.querySelectorAll('atomic-result-template')\n      ),\n      getResultTemplateRegistered: () => this.resultTemplateRegistered,\n      getTemplateHasError: () => this.templateHasError,\n      setResultTemplateRegistered: (value: boolean) => {\n        this.resultTemplateRegistered = value;\n      },\n      setTemplateHasError: (value: boolean) => {\n        this.templateHasError = value;\n      },\n      bindings: this.bindings,\n    });\n\n    this.resultListCommon = new ItemListCommon({\n      engineSubscribe: this.bindings.engine.subscribe,\n      getCurrentNumberOfItems: () => this.resultListState.results.length,\n      getIsLoading: () => this.resultListState.isLoading,\n      host: this.host,\n      loadingFlag: this.loadingFlag,\n      nextNewItemTarget: this.focusTarget,\n      store: this.bindings.store,\n    });\n    createAppLoadedListener(this.bindings.store, (isAppLoaded) => {\n      this.isAppLoaded = isAppLoaded;\n    });\n  }\n\n  @Watch('tabManagerState')\n  watchTabManagerState(\n    newValue: {activeTab: string},\n    oldValue: {activeTab: string}\n  ) {\n    if (newValue?.activeTab !== oldValue?.activeTab) {\n      this.bindings.store.unsetLoadingFlag(this.loadingFlag);\n    }\n  }\n\n  public render() {\n    this.resultListCommon.updateBreakpoints();\n    const listClasses = this.computeListDisplayClasses();\n\n    return (\n      <TabGuard\n        tabsIncluded={this.tabsIncluded}\n        tabsExcluded={this.tabsExcluded}\n        activeTab={this.tabManagerState.activeTab}\n      >\n        <ItemListGuard\n          hasError={this.resultListState.hasError}\n          hasTemplate={this.resultTemplateRegistered}\n          templateHasError={this.itemTemplateProvider.hasError}\n          firstRequestExecuted={this.resultListState.firstSearchExecuted}\n          hasItems={this.resultListState.hasResults}\n        >\n          <DisplayWrapper display={this.display} listClasses={listClasses}>\n            <ResultsPlaceholdersGuard\n              density={this.density}\n              display={this.display}\n              imageSize={this.imageSize}\n              displayPlaceholders={!this.isAppLoaded}\n              numberOfPlaceholders={this.resultsPerPageState.numberOfResults}\n            ></ResultsPlaceholdersGuard>\n            <ItemDisplayGuard\n              firstRequestExecuted={this.resultListState.firstSearchExecuted}\n              hasItems={this.resultListState.hasResults}\n            >\n              {this.display === 'table'\n                ? this.renderAsTable()\n                : this.display === 'grid'\n                  ? this.renderAsGrid()\n                  : this.renderAsList()}\n            </ItemDisplayGuard>\n          </DisplayWrapper>\n        </ItemListGuard>\n      </TabGuard>\n    );\n  }\n\n  private getPropsForAtomicResult(result: Result) {\n    return {\n      interactiveResult: buildInteractiveResult(this.bindings.engine, {\n        options: {result},\n      }),\n      result,\n      renderingFunction: this.itemRenderingFunction,\n      loadingFlag: this.loadingFlag,\n      key: this.resultListCommon.getResultId(\n        result.uniqueId,\n        this.resultListState.searchResponseId,\n        this.density,\n        this.imageSize\n      ),\n      content: this.itemTemplateProvider.getTemplateContent(result),\n      linkContent:\n        this.display === 'grid'\n          ? this.itemTemplateProvider.getLinkTemplateContent(result)\n          : this.itemTemplateProvider.getEmptyLinkTemplateContent(),\n      store: this.bindings.store,\n      density: this.density,\n      imageSize: this.imageSize,\n      display: this.display,\n    };\n  }\n\n  private computeListDisplayClasses() {\n    const displayPlaceholders = !this.isAppLoaded;\n\n    return getItemListDisplayClasses(\n      this.display,\n      this.density,\n      this.imageSize,\n      this.resultListState.firstSearchExecuted &&\n        this.resultListState.isLoading,\n      displayPlaceholders\n    );\n  }\n\n  private renderAsGrid() {\n    return this.resultListState.results.map((result, i) => {\n      const propsForAtomicResult = this.getPropsForAtomicResult(result);\n      return (\n        <DisplayGrid\n          selectorForItem=\"atomic-result\"\n          item={result}\n          {...propsForAtomicResult.interactiveResult}\n          setRef={(element) =>\n            element && this.resultListCommon.setNewResultRef(element, i)\n          }\n        >\n          <atomic-result {...this} {...propsForAtomicResult}></atomic-result>\n        </DisplayGrid>\n      );\n    });\n  }\n\n  private renderAsTable() {\n    if (!this.resultListState.hasResults) {\n      return;\n    }\n    const listClasses = this.computeListDisplayClasses();\n    const firstItem = this.resultListState.results[0];\n\n    const propsForTableColumns = {\n      firstItem,\n      templateContentForFirstItem:\n        this.itemTemplateProvider.getTemplateContent(firstItem),\n    };\n\n    return (\n      <DisplayTable\n        {...propsForTableColumns}\n        listClasses={listClasses}\n        logger={this.bindings.engine.logger}\n        itemRenderingFunction={this.itemRenderingFunction}\n        host={this.host}\n      >\n        {this.resultListState.results.map((result, i) => {\n          const propsForAtomicResult = this.getPropsForAtomicResult(result);\n          return (\n            <DisplayTableRow\n              {...propsForAtomicResult}\n              rowIndex={i}\n              setRef={(element) =>\n                element && this.resultListCommon.setNewResultRef(element, i)\n              }\n            >\n              <DisplayTableData\n                {...propsForTableColumns}\n                {...propsForAtomicResult}\n                renderItem={(content) => {\n                  return (\n                    <atomic-result\n                      {...propsForAtomicResult}\n                      content={content}\n                    ></atomic-result>\n                  );\n                }}\n              ></DisplayTableData>\n            </DisplayTableRow>\n          );\n        })}\n      </DisplayTable>\n    );\n  }\n\n  private renderAsList() {\n    return this.resultListState.results.map((result, i) => {\n      const propsForAtomicResult = this.getPropsForAtomicResult(result);\n      return (\n        <atomic-result\n          {...propsForAtomicResult}\n          ref={(element) =>\n            element && this.resultListCommon.setNewResultRef(element, i)\n          }\n          part=\"outline\"\n        ></atomic-result>\n      );\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]}