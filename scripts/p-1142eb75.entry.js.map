{"version":3,"names":["atomicInsightNumericFacetCss","AtomicInsightNumericFacetStyle0","AtomicInsightNumericFacet","this","manualRanges","formatter","defaultNumberFormatter","label","numberOfValues","sortCriteria","rangeAlgorithm","displayValuesAs","isCollapsed","headingLevel","filterFacetCount","injectionDepth","dependsOn","initialize","validateProps","computeFacetId","initializeFacetForInput","initializeFacetForRange","initializeFilter","initializeDependenciesManager","initializeSearchStatus","registerFacetToStore","focusTarget","headerFocus","FocusTargetController","disconnectedCallback","host","isConnected","dependenciesManager","stopWatching","withInput","facetForInput","buildInsightNumericFacet","bindings","engine","options","facetId","generateAutomaticRanges","field","Array","from","querySelectorAll","map","start","end","endInclusive","buildInsightNumericRange","facetForRange","currentValues","length","filter","buildInsightNumericFilter","buildInsightFacetConditionsManager","state","conditions","parseDependsOn","searchStatus","buildInsightSearchStatus","facetInfo","i18n","t","element","isHidden","store","registerFacet","format","value","formatHumanReadable","facetValue","logger","initializePopover","hasValues","numberOfActiveValues","numberOfSelectedValues","numericFacets","setFormat","event","preventDefault","stopPropagation","detail","applyNumberInput","dispatch","loadInsightNumericFacetSetActions","deselectAllNumericFacetValues","render","searchStatusState","firstSearchExecuted","hasError","h","FacetGuard","key","enabled","hasResults","shouldRenderFacet","FacetContainer","FacetHeader","onClearFilters","focusAfterSearch","filterState","range","clear","deselectAll","onToggleCollapse","headerRef","el","setTarget","shouldRenderValues","renderValues","shouldRenderInput","type","FacetPlaceholder","NumericFacetValuesContainer","valuesToRender","NumericFacetValueLink","onClick","toggleSingleSelect","toggleSelect","values","hasInputRange","numberOfResults","shouldDisplayInputForFacetRange","facetValues","hasInput","randomID","facetState","Schema","StringValue","constrainTo","validate","__decorate","InitializeBindings","BindStateToController","MapProp"],"sources":["src/components/insight/atomic-insight-numeric-facet/atomic-insight-numeric-facet.pcss?tag=atomic-insight-numeric-facet&encapsulation=shadow","src/components/insight/atomic-insight-numeric-facet/atomic-insight-numeric-facet.tsx"],"sourcesContent":["@import '../../common/facets/numeric-facet-common.pcss';\n","import {Schema, StringValue} from '@coveo/bueno';\nimport {\n  buildFacetConditionsManager as buildInsightFacetConditionsManager,\n  buildNumericFacet as buildInsightNumericFacet,\n  buildNumericFilter as buildInsightNumericFilter,\n  buildNumericRange as buildInsightNumericRange,\n  buildSearchStatus as buildInsightSearchStatus,\n  CategoryFacetValueRequest as InsightCategoryFacetValueRequest,\n  FacetConditionsManager as InsightFacetConditionsManager,\n  FacetValueRequest as InsightFacetValueRequest,\n  NumericFacet as InsightNumericFacet,\n  NumericFacetState as InsightNumericFacetState,\n  NumericFilter as InsightNumericFilter,\n  NumericFilterState as InsightNumericFilterState,\n  NumericRangeRequest as InsightNumericRangeRequest,\n  RangeFacetRangeAlgorithm as InsightRangeFacetRangeAlgorithm,\n  RangeFacetSortCriterion as InsightRangeFacetSortCriterion,\n  SearchStatus as InsightSearchStatus,\n  SearchStatusState as InsightSearchStatusState,\n  loadNumericFacetSetActions as loadInsightNumericFacetSetActions,\n} from '@coveo/headless/insight';\nimport {Component, Element, h, Listen, Prop, State} from '@stencil/core';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {MapProp} from '../../../utils/props-utils';\nimport {FocusTargetController} from '../../../utils/stencil-accessibility-utils';\nimport {randomID} from '../../../utils/utils';\nimport {parseDependsOn} from '../../common/facets/depends-on';\nimport {FacetInfo} from '../../common/facets/facet-common-store';\nimport {FacetContainer} from '../../common/facets/facet-container/stencil-facet-container';\nimport {FacetGuard} from '../../common/facets/facet-guard';\nimport {FacetHeader} from '../../common/facets/facet-header/stencil-facet-header';\nimport {NumberInputType} from '../../common/facets/facet-number-input/number-input-type';\nimport {FacetPlaceholder} from '../../common/facets/facet-placeholder/facet-placeholder';\nimport {formatHumanReadable} from '../../common/facets/numeric-facet/formatter';\nimport {NumericFacetValueLink} from '../../common/facets/numeric-facet/value-link';\nimport {NumericFacetValuesContainer} from '../../common/facets/numeric-facet/values-container';\nimport {initializePopover} from '../../common/facets/popover/popover-type';\nimport {shouldDisplayInputForFacetRange} from '../../common/facets/stencil-facet-common';\nimport {\n  defaultNumberFormatter,\n  NumberFormatter,\n} from '../../common/formats/format-common';\nimport {InsightBindings} from '../atomic-insight-interface/atomic-insight-interface';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-numeric-facet',\n  styleUrl: './atomic-insight-numeric-facet.pcss',\n  shadow: true,\n})\nexport class AtomicInsightNumericFacet\n  implements InitializableComponent<InsightBindings>\n{\n  @InitializeBindings() public bindings!: InsightBindings;\n  public facetForRange?: InsightNumericFacet;\n  public facetForInput?: InsightNumericFacet;\n  public filter?: InsightNumericFilter;\n  public searchStatus!: InsightSearchStatus;\n  private manualRanges: (InsightNumericRangeRequest & {label?: string})[] = [];\n  private dependenciesManager?: InsightFacetConditionsManager;\n\n  @Element() private host!: HTMLElement;\n  private formatter: NumberFormatter = defaultNumberFormatter;\n  @BindStateToController('facetForRange')\n  @State()\n  public facetState!: InsightNumericFacetState;\n  @BindStateToController('filter')\n  @State()\n  public filterState?: InsightNumericFilterState;\n  @BindStateToController('searchStatus')\n  @State()\n  public searchStatusState!: InsightSearchStatusState;\n  @State() public error!: Error;\n  @BindStateToController('facetForInput')\n  @State()\n  public facetForInputState?: InsightNumericFacetState;\n\n  /**\n   * Specifies a unique identifier for the facet.\n   */\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\n  /**\n   * The non-localized label for the facet.\n   * Used in the `atomic-breadbox` component through the bindings store.\n   */\n  @Prop({reflect: true}) public label = 'no-label';\n  /**\n   * The field whose values you want to display in the facet.\n   */\n  @Prop({reflect: true}) public field!: string;\n  /**\n   * The number of values to request for this facet, when there are no manual ranges.\n   * If the number of values is 0, no ranges will be displayed.\n   */\n  @Prop({reflect: true}) public numberOfValues = 8;\n  /**\n   * Whether this facet should contain an input allowing users to set custom ranges.\n   * Depending on the field, the input can allow either decimal or integer values.\n   */\n  @Prop({reflect: true}) public withInput?: NumberInputType;\n  /**\n   * The sort criterion to apply to the returned facet values.\n   * Possible values are 'ascending' and 'descending'.\n   */\n  @Prop({reflect: true}) public sortCriteria: InsightRangeFacetSortCriterion =\n    'ascending';\n  /**\n   * The algorithm that's used for generating the ranges of this facet when they aren't manually defined. The default value of `\"equiprobable\"` generates facet ranges which vary in size but have a more balanced number of results within each range. The value of `\"even\"` generates equally sized facet ranges across all of the results.\n   */\n  @Prop({reflect: true})\n  public rangeAlgorithm: InsightRangeFacetRangeAlgorithm = 'equiprobable';\n  /**\n   * Whether to display the facet values as checkboxes (multiple selection) or links (single selection).\n   * Possible values are 'checkbox' and 'link'.\n   */\n  @Prop({reflect: true}) public displayValuesAs: 'checkbox' | 'link' =\n    'checkbox';\n  /**\n   * Specifies if the facet is collapsed.\n   */\n  @Prop({reflect: true, mutable: true}) public isCollapsed = false;\n  /**\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.\n   */\n  @Prop({reflect: true}) public headingLevel = 0;\n  /**\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\n   *\n   *\n   * Note: Resulting count is only an estimation, in some cases this value could be incorrect.\n   */\n  @Prop({reflect: true}) public filterFacetCount = true;\n  /**\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\n   * Note: A high injectionDepth may negatively impact the facet request performance.\n   * Minimum: `0`\n   * Default: `1000`\n   */\n  @Prop({reflect: true}) public injectionDepth = 1000;\n\n  /**\n   * The required facets and values for this facet to be displayed.\n   * Examples:\n   * ```html\n   * <atomic-insight-facet facet-id=\"abc\" field=\"objecttype\" ...></atomic-insight-facet>\n   *\n   * <!-- To show the facet when any value is selected in the facet with id \"abc\": -->\n   * <atomic-insight-numeric-facet\n   *   depends-on-abc\n   *   ...\n   * ></atomic-insight-numeric-facet>\n   *\n   * <!-- To show the facet when value \"doc\" is selected in the facet with id \"abc\": -->\n   * <atomic-insight-numeric-facet\n   *   depends-on-abc=\"doc\"\n   *   ...\n   * ></atomic-insight-numeric-facet>\n   * ```\n   */\n  @MapProp() @Prop() public dependsOn: Record<string, string> = {};\n\n  private headerFocus?: FocusTargetController;\n\n  public initialize() {\n    this.validateProps();\n    this.computeFacetId();\n    this.initializeFacetForInput();\n    this.initializeFacetForRange();\n    this.initializeFilter();\n    this.initializeDependenciesManager();\n    this.initializeSearchStatus();\n    this.registerFacetToStore();\n  }\n\n  private get focusTarget(): FocusTargetController {\n    if (!this.headerFocus) {\n      this.headerFocus = new FocusTargetController(this);\n    }\n    return this.headerFocus;\n  }\n\n  public disconnectedCallback() {\n    if (this.host.isConnected) {\n      return;\n    }\n    this.dependenciesManager?.stopWatching();\n  }\n\n  private initializeFacetForInput() {\n    if (!this.withInput) {\n      return;\n    }\n    this.facetForInput = buildInsightNumericFacet(this.bindings.engine, {\n      options: {\n        facetId: `${this.facetId}_input_range`,\n        numberOfValues: 1,\n        generateAutomaticRanges: true,\n        field: this.field,\n        sortCriteria: this.sortCriteria,\n        rangeAlgorithm: this.rangeAlgorithm,\n        filterFacetCount: this.filterFacetCount,\n        injectionDepth: this.injectionDepth,\n      },\n    });\n\n    return this.facetForInput;\n  }\n\n  private initializeFacetForRange() {\n    if (this.numberOfValues <= 0) {\n      return;\n    }\n\n    this.manualRanges = Array.from(\n      this.host.querySelectorAll('atomic-numeric-range')\n    ).map(({start, end, endInclusive, label}) => ({\n      ...buildInsightNumericRange({start, end, endInclusive}),\n      label,\n    }));\n\n    this.facetForRange = buildInsightNumericFacet(this.bindings.engine, {\n      options: {\n        facetId: this.facetId,\n        field: this.field,\n        numberOfValues: this.numberOfValues,\n        sortCriteria: this.sortCriteria,\n        rangeAlgorithm: this.rangeAlgorithm,\n        currentValues: this.manualRanges,\n        generateAutomaticRanges: !this.manualRanges.length,\n        filterFacetCount: this.filterFacetCount,\n        injectionDepth: this.injectionDepth,\n      },\n    });\n\n    return this.facetForRange;\n  }\n\n  private initializeFilter() {\n    if (!this.withInput) {\n      return;\n    }\n\n    this.filter = buildInsightNumericFilter(this.bindings.engine, {\n      options: {\n        facetId: `${this.facetId}_input`,\n        field: this.field,\n      },\n    });\n  }\n\n  private initializeDependenciesManager() {\n    this.dependenciesManager = buildInsightFacetConditionsManager(\n      this.bindings.engine,\n      {\n        facetId:\n          this.facetForRange?.state.facetId ?? this.filter!.state.facetId,\n        conditions: parseDependsOn<\n          InsightFacetValueRequest | InsightCategoryFacetValueRequest\n        >(this.dependsOn),\n      }\n    );\n  }\n\n  private initializeSearchStatus() {\n    this.searchStatus = buildInsightSearchStatus(this.bindings.engine);\n  }\n\n  private registerFacetToStore() {\n    const facetInfo: FacetInfo = {\n      label: () => this.bindings.i18n.t(this.label),\n      facetId: this.facetId!,\n      element: this.host,\n      isHidden: () => this.isHidden,\n    };\n\n    this.bindings.store.registerFacet('numericFacets', {\n      ...facetInfo,\n      format: (value) =>\n        formatHumanReadable({\n          facetValue: value,\n          logger: this.bindings.engine.logger,\n          i18n: this.bindings.i18n,\n          field: this.field,\n          manualRanges: this.manualRanges,\n          formatter: this.formatter,\n        }),\n    });\n\n    initializePopover(this.host, {\n      ...facetInfo,\n      hasValues: () => this.hasValues,\n      numberOfActiveValues: () => this.numberOfSelectedValues,\n    });\n\n    if (this.filter) {\n      this.bindings.store.state.numericFacets[this.filter.state.facetId] =\n        this.bindings.store.state.numericFacets[this.facetId!];\n    }\n  }\n\n  @Listen('atomic/numberFormat')\n  public setFormat(event: CustomEvent<NumberFormatter>) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.formatter = event.detail;\n  }\n\n  @Listen('atomic/numberInputApply')\n  public applyNumberInput() {\n    this.facetId &&\n      this.bindings.engine.dispatch(\n        loadInsightNumericFacetSetActions(\n          this.bindings.engine\n        ).deselectAllNumericFacetValues(this.facetId)\n      );\n  }\n\n  public render() {\n    const {\n      searchStatusState: {firstSearchExecuted, hasError},\n      bindings: {i18n},\n      label,\n      numberOfSelectedValues,\n      isCollapsed,\n      headingLevel,\n      focusTarget,\n      withInput,\n      filter,\n    } = this;\n    return (\n      <FacetGuard\n        enabled={this.enabled}\n        firstSearchExecuted={firstSearchExecuted}\n        hasError={hasError}\n        hasResults={this.shouldRenderFacet}\n      >\n        {firstSearchExecuted ? (\n          <FacetContainer>\n            <FacetHeader\n              i18n={i18n}\n              label={label}\n              onClearFilters={() => {\n                focusTarget.focusAfterSearch();\n                if (this.filterState?.range) {\n                  this.filter?.clear();\n                  return;\n                }\n                this.facetForRange?.deselectAll();\n              }}\n              numberOfActiveValues={numberOfSelectedValues}\n              isCollapsed={isCollapsed}\n              headingLevel={headingLevel}\n              onToggleCollapse={() => (this.isCollapsed = !this.isCollapsed)}\n              headerRef={(el) => focusTarget.setTarget(el)}\n            />\n            {!isCollapsed && [\n              this.shouldRenderValues && this.renderValues(),\n              this.shouldRenderInput && (\n                <atomic-facet-number-input\n                  type={withInput!}\n                  bindings={this.bindings}\n                  label={label}\n                  filter={filter!}\n                  filterState={filter!.state}\n                ></atomic-facet-number-input>\n              ),\n            ]}\n          </FacetContainer>\n        ) : (\n          <FacetPlaceholder\n            isCollapsed={this.isCollapsed}\n            numberOfValues={this.numberOfValues}\n          />\n        )}\n      </FacetGuard>\n    );\n  }\n\n  private renderValues() {\n    const {\n      displayValuesAs,\n      field,\n      manualRanges,\n      label,\n      bindings: {\n        i18n,\n        engine: {logger},\n      },\n    } = this;\n\n    return (\n      <NumericFacetValuesContainer i18n={i18n} label={label}>\n        {this.valuesToRender.map((value) => (\n          <NumericFacetValueLink\n            formatter={this.formatter}\n            displayValuesAs={displayValuesAs}\n            facetValue={value}\n            field={field}\n            i18n={i18n}\n            logger={logger}\n            manualRanges={manualRanges}\n            onClick={() =>\n              this.displayValuesAs === 'link'\n                ? this.facetForRange!.toggleSingleSelect(value)\n                : this.facetForRange!.toggleSelect(value)\n            }\n          />\n        ))}\n      </NumericFacetValuesContainer>\n    );\n  }\n\n  private get numberOfSelectedValues() {\n    if (this.filter?.state.range) {\n      return 1;\n    }\n\n    return (\n      this.facetForRange?.state.values.filter(({state}) => state === 'selected')\n        .length || 0\n    );\n  }\n\n  private get shouldRenderValues() {\n    return (\n      !this.hasInputRange &&\n      this.numberOfValues > 0 &&\n      !!this.valuesToRender.length\n    );\n  }\n\n  private get hasInputRange() {\n    return !!this.filter?.state.range;\n  }\n\n  private get valuesToRender() {\n    return (\n      this.facetForRange?.state.values.filter(\n        (value) => value.numberOfResults || value.state !== 'idle'\n      ) || []\n    );\n  }\n\n  private get shouldRenderInput() {\n    return shouldDisplayInputForFacetRange({\n      hasInputRange: this.hasInputRange,\n      searchStatusState: this.searchStatusState,\n      facetValues: this.facetForInput?.state.values || [],\n      hasInput: !!this.withInput,\n    });\n  }\n\n  private computeFacetId() {\n    if (this.facetId) {\n      return;\n    }\n\n    if (this.bindings.store.state.numericFacets[this.field]) {\n      this.facetId = randomID(`${this.field}_`);\n    }\n\n    this.facetId = this.field;\n  }\n\n  private get isHidden() {\n    return !this.shouldRenderFacet || !this.facetState.enabled;\n  }\n\n  private get shouldRenderFacet() {\n    return this.shouldRenderInput || this.shouldRenderValues;\n  }\n\n  private get hasValues() {\n    if (this.facetForInput?.state.values.length) {\n      return true;\n    }\n\n    return !!this.valuesToRender.length;\n  }\n\n  private get enabled() {\n    return this.facetState?.enabled ?? this.filter?.state.enabled ?? true;\n  }\n\n  private validateProps() {\n    new Schema({\n      displayValuesAs: new StringValue({constrainTo: ['checkbox', 'link']}),\n      withInput: new StringValue({constrainTo: ['integer', 'decimal']}),\n    }).validate({\n      displayValuesAs: this.displayValuesAs,\n      withInput: this.withInput,\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]}