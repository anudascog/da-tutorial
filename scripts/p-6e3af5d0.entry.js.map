{"version":3,"names":["AtomicProductTemplate","constructor","hostRef","this","conditions","mustMatch","mustNotMatch","connectedCallback","productTemplateCommon","ProductTemplateCommon","host","setError","err","error","validParents","allowEmpty","componentWillLoad","matchConditions","makeMatchConditions","getTemplate","render","renderIfError","__decorate","MapProp","splitValues"],"sources":["src/components/commerce/atomic-product-template/atomic-product-template.tsx"],"sourcesContent":["import {\n  ProductTemplate,\n  ProductTemplateCondition,\n} from '@coveo/headless/commerce';\nimport {Component, Element, Prop, Method, State} from '@stencil/core';\nimport {MapProp} from '../../../utils/props-utils';\nimport {\n  makeMatchConditions,\n  ProductTemplateCommon,\n} from '../../common/product-template/stencil-product-template-common';\n\n/**\n * @alpha\n * * A product template determines the format of the query results, depending on the conditions that are defined for each template.\n *\n * A `template` element must be the child of an `atomic-product-template`. Furthermore, an `atomic-commerce-product-list`, `atomic-commerce-recommendation-list`, or `atomic-commerce-search-box-instant-products` must be the parent of each `atomic-product-template`.\n *\n * **Note:** Any `<script>` tags that are defined inside a `<template>` element will not be executed when the products are being rendered.\n * @MapProp name: mustMatch;attr: must-match;docs: The field and values that must be matched by a product item for the template to apply. For example, a template with the following attribute only applies to product items whose `filetype` is `lithiummessage` or `YouTubePlaylist`: `must-match-filetype=\"lithiummessage,YouTubePlaylist\"`;type: Record<string, string[]> ;default: {}\n * @MapProp name: mustNotMatch;attr: must-not-match;docs: The field and values that must not be matched by a product item for the template to apply. For example, a template with the following attribute only applies to product items whose `filetype` is not `lithiummessage`: `must-not-match-filetype=\"lithiummessage\";type: Record<string, string[]> ;default: {}\n * @slot default - The default slot where to insert the template element.\n * @slot link - A `template` element that contains a single `atomic-product-link` component.\n */\n@Component({\n  tag: 'atomic-product-template',\n  shadow: true,\n})\nexport class AtomicProductTemplate {\n  private productTemplateCommon!: ProductTemplateCommon;\n\n  @State() public error!: Error;\n\n  @Element() public host!: HTMLDivElement;\n\n  /**\n   * A function that must return true on products for the product template to apply.\n   * Set programmatically before initialization, not via attribute.\n   *\n   * For example, the following targets a template and sets a condition to make it apply only to products whose `ec_name` contains `singapore`:\n   * `document.querySelector('#target-template').conditions = [(product) => /singapore/i.test(product.ec_name)];`\n   */\n  @Prop() public conditions: ProductTemplateCondition[] = [];\n\n  /**\n   * The field and values that define which result items the condition must be applied to. For example, a template with the following attribute\n   * only applies to result items whose `filetype` is `lithiummessage` or `YouTubePlaylist`: `must-match-filetype=\"lithiummessage,YouTubePlaylist\"\n   * `;type: Record<string, string[]> ;default: {}\n   */\n  @Prop() @MapProp({splitValues: true}) public mustMatch: Record<\n    string,\n    string[]\n  > = {};\n\n  /**\n   * The field and values that define which result items the condition must not be applied to. For example, a template with the following attribute\n   * only applies to result items whose `filetype` is not `lithiummessage`: `must-not-match-filetype=\"lithiummessage\";type: Record<string, string[]> ;default: {}\n   */\n  @Prop() @MapProp({splitValues: true}) public mustNotMatch: Record<\n    string,\n    string[]\n  > = {};\n\n  constructor() {}\n\n  connectedCallback() {\n    this.productTemplateCommon = new ProductTemplateCommon({\n      host: this.host,\n      setError: (err) => {\n        this.error = err;\n      },\n      validParents: [\n        'atomic-commerce-product-list',\n        'atomic-commerce-recommendation-list',\n        'atomic-commerce-search-box-instant-products',\n      ],\n      allowEmpty: true,\n    });\n  }\n\n  public componentWillLoad() {\n    this.productTemplateCommon.matchConditions = makeMatchConditions(\n      this.mustMatch,\n      this.mustNotMatch\n    );\n  }\n\n  /**\n   * Gets the product template to apply based on the evaluated conditions.\n   */\n  @Method()\n  public async getTemplate(): Promise<ProductTemplate<DocumentFragment> | null> {\n    return this.productTemplateCommon.getTemplate(this.conditions, this.error);\n  }\n\n  public render() {\n    return this.productTemplateCommon.renderIfError(this.error);\n  }\n}\n"],"mappings":"ypBA2BaA,EAAqB,MAmChC,WAAAC,CAAAC,G,UArBeC,KAAAC,WAAyC,GAOXD,KAAAE,UAGzC,GAMyCF,KAAAG,aAGzC,G,qCAnBoD,G,eAUpD,G,kBASA,E,CAIJ,iBAAAC,GACEJ,KAAKK,sBAAwB,IAAIC,EAAsB,CACrDC,KAAMP,KAAKO,KACXC,SAAWC,IACTT,KAAKU,MAAQD,CAAG,EAElBE,aAAc,CACZ,+BACA,sCACA,+CAEFC,WAAY,M,CAIT,iBAAAC,GACLb,KAAKK,sBAAsBS,gBAAkBC,EAC3Cf,KAAKE,UACLF,KAAKG,a,CAQF,iBAAMa,GACX,OAAOhB,KAAKK,sBAAsBW,YAAYhB,KAAKC,WAAYD,KAAKU,M,CAG/D,MAAAO,GACL,OAAOjB,KAAKK,sBAAsBa,cAAclB,KAAKU,M,6BA/CVS,EAAA,CAApCC,EAAQ,CAACC,YAAa,Q,gCAScF,EAAA,CAApCC,EAAQ,CAACC,YAAa,Q","ignoreList":[]}