{"version":3,"names":["TimeframeFacetCommon","constructor","props","this","manualTimeframes","facetId","determineFacetId","setFacetId","getManualTimeframes","length","facetForDateRange","initializeFacetForDateRange","currentValues","withDatePicker","facetForDatePicker","initializeFacetForDatePicker","facetForDatePickerDependenciesManager","buildDependenciesManager","state","filter","initializeFilter","facetForDateRangeDependenciesManager","filterDependenciesManager","registerFacetToStore","bindings","store","dateFacets","field","randomID","enabled","valuesToRender","values","value","numberOfResults","shouldRenderValues","hasInputRange","shouldRenderFacet","shouldRenderInput","shouldDisplayInputForFacetRange","hasInput","searchStatusState","getSearchStatusState","facetValues","hasValues","numberOfSelectedValues","range","map","period","amount","unit","buildDateRange","start","end","disconnectedCallback","host","isConnected","stopWatching","isHidden","facetInfo","label","i18n","t","element","registerFacet","format","formatFacetValue","initializePopover","numberOfActiveValues","Array","from","querySelectorAll","facetValue","startDate","deserializeRelativeDate","relativeDate","timeframe","find","getFieldValueCaption","count","error","parseDate","renderValues","renderValuesContainer","renderValue","displayValue","isSelected","isExcluded","h","FacetValueLink","onClick","toggleSingleSelect","FacetValueLabelHighlight","children","FacetValuesGroup","class","part","renderHeader","isCollapsed","headerFocus","onToggleCollapse","FacetHeader","onClearFilters","focusAfterSearch","clear","deselectAll","headingLevel","headerRef","el","setTarget","renderDateInput","min","max","rangeGetter","rangeSetter","request","setRange","render","hasError","firstSearchExecuted","Hidden","FacetPlaceholder","numberOfValues","FacetContainer"],"sources":["src/components/common/facets/timeframe-facet-common.tsx"],"sourcesContent":["import {FocusTargetController} from '@/src/utils/stencil-accessibility-utils';\nimport {\n  DateFacet,\n  DateFacetValue,\n  DateFilter,\n  DateRangeOptions,\n  DateRangeRequest,\n  FacetConditionsManager,\n  RangeFacetSortCriterion,\n  RelativeDate,\n  RelativeDatePeriod,\n  RelativeDateUnit,\n  SearchStatusState,\n} from '@coveo/headless';\nimport {h, VNode} from '@stencil/core';\nimport {parseDate} from '../../../utils/date-utils';\nimport {getFieldValueCaption} from '../../../utils/field-utils';\nimport {randomID} from '../../../utils/utils';\nimport {InsightBindings} from '../../insight/atomic-insight-interface/atomic-insight-interface';\nimport {Bindings as SearchBindings} from '../../search/atomic-search-interface/atomic-search-interface';\nimport {Hidden} from '../stencil-hidden';\nimport {FacetInfo} from './facet-common-store';\nimport {FacetContainer} from './facet-container/stencil-facet-container';\nimport {FacetHeader} from './facet-header/stencil-facet-header';\nimport {FacetPlaceholder} from './facet-placeholder/facet-placeholder';\nimport {FacetValueLabelHighlight} from './facet-value-label-highlight/stencil-facet-value-label-highlight';\nimport {FacetValueLink} from './facet-value-link/stencil-facet-value-link';\nimport {FacetValuesGroup} from './facet-values-group/stencil-facet-values-group';\nimport {initializePopover} from './popover/popover-type';\nimport {shouldDisplayInputForFacetRange} from './stencil-facet-common';\n\nexport interface Timeframe {\n  period: RelativeDatePeriod;\n  unit?: RelativeDateUnit;\n  amount?: number;\n  label?: string;\n}\n\ninterface TimeframeFacetCommonOptions {\n  facetId?: string;\n  host: HTMLElement;\n  bindings: SearchBindings | InsightBindings;\n  label: string;\n  field: string;\n  headingLevel: number;\n  dependsOn: Record<string, string>;\n  withDatePicker: boolean;\n  setFacetId(id: string): string;\n  getSearchStatusState(): SearchStatusState;\n  buildDependenciesManager(facetId: string): FacetConditionsManager;\n  deserializeRelativeDate(date: string): RelativeDate;\n  buildDateRange(config: DateRangeOptions): DateRangeRequest;\n  initializeFacetForDatePicker(): DateFacet;\n  initializeFacetForDateRange(values: DateRangeRequest[]): DateFacet;\n  initializeFilter(): DateFilter;\n  min?: string;\n  max?: string;\n  sortCriteria: RangeFacetSortCriterion;\n}\n\ninterface TimeframeFacetCommonRenderProps {\n  hasError: boolean;\n  firstSearchExecuted: boolean;\n  isCollapsed: boolean;\n  headerFocus: FocusTargetController;\n  onToggleCollapse: () => boolean;\n}\n\nexport class TimeframeFacetCommon {\n  private facetId?: string;\n  private facetForDatePicker?: DateFacet;\n  private facetForDateRange?: DateFacet;\n  private filter?: DateFilter;\n  private manualTimeframes: Timeframe[] = [];\n  private facetForDateRangeDependenciesManager?: FacetConditionsManager;\n  private facetForDatePickerDependenciesManager?: FacetConditionsManager;\n  private filterDependenciesManager?: FacetConditionsManager;\n\n  constructor(private props: TimeframeFacetCommonOptions) {\n    this.facetId = this.determineFacetId;\n    this.props.setFacetId(this.facetId);\n\n    this.manualTimeframes = this.getManualTimeframes();\n\n    // Initialize two facets: One that is actually used to display values for end users, which only exists\n    // if we need to display something to the end user (ie: timeframes > 0)\n\n    // A second facet is initialized only to verify the results count. It is never used to display results to end user.\n    // It serves as a way to determine if the input should be rendered or not, independent of the ranges configured in the component\n    if (this.manualTimeframes.length > 0) {\n      this.facetForDateRange = this.props.initializeFacetForDateRange(\n        this.currentValues\n      );\n    }\n\n    if (this.props.withDatePicker) {\n      this.facetForDatePicker = this.props.initializeFacetForDatePicker();\n      this.facetForDatePickerDependenciesManager =\n        this.props.buildDependenciesManager(\n          this.facetForDatePicker.state.facetId\n        );\n      this.filter = this.props.initializeFilter();\n    }\n\n    if (this.facetForDateRange) {\n      this.facetForDateRangeDependenciesManager =\n        this.props.buildDependenciesManager(\n          this.facetForDateRange?.state.facetId\n        );\n    }\n\n    if (this.filter) {\n      this.filterDependenciesManager = this.props.buildDependenciesManager(\n        this.filter?.state.facetId\n      );\n    }\n\n    this.registerFacetToStore();\n  }\n\n  private get determineFacetId() {\n    if (this.props.facetId) {\n      return this.props.facetId;\n    }\n\n    if (this.props.bindings.store.state.dateFacets[this.props.field]) {\n      return randomID(`${this.props.field}_`);\n    }\n\n    return this.props.field;\n  }\n\n  private get enabled() {\n    return (\n      this.facetForDateRange?.state.enabled ??\n      this.filter?.state.enabled ??\n      true\n    );\n  }\n\n  private get valuesToRender() {\n    return (\n      this.facetForDateRange?.state.values.filter(\n        (value) => value.numberOfResults || value.state !== 'idle'\n      ) || []\n    );\n  }\n\n  private get shouldRenderValues() {\n    return !this.hasInputRange && !!this.valuesToRender.length;\n  }\n\n  private get shouldRenderFacet() {\n    return this.shouldRenderInput || this.shouldRenderValues;\n  }\n\n  private get shouldRenderInput() {\n    return shouldDisplayInputForFacetRange({\n      hasInput: this.props.withDatePicker,\n      hasInputRange: this.hasInputRange,\n      searchStatusState: this.props.getSearchStatusState(),\n      facetValues: this.facetForDatePicker?.state?.values || [],\n    });\n  }\n\n  private get hasValues() {\n    if (this.facetForDatePicker?.state.values.length) {\n      return true;\n    }\n\n    return !!this.valuesToRender.length;\n  }\n\n  private get numberOfSelectedValues() {\n    if (this.filter?.state?.range) {\n      return 1;\n    }\n\n    return (\n      this.facetForDateRange?.state.values.filter(\n        ({state}) => state === 'selected'\n      ).length || 0\n    );\n  }\n\n  private get hasInputRange() {\n    return !!this.filter?.state.range;\n  }\n\n  public get currentValues(): DateRangeRequest[] {\n    return this.manualTimeframes.map(({period, amount, unit}) =>\n      period === 'past'\n        ? this.props.buildDateRange({\n            start: {period, unit, amount},\n            end: {period: 'now'},\n          })\n        : this.props.buildDateRange({\n            start: {period: 'now'},\n            end: {period, unit, amount},\n          })\n    );\n  }\n\n  public disconnectedCallback() {\n    if (this.props.host.isConnected) {\n      return;\n    }\n    this.facetForDateRangeDependenciesManager?.stopWatching();\n    this.facetForDatePickerDependenciesManager?.stopWatching();\n    this.filterDependenciesManager?.stopWatching();\n  }\n\n  private get isHidden() {\n    return !this.shouldRenderFacet || !this.enabled;\n  }\n\n  private registerFacetToStore() {\n    const facetInfo: FacetInfo = {\n      label: () => this.props.bindings.i18n.t(this.props.label),\n      facetId: this.facetId!,\n      element: this.props.host,\n      isHidden: () => this.isHidden,\n    };\n\n    this.props.bindings.store.registerFacet('dateFacets', {\n      ...facetInfo,\n      format: (value) => this.formatFacetValue(value),\n    });\n\n    initializePopover(this.props.host, {\n      ...facetInfo,\n      hasValues: () => this.hasValues,\n      numberOfActiveValues: () => this.numberOfSelectedValues,\n    });\n\n    if (this.filter) {\n      this.props.bindings.store.state.dateFacets[this.filter.state.facetId] =\n        this.props.bindings.store.state.dateFacets[this.facetId!];\n    }\n  }\n\n  private getManualTimeframes(): Timeframe[] {\n    return Array.from(this.props.host.querySelectorAll('atomic-timeframe')).map(\n      ({label, amount, unit, period}) => ({\n        label,\n        amount,\n        unit,\n        period,\n      })\n    );\n  }\n\n  private formatFacetValue(facetValue: DateFacetValue) {\n    try {\n      const startDate = this.props.deserializeRelativeDate(facetValue.start);\n      const relativeDate =\n        startDate.period === 'past'\n          ? startDate\n          : this.props.deserializeRelativeDate(facetValue.end);\n      const timeframe = this.getManualTimeframes().find(\n        (timeframe) =>\n          timeframe.period === relativeDate.period &&\n          timeframe.unit === relativeDate.unit &&\n          timeframe.amount === relativeDate.amount\n      );\n\n      if (timeframe?.label) {\n        return getFieldValueCaption(\n          this.props.field,\n          timeframe.label,\n          this.props.bindings.i18n\n        );\n      }\n      return this.props.bindings.i18n.t(\n        `${relativeDate.period}-${relativeDate.unit}`,\n        {\n          count: relativeDate.amount,\n        }\n      );\n    } catch (error) {\n      return this.props.bindings.i18n.t('to', {\n        start: parseDate(facetValue.start).format('YYYY-MM-DD'),\n        end: parseDate(facetValue.end).format('YYYY-MM-DD'),\n      });\n    }\n  }\n  private renderValues() {\n    return this.renderValuesContainer(\n      this.valuesToRender.map((value) => this.renderValue(value))\n    );\n  }\n  private renderValue(facetValue: DateFacetValue) {\n    const displayValue = this.formatFacetValue(facetValue);\n    const isSelected = facetValue.state === 'selected';\n    const isExcluded = facetValue.state === 'excluded';\n    return (\n      <FacetValueLink\n        displayValue={displayValue}\n        isSelected={isSelected}\n        numberOfResults={facetValue.numberOfResults}\n        i18n={this.props.bindings.i18n}\n        onClick={() => this.facetForDateRange!.toggleSingleSelect(facetValue)}\n      >\n        <FacetValueLabelHighlight\n          displayValue={displayValue}\n          isSelected={isSelected}\n          isExcluded={isExcluded}\n        ></FacetValueLabelHighlight>\n      </FacetValueLink>\n    );\n  }\n\n  private renderValuesContainer(children: VNode[]) {\n    return (\n      <FacetValuesGroup\n        i18n={this.props.bindings.i18n}\n        label={this.props.label}\n      >\n        <ul class=\"mt-3\" part=\"values\">\n          {children}\n        </ul>\n      </FacetValuesGroup>\n    );\n  }\n\n  private renderHeader(\n    isCollapsed: boolean,\n    headerFocus: FocusTargetController,\n    onToggleCollapse: () => void\n  ) {\n    return (\n      <FacetHeader\n        i18n={this.props.bindings.i18n}\n        label={this.props.label}\n        onClearFilters={() => {\n          headerFocus.focusAfterSearch();\n          if (this.filter?.state.range) {\n            this.filter?.clear();\n            return;\n          }\n          this.facetForDateRange?.deselectAll();\n        }}\n        numberOfActiveValues={this.numberOfSelectedValues}\n        isCollapsed={isCollapsed}\n        headingLevel={this.props.headingLevel}\n        onToggleCollapse={onToggleCollapse}\n        headerRef={(el) => headerFocus.setTarget(el)}\n      ></FacetHeader>\n    );\n  }\n\n  private renderDateInput() {\n    return (\n      <atomic-facet-date-input\n        min={this.props.min}\n        max={this.props.max}\n        bindings={this.props.bindings}\n        label={this.props.label}\n        facetId={this.filter!.state!.facetId}\n        rangeGetter={() => this.filter!.state.range}\n        rangeSetter={(request: DateRangeRequest) => {\n          this.filter!.setRange(request);\n        }}\n      ></atomic-facet-date-input>\n    );\n  }\n\n  public render({\n    hasError,\n    firstSearchExecuted,\n    isCollapsed,\n    headerFocus,\n    onToggleCollapse,\n  }: TimeframeFacetCommonRenderProps) {\n    if (hasError || !this.enabled) {\n      return <Hidden></Hidden>;\n    }\n\n    if (!firstSearchExecuted) {\n      return (\n        <FacetPlaceholder\n          numberOfValues={this.currentValues.length}\n          isCollapsed={isCollapsed}\n        ></FacetPlaceholder>\n      );\n    }\n\n    if (!this.shouldRenderFacet) {\n      return <Hidden></Hidden>;\n    }\n\n    return (\n      <FacetContainer>\n        {this.renderHeader(isCollapsed, headerFocus, onToggleCollapse)}\n        {!isCollapsed && [\n          this.shouldRenderValues && this.renderValues(),\n          this.shouldRenderInput && this.renderDateInput(),\n        ]}\n      </FacetContainer>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}