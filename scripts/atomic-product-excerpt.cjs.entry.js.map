{"file":"atomic-product-excerpt.entry.cjs.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA,MAAM,uBAAuB,GAAG,uUAAuU,CAAC;AACxW,mCAAe,uBAAuB;;;;;;;;;;;;MCuBzB,oBAAoB;IA0B/B;;QAhBiB,eAAU,GAAG,KAAK,CAAC;QACnB,gBAAW,GAAG,KAAK,CAAC;;;;QAQtB,kBAAa,GAAkB,GAAG,CAAC;;;;QAKnC,kBAAa,GAAG,KAAK,CAAC;0BAdP,KAAK;2BACJ,KAAK;6BAQU,GAAG;6BAKlB,KAAK;QAGlC,IAAI,CAAC,cAAc,GAAG,IAAI,cAAc,CAAC;YACvC,IACE,IAAI,CAAC,WAAW;gBAChB,IAAI,CAAC,WAAW,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,EAC7D;gBACA,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;aACzB;iBAAM;gBACL,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;aAC1B;SACF,CAAC,CAAC;QACH,IAAI,CAAC,aAAa,EAAE,CAAC;KACtB;IAEO,aAAa;QACnB,IAAIA,YAAM,CAAC;YACT,aAAa,EAAE,IAAIC,iBAAW,CAAC;gBAC7B,WAAW,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;aAC1C,CAAC;SACH,CAAC,CAAC,QAAQ,CAAC;YACV,aAAa,EAAE,IAAI,CAAC,aAAa;SAClC,CAAC,CAAC;KACJ;IAED,gBAAgB;QACd,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAC/C,kBAAkB,CACD,CAAC;QACpB,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAC/C;KACF;IAEO,cAAc,CAAC,CAAc;QACnC,IAAI,CAAC,EAAE;YACL,CAAC,CAAC,eAAe,EAAE,CAAC;SACrB;QAED,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC;KACpC;IAED,oBAAoB;QAClB,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC;KAClC;IAEM,MAAM;QACX,MAAM,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC;QAEvD,IAAI,CAAC,cAAc,EAAE;YACnB,OAAOC,QAACC,0BAAM,OAAG,CAAC;SACnB;QAED,QACED,QAACE,6BAAc,IACb,UAAU,EAAE,IAAI,CAAC,UAAU,EAC3B,WAAW,EAAE,IAAI,CAAC,WAAW,EAC7B,aAAa,EAAE,IAAI,CAAC,aAAa,EACjC,cAAc,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,EAC7C,aAAa,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,EAChD,aAAa,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,EAChD,aAAa,EAAE,IAAI,CAAC,aAAa,IAEjCF,iCAAqB,KAAK,EAAC,SAAS,GAAuB,CAC5C,EACjB;KACH;;;AAxF4B;IAA5BG,sCAAkB,EAAE;sDAAoC;AAC/B;IAAzBC,wCAAc,EAAE;qDAA2B;;;;;","names":["Schema","StringValue","h","Hidden","ExpandableText","InitializeBindings","ProductContext"],"sources":["src/components/commerce/product-template-components/atomic-product-excerpt/atomic-product-excerpt.pcss?tag=atomic-product-excerpt","src/components/commerce/product-template-components/atomic-product-excerpt/atomic-product-excerpt.tsx"],"sourcesContent":["@import '../../../common/expandable-text/expandable-text.pcss';\n","import {Schema, StringValue} from '@coveo/bueno';\nimport {Product} from '@coveo/headless/commerce';\nimport {Component, State, h, Element, Prop} from '@stencil/core';\nimport {\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {\n  ExpandableText,\n  TruncateAfter,\n} from '../../../common/expandable-text/expandable-text';\nimport {Hidden} from '../../../common/stencil-hidden';\nimport {CommerceBindings} from '../../atomic-commerce-interface/atomic-commerce-interface';\nimport {ProductContext} from '../product-template-decorators';\n\n/**\n * @alpha\n * The `atomic-product-excerpt` component renders the excerpt of a product generated at query time.\n */\n@Component({\n  tag: 'atomic-product-excerpt',\n  styleUrl: 'atomic-product-excerpt.pcss',\n  shadow: false,\n})\nexport class AtomicProductExcerpt\n  implements InitializableComponent<CommerceBindings>\n{\n  @InitializeBindings() public bindings!: CommerceBindings;\n  @ProductContext() private product!: Product;\n\n  @Element() hostElement!: HTMLElement;\n\n  public error!: Error;\n\n  @State() private isExpanded = false;\n  @State() private isTruncated = false;\n\n  private excerptText!: HTMLDivElement;\n  private resizeObserver: ResizeObserver;\n\n  /**\n   * The number of lines after which the product excerpt should be truncated. A value of \"none\" will disable truncation.\n   */\n  @Prop() public truncateAfter: TruncateAfter = '2';\n\n  /**\n   * Whether the excerpt should be collapsible after being expanded.\n   */\n  @Prop() public isCollapsible = false;\n\n  constructor() {\n    this.resizeObserver = new ResizeObserver(() => {\n      if (\n        this.excerptText &&\n        this.excerptText.scrollHeight > this.excerptText.offsetHeight\n      ) {\n        this.isTruncated = true;\n      } else {\n        this.isTruncated = false;\n      }\n    });\n    this.validateProps();\n  }\n\n  private validateProps() {\n    new Schema({\n      truncateAfter: new StringValue({\n        constrainTo: ['none', '1', '2', '3', '4'],\n      }),\n    }).validate({\n      truncateAfter: this.truncateAfter,\n    });\n  }\n\n  componentDidLoad() {\n    this.excerptText = this.hostElement.querySelector(\n      '.expandable-text'\n    ) as HTMLDivElement;\n    if (this.excerptText) {\n      this.resizeObserver.observe(this.excerptText);\n    }\n  }\n\n  private onToggleExpand(e?: MouseEvent) {\n    if (e) {\n      e.stopPropagation();\n    }\n\n    this.isExpanded = !this.isExpanded;\n  }\n\n  disconnectedCallback() {\n    this.resizeObserver.disconnect();\n  }\n\n  public render() {\n    const productExcerpt = this.product['excerpt'] ?? null;\n\n    if (!productExcerpt) {\n      return <Hidden />;\n    }\n\n    return (\n      <ExpandableText\n        isExpanded={this.isExpanded}\n        isTruncated={this.isTruncated}\n        truncateAfter={this.truncateAfter}\n        onToggleExpand={(e) => this.onToggleExpand(e)}\n        showMoreLabel={this.bindings.i18n.t('show-more')}\n        showLessLabel={this.bindings.i18n.t('show-less')}\n        isCollapsible={this.isCollapsible}\n      >\n        <atomic-product-text field=\"excerpt\"></atomic-product-text>\n      </ExpandableText>\n    );\n  }\n}\n"],"version":3}