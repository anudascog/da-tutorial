import { CommerceEngine, CommerceEngineConfiguration } from '@coveo/headless/commerce';
import { i18n } from 'i18next';
import { InitializeEvent } from '../../../utils/initialization-utils';
import { AdoptedStylesBindings, CommonBindings } from '../../common/interface/bindings';
import { StencilBaseAtomicInterface } from '../../common/interface/interface-common-stencil';
import { AtomicCommerceInterface } from '../atomic-commerce-interface/atomic-commerce-interface';
import { CommerceRecommendationStore } from './store';
export type CommerceInitializationOptions = CommerceEngineConfiguration;
export type CommerceBindings = CommonBindings<CommerceEngine, CommerceRecommendationStore, AtomicCommerceInterface> & AdoptedStylesBindings;
/**
 * @alpha
 * The `atomic-commerce-recommendation-interface` component is meant to be used as the parent of one or more `atomic-commerce-recommendation-list` components. It handles the headless search engine and localization configurations.
 */
export declare class AtomicCommerceRecommendationInterface implements StencilBaseAtomicInterface<CommerceEngine> {
    private store;
    private commonInterfaceHelper;
    host: AtomicCommerceInterface;
    error?: Error;
    /**
     * The commerce interface i18next instance.
     */
    i18n: i18n;
    /**
     * The commerce interface headless engine.
     */
    engine: CommerceEngine;
    /**
     * The CSS selector for the container the interface will scroll back to.
     */
    scrollContainer: string;
    /**
     * The language assets path. By default, this will be a relative URL pointing to `./lang`.
     *
     * Example: "/mypublicpath/languages"
     *
     */
    languageAssetsPath: string;
    /**
     * The icon assets path. By default, this will be a relative URL pointing to `./assets`.
     *
     * Example: "/mypublicpath/icons"
     *
     */
    iconAssetsPath: string;
    /**
     * The value to set the [nonce](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce) attribute to on inline script and style elements generated by this interface and its child components.
     * If your application is served with a Content Security Policy (CSP) that doesn't include the `script-src: 'unsafe-inline'` or `style-src: 'unsafe-inline'` directives,
     * you should ensure that your application server generates a new nonce on every page load and uses the generated value to set this prop and serve the corresponding CSP response headers
     * (i.e., script-src 'nonce-<YOUR_GENERATED_NONCE>' and style-src 'nonce-<YOUR_GENERATED_NONCE>').
     * Otherwise you may see console errors such as
     *  - Refused to execute inline script because it violates the following Content Security Policy directive: [...]
     *  - Refused to apply inline style because it violates the following Content Security Policy directive: [...].
     * @example:
     * ```html
     * <script nonce="<YOUR_GENERATED_NONCE>">
     *  import {setNonce} from '@coveo/atomic';
     *  setNonce('<YOUR_GENERATED_NONCE>');
     * </script>
     * ```
     */
    CspNonce?: string;
    /**
     * The commerce interface language.
     *
     * Will default to the value set in the Headless engine context if not provided.
     */
    language?: string;
    /**
     * Whether to enable analytics.
     */
    analytics: boolean;
    private i18Initialized;
    private componentWillLoadCalledPromise;
    private componentWillLoadResolver;
    private contextController;
    constructor();
    componentWillLoad(): void;
    toggleAnalytics(): void;
    updateLanguage(): Promise<void> | undefined;
    updateIconAssetsPath(): void;
    handleInitialization(event: InitializeEvent): void;
    scrollToTop(): void;
    /**
     * Initializes the connection with an already preconfigured [headless commerce engine](https://docs.coveo.com/en/headless/latest/reference/commerce/).
     */
    initializeWithEngine(engine: CommerceEngine): Promise<void>;
    get bindings(): CommerceBindings;
    private initContext;
    private initLanguage;
    private initAriaLive;
    private internalInitialization;
    render(): any[];
}
