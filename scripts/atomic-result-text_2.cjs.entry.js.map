{"file":"atomic-result-text.atomic-text.entry.cjs.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAoBa,gBAAgB;;;;;;QAiBG,oBAAe,GAAG,IAAI,CAAC;;;+BAAL,IAAI;;;IAO7C,MAAM;QACX,MAAM,mBAAmB,GAAGA,0CAA8B,CACxD,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,KAAK,CACX,CAAC;QAEF,IAAI,mBAAmB,KAAK,IAAI,EAAE;YAChC,QACEC,QAACC,2CAAgB,IACf,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,EACnC,YAAY,EAAE,IAAI,CAAC,OAAO,EAC1B,IAAI,EAAE,IAAI,CAAC,MAAM,EACjB,WAAW,EAAEC,+BAAsB,CAAC,iBAAiB,IAErDF,yBACE,KAAK,EAAEG,+BAAoB,CACzB,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,OAAQ,EACb,IAAI,CAAC,QAAQ,CAAC,IAAI,CACnB,GACY,CACE,EACnB;SACH;QAED,MAAM,SAAS,GAAG,GAAG,mBAAmB,EAAE,CAAC;QAC3C,MAAM,iBAAiB,GAAGD,+BAAsB,CAAC,iBAAiB,CAChE,IAAI,CAAC,MAAM,EACX,GAAG,IAAI,CAAC,KAAK,YAAY,CACW,CAAC;QAEvC,OAAO,IAAI,CAAC,eAAe,IAAI,iBAAiB,IAC9CF,QAACI,8CAAmB,IAClB,SAAS,EAAE,SAAS,EACpB,iBAAiB,EAAE,iBAAiB,EACpC,eAAe,EAAEC,uBAAc,CAAC,eAAe,EAC/C,OAAO,EAAE,CAAC,KAAK,MAAM,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,GACnB,KAEvBF,+BAAoB,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAChE,CAAC;KACH;;;AAlE4BG;IAA5BC,sCAAkB,EAAE;kDAA4B;AACxBD;IAAxBE,sCAAa,EAAE;gDAAyB;;;;;;;;;;;;MCR9B,UAAU;;;QAGb,YAAO,GAAG;YAChB,KAAK,EAAE,MACL,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE;gBAC/B,KAAK,EAAE,IAAI,CAAC,KAAK;aAClB,CAAC;SACL,CAAC;;;;;IAYK,iBAAiB;QACtB,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACf,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;SAClE;KACF;IAEM,MAAM;QACX,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;KAC7B;;AA3B4B;IAA5BD,sCAAkB,EAAE;4CAA4B;;;;;","names":["getStringValueFromResultOrNull","h","ItemTextFallback","ResultTemplatesHelpers","getFieldValueCaption","ItemTextHighlighted","HighlightUtils","__decorate","InitializeBindings","ResultContext"],"sources":["src/components/search/result-template-components/atomic-result-text/atomic-result-text.tsx","src/components/search/atomic-text/atomic-text.tsx"],"sourcesContent":["import {HighlightUtils, Result, ResultTemplatesHelpers} from '@coveo/headless';\nimport {Component, Prop, h, Element, State} from '@stencil/core';\nimport {getFieldValueCaption} from '../../../../utils/field-utils';\nimport {\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {getStringValueFromResultOrNull} from '../../../../utils/result-utils';\nimport {ItemTextFallback} from '../../../common/item-text/stencil-item-text-fallback';\nimport {ItemTextHighlighted} from '../../../common/item-text/stencil-item-text-highlighted';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\nimport {ResultContext} from '../result-template-decorators';\n\n/**\n * The `atomic-result-text` component renders the value of a string result field.\n */\n@Component({\n  tag: 'atomic-result-text',\n  shadow: false,\n})\nexport class AtomicResultText implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  @ResultContext() private result!: Result;\n\n  @Element() private host!: HTMLElement;\n\n  @State() public error!: Error;\n\n  /**\n   * The result field which the component should use.\n   * This will look in the Result object first, and then in the Result.raw object for the fields.\n   * It is important to include the necessary field in the `atomic-search-interface` component.\n   */\n  @Prop({reflect: true}) public field!: string;\n  /**\n   * When this is set to `true`, the component attempts to highlight text based on the highlighting properties provided by the search API response.\n   */\n  @Prop({reflect: true}) public shouldHighlight = true;\n\n  /**\n   * The locale key for the text to display when the configured field has no value.\n   */\n  @Prop({reflect: true}) public default?: string;\n\n  public render() {\n    const resultValueAsString = getStringValueFromResultOrNull(\n      this.result,\n      this.field\n    );\n\n    if (resultValueAsString === null) {\n      return (\n        <ItemTextFallback\n          field={this.field}\n          host={this.host}\n          logger={this.bindings.engine.logger}\n          defaultValue={this.default}\n          item={this.result}\n          getProperty={ResultTemplatesHelpers.getResultProperty}\n        >\n          <atomic-text\n            value={getFieldValueCaption(\n              this.field,\n              this.default!,\n              this.bindings.i18n\n            )}\n          ></atomic-text>\n        </ItemTextFallback>\n      );\n    }\n\n    const textValue = `${resultValueAsString}`;\n    const highlightKeywords = ResultTemplatesHelpers.getResultProperty(\n      this.result,\n      `${this.field}Highlights`\n    ) as HighlightUtils.HighlightKeyword[];\n\n    return this.shouldHighlight && highlightKeywords ? (\n      <ItemTextHighlighted\n        textValue={textValue}\n        highlightKeywords={highlightKeywords}\n        highlightString={HighlightUtils.highlightString}\n        onError={(error) => (this.error = error)}\n      ></ItemTextHighlighted>\n    ) : (\n      getFieldValueCaption(this.field, textValue, this.bindings.i18n)\n    );\n  }\n}\n","import {Component, Prop, State} from '@stencil/core';\nimport {\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {Bindings} from '../atomic-search-interface/atomic-search-interface';\n\n/**\n * The `atomic-text` component leverages the I18n translation module through the atomic-search-interface.\n */\n@Component({\n  tag: 'atomic-text',\n  shadow: true,\n})\nexport class AtomicText implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n\n  private strings = {\n    value: () =>\n      this.bindings.i18n.t(this.value, {\n        count: this.count,\n      }),\n  };\n  @State() public error!: Error;\n\n  /**\n   * The string key value.\n   */\n  @Prop({reflect: true}) public value!: string;\n  /**\n   * The count value used for plurals.\n   */\n  @Prop({reflect: true}) public count?: number;\n\n  public connectedCallback() {\n    if (!this.value) {\n      this.error = new Error('The \"value\" attribute must be defined.');\n    }\n  }\n\n  public render() {\n    return this.strings.value();\n  }\n}\n"],"version":3}