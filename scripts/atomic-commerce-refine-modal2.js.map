{"file":"atomic-commerce-refine-modal2.js","mappings":";;;;;;;;;;;;;;;;AAQO,MAAM,kBAAkB,GAE3B,CAAC,KAAK;IACR,MAAM,EAAC,IAAI,EAAC,GAAG,KAAK,CAAC;IACrB,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;IAE7B,OAAO,EAAC,UAAU,OAAK,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,GAAI,CAAC;AAC/D,CAAC,CAAC;SAEc,QAAQ,CAAC,IAAmB;IAC1C,IAAI,IAAI,CAAC,EAAE,KAAK,WAAW,EAAE;QAC3B,OAAO,WAAW,CAAC;KACpB;SAAM;QACL,OAAO,IAAI,CAAC,MAAM;aACf,GAAG,CAAC,CAAC,WAAW;YACf,OAAO,WAAW,CAAC,WAAW,IAAI,WAAW,CAAC,IAAI,CAAC;SACpD,CAAC;aACD,IAAI,CAAC,GAAG,CAAC,CAAC;KACd;AACH,CAAC;SAEe,cAAc,CAAC,KAAa,EAAE,cAA+B;IAC3E,MAAM,WAAW,GAAkC,EAAE,CAAC;IACtD,cAAc,CAAC,OAAO,CAAC,CAAC,aAAa;QACnC,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,GAAG,aAAa,CAAC;KACtD,CAAC,CAAC;IAEH,OAAO,WAAW,CAAC,KAAK,CAAC,CAAC;AAC5B;;ACpCA,MAAM,4BAA4B,GAAG,qv1DAAqv1D,CAAC;AAC3x1D,wCAAe,4BAA4B;;;;;;;;;;;;MCkE9B,yBAAyB;;;;;QAOE,WAAM,GAAG,KAAK,CAAC;;;;;;;QA4BvB,wBAAmB,GAAG,CAAC,CAAC;;;sBA5BP,KAAK;;;;;mCA4BA,CAAC;;IAGrD,YAAY,CAAC,MAAe;QAC1B,IAAI,MAAM,EAAE;YACV,IAAI,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAAC,EAAE;gBACjD,OAAO;aACR;YAED,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;SAC1C;KACF;IAEM,UAAU;QACf,MAAM,eAAe,GACnB,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,KAAK,QAAQ;cAC5C,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;cACjC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAChD,IAAI,CAAC,OAAO,GAAG,eAAe,CAAC,OAAO,EAAE,CAAC;QACzC,IAAI,CAAC,IAAI,GAAG,eAAe,CAAC,IAAI,EAAE,CAAC;QACnC,IAAI,CAAC,cAAc,GAAG,eAAe,CAAC,cAAc,EAAE,CAAC;QACvD,IAAI,CAAC,iBAAiB,GAAG,eAAe,CAAC,iBAAiB,EAAE,CAAC;QAC7D,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KAChC;IAEO,eAAe;QACrB,MAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC9C,OAAO,CAAC,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAEvC,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,wBAAwB,CAAC,CAAC;QAChE,MAAM,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;QAC9B,MAAM,CAAC,KAAK,CAAC,aAAa,GAAG,QAAQ,CAAC;QACtC,MAAM,CAAC,KAAK,CAAC,GAAG,GAAG,+CAA+C,CAAC;QACnE,MAAM,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC;QACtD,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACvB,OAAO,OAAO,CAAC;KAChB;IAEO,kBAAkB,CAAC,CAAQ;QACjC,MAAM,MAAM,GAAG,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,CAAsB,CAAC;QACxD,IAAI,CAAC,IAAI,CAAC,MAAM,CACd,cAAc,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAC5D,CAAC;KACH;IAEO,UAAU;QAChB,QACE,EAAC,sBAAsB,IACrB,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,EACxB,QAAQ,EAAE,CAAC,MAAM,KAAK,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAEpD,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,IAAI,MACtC,EAAC,kBAAkB,IACjB,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,EACxB,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EACpC,IAAI,EAAE,IAAI,GACV,CACH,CAAC,CACqB,EACzB;KACH;IAEO,aAAa;QACnB,IAAI,IAAI,CAAC,mBAAmB,CAAC,MAAM,KAAK,CAAC,EAAE;YACzC,OAAO;SACR;QAED,MAAM,EAAC,IAAI,EAAC,GAAG,IAAI,CAAC,QAAQ,CAAC;QAE7B,QACE,EAAC,yBAAyB,IACxB,IAAI,EAAE,IAAI,EACV,UAAU,EAAE,IAAI,EAChB,mBAAmB,EAAE,KAAK,IAEzB,IAAI,CAAC,sBAAsB,CAAC,cAAc,KACzC,EAAC,6BAA6B,IAC5B,IAAI,EAAE,IAAI,EACV,OAAO,EAAE,MAAM,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,GACnD,CACH,CACyB,EAC5B;KACH;IAEM,MAAM;QACX,QACE,EAAC,WAAW,qDACV,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,EACxB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,MAAM,EAAE,IAAI,CAAC,MAAM,EACnB,OAAO,EAAE,OAAO,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,EACpC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,iBAAiB,CAAC,EAC9C,aAAa,EAAE,IAAI,CAAC,YAAY,CAAC,qBAAqB,EACtD,UAAU,EAAE,IAAI,CAAC,UAAU,IAE3B,EAAC,eAAe,uDACb,IAAI,CAAC,UAAU,EAAE,EACjB,IAAI,CAAC,aAAa,EAAE,CACL,CACN,EACd;KACH;IAEM,gBAAgB;QACrB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,EAAE,CAAC;KAC9B;;;;;;;;;;;;;;;;;;AA1I4B;IAA5B,kBAAkB,EAAE;2DAAoC;AASlD;IAFN,qBAAqB,CAAC,SAAS,CAAC;+DAEqC;AAK/D;IAFN,qBAAqB,CAAC,MAAM,CAAC;4DAED;AAKtB;IAFN,qBAAqB,CAAC,gBAAgB,CAAC;sEAES;AAK1C;IAFN,qBAAqB,CAAC,mBAAmB,CAAC;yEAEY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/commerce/sort/stencil-option.tsx","src/components/commerce/atomic-commerce-refine-modal/atomic-commerce-refine-modal.pcss?tag=atomic-commerce-refine-modal&encapsulation=shadow","src/components/commerce/atomic-commerce-refine-modal/atomic-commerce-refine-modal.tsx"],"sourcesContent":["import {SortCriterion} from '@coveo/headless/commerce';\nimport {FunctionalComponent, h} from '@stencil/core';\nimport {SortOption, SortOptionProps} from '../../common/sort/stencil-option';\n\ninterface CommerceSortOptionProps\n  extends Omit<SortOptionProps, 'label' | 'value'> {\n  sort: SortCriterion;\n}\nexport const CommerceSortOption: FunctionalComponent<\n  CommerceSortOptionProps\n> = (props) => {\n  const {sort} = props;\n  const label = getLabel(sort);\n\n  return <SortOption {...props} label={label} value={label} />;\n};\n\nexport function getLabel(sort: SortCriterion) {\n  if (sort.by === 'relevance') {\n    return 'relevance';\n  } else {\n    return sort.fields\n      .map((sortByField) => {\n        return sortByField.displayName || sortByField.name;\n      })\n      .join(' ');\n  }\n}\n\nexport function getSortByLabel(label: string, availableSorts: SortCriterion[]) {\n  const sortByLabel: Record<string, SortCriterion> = {};\n  availableSorts.forEach((availableSort) => {\n    sortByLabel[getLabel(availableSort)] = availableSort;\n  });\n\n  return sortByLabel[label];\n}\n","@import '../../common/refine-modal/refine-modal-common.pcss';\n\n:host {\n  position: absolute;\n}\n\nselect:hover + div,\nselect:focus-visible + div {\n  @apply text-primary-light;\n}\n","import {\n  Summary,\n  SearchSummaryState,\n  ProductListingSummaryState,\n  buildSearch,\n  buildProductListing,\n  Sort,\n  SortState,\n  FacetGenerator,\n  FacetGeneratorState,\n  BreadcrumbManager,\n  BreadcrumbManagerState,\n} from '@coveo/headless/commerce';\nimport {Component, State, Prop, Element, Watch, h} from '@stencil/core';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {RefineModalBody} from '../../common/refine-modal/body';\nimport {\n  RefineModalFiltersClearButton,\n  RefineModalFiltersSection,\n} from '../../common/refine-modal/filters';\nimport {RefineModal} from '../../common/refine-modal/modal';\nimport {RefineModalSortSection} from '../../common/refine-modal/sort';\nimport {CommerceBindings} from '../atomic-commerce-interface/atomic-commerce-interface';\nimport {CommerceSortOption, getSortByLabel} from '../sort/stencil-option';\n\n/**\n * The `atomic-commerce-refine-modal` is automatically created as a child of the `atomic-commerce-search-interface` when the `atomic-commerce-refine-toggle` is initialized.\n *\n * When the modal is opened, the class `atomic-modal-opened` is added to the interface element and the body, allowing further customization.\n *\n * @part container - The modal's outermost container.\n * @part header-wrapper - The wrapper around the header.\n * @part header - The header of the modal, containing the title.\n * @part title - The title of the modal.\n * @part close-button - The button in the header that closes the modal.\n * @part close-icon - The icon of the close button.\n * @part header-ruler - The horizontal ruler underneath the header.\n * @part body-wrapper - The wrapper around the body.\n * @part body - The body of the modal, between the header and the footer.\n * @part content - The wrapper around the content inside the body of the modal.\n * @part section-title - The title for each section.\n * @part section-sort-title - The title for the sort section.\n * @part section-filters-title - The title for the filters section.\n * @part select-wrapper - The wrapper around the select element, used to position the icon.\n * @part select - The `<select>` element of the dropdown list.\n * @part select-icon-wrapper - The wrapper around the sort icon that's used to align it.\n * @part select-icon - The select dropdown's sort icon.\n * @part filter-section - The section containing facets and the \"filters\" title.\n * @part filter-clear-all - The button that resets all actively selected facet values.\n * @part footer-wrapper - The wrapper with a shadow or background color around the footer.\n * @part footer - The footer of the modal.\n * @part footer-content - The wrapper around the content inside the footer of the modal, containing the button to view results.\n * @part footer-button - The button in the footer that closes the modal.\n * @part footer-button-text - The text inside the button in the footer that closes the modal.\n * @part footer-button-count - The count inside the button in the footer that closes the modal.\n *\n * @alpha\n */\n@Component({\n  tag: 'atomic-commerce-refine-modal',\n  styleUrl: 'atomic-commerce-refine-modal.pcss',\n  shadow: true,\n})\nexport class AtomicCommerceRefineModal\n  implements InitializableComponent<CommerceBindings>\n{\n  @InitializeBindings() public bindings!: CommerceBindings;\n  @Element() public host!: HTMLElement;\n  @State() public error!: Error;\n  @Prop({mutable: true}) openButton?: HTMLElement;\n  @Prop({reflect: true, mutable: true}) isOpen = false;\n\n  public summary!: Summary;\n  @BindStateToController('summary')\n  @State()\n  public summaryState!: SearchSummaryState | ProductListingSummaryState;\n\n  public sort!: Sort;\n  @BindStateToController('sort')\n  @State()\n  public sortState!: SortState;\n\n  public facetGenerator!: FacetGenerator;\n  @BindStateToController('facetGenerator')\n  @State()\n  public facetGeneratorState!: FacetGeneratorState;\n\n  public breadcrumbManager!: BreadcrumbManager;\n  @BindStateToController('breadcrumbManager')\n  @State()\n  public breadcrumbManagerState!: BreadcrumbManagerState;\n\n  /**\n   * The number of expanded facets inside the refine modal.\n   * Remaining facets are automatically collapsed.\n   *\n   * Using the value `0` collapses all facets.\n   */\n  @Prop({reflect: true}) public collapseFacetsAfter = 0;\n\n  @Watch('isOpen')\n  watchEnabled(isOpen: boolean) {\n    if (isOpen) {\n      if (this.host.querySelector('div[slot=\"facets\"]')) {\n        return;\n      }\n\n      this.host.append(this.createFacetSlot());\n    }\n  }\n\n  public initialize() {\n    const searchOrListing =\n      this.bindings.interfaceElement.type === 'search'\n        ? buildSearch(this.bindings.engine)\n        : buildProductListing(this.bindings.engine);\n    this.summary = searchOrListing.summary();\n    this.sort = searchOrListing.sort();\n    this.facetGenerator = searchOrListing.facetGenerator();\n    this.breadcrumbManager = searchOrListing.breadcrumbManager();\n    this.watchEnabled(this.isOpen);\n  }\n\n  private createFacetSlot(): HTMLDivElement {\n    const divSlot = document.createElement('div');\n    divSlot.setAttribute('slot', 'facets');\n\n    const facets = document.createElement('atomic-commerce-facets');\n    facets.style.display = 'flex';\n    facets.style.flexDirection = 'column';\n    facets.style.gap = 'var(--atomic-refine-modal-facet-margin, 20px)';\n    facets.collapseFacetsAfter = this.collapseFacetsAfter;\n    divSlot.append(facets);\n    return divSlot;\n  }\n\n  private onSelectSortOption(e: Event) {\n    const select = e.composedPath()[0] as HTMLSelectElement;\n    this.sort.sortBy(\n      getSortByLabel(select.value, this.sortState.availableSorts)\n    );\n  }\n\n  private renderSort() {\n    return (\n      <RefineModalSortSection\n        i18n={this.bindings.i18n}\n        onSelect={(option) => this.onSelectSortOption(option)}\n      >\n        {this.sortState.availableSorts.map((sort) => (\n          <CommerceSortOption\n            i18n={this.bindings.i18n}\n            selected={this.sort.isSortedBy(sort)}\n            sort={sort}\n          />\n        ))}\n      </RefineModalSortSection>\n    );\n  }\n\n  private renderFilters() {\n    if (this.facetGeneratorState.length === 0) {\n      return;\n    }\n\n    const {i18n} = this.bindings;\n\n    return (\n      <RefineModalFiltersSection\n        i18n={i18n}\n        withFacets={true}\n        withAutomaticFacets={false}\n      >\n        {this.breadcrumbManagerState.hasBreadcrumbs && (\n          <RefineModalFiltersClearButton\n            i18n={i18n}\n            onClick={() => this.breadcrumbManager.deselectAll()}\n          />\n        )}\n      </RefineModalFiltersSection>\n    );\n  }\n\n  public render() {\n    return (\n      <RefineModal\n        i18n={this.bindings.i18n}\n        host={this.host}\n        isOpen={this.isOpen}\n        onClose={() => (this.isOpen = false)}\n        title={this.bindings.i18n.t('sort-and-filter')}\n        numberOfItems={this.summaryState.totalNumberOfProducts}\n        openButton={this.openButton}\n      >\n        <RefineModalBody>\n          {this.renderSort()}\n          {this.renderFilters()}\n        </RefineModalBody>\n      </RefineModal>\n    );\n  }\n\n  public componentDidLoad() {\n    this.host.style.display = '';\n  }\n}\n"],"version":3}