{"version":3,"names":["atomicCommerceLoadMoreProductsCss","AtomicCommerceLoadMoreProductsStyle0","AtomicCommerceLoadMoreProducts","this","isAppLoaded","initialize","bindings","interfaceElement","type","listingOrSearch","buildProductListing","engine","buildSearch","pagination","createAppLoadedListener","store","lastProduct","productListingOrSearchState","products","length","onClick","state","resultList","focusOnNextNewResult","fetchMoreProducts","render","i18n","h","LoadMoreGuard","key","hasResults","paginationState","totalEntries","isLoaded","LoadMoreContainer","LoadMoreSummary","from","to","label","LoadMoreProgressBar","LoadMoreButton","moreAvailable","__decorate","InitializeBindings","BindStateToController"],"sources":["src/components/commerce/atomic-commerce-load-more-products/atomic-commerce-load-more-products.pcss?tag=atomic-commerce-load-more-products&encapsulation=shadow","src/components/commerce/atomic-commerce-load-more-products/atomic-commerce-load-more-products.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\n\n/**\n * @prop --atomic-more-results-progress-bar-color-from: Color of the start of the gradient for the load more results progress bar.\n * @prop --atomic-more-results-progress-bar-color-to: Color of the end of the gradient for the load more results progress bar.\n */\n.progress-bar {\n  @apply from-more-results-progress-bar-color-from;\n  @apply to-more-results-progress-bar-color-to;\n}\n","import {\n  Pagination,\n  PaginationState,\n  buildSearch,\n  buildProductListing,\n  ProductListing,\n  Search,\n  ProductListingState,\n  SearchState,\n} from '@coveo/headless/commerce';\nimport {Component, h, State} from '@stencil/core';\nimport {\n  BindStateToController,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {createAppLoadedListener} from '../../common/interface/store';\nimport {LoadMoreContainer} from '../../common/load-more/container';\nimport {LoadMoreGuard} from '../../common/load-more/guard';\nimport {LoadMoreProgressBar} from '../../common/load-more/progress-bar';\nimport {LoadMoreButton} from '../../common/load-more/stencil-button';\nimport {LoadMoreSummary} from '../../common/load-more/summary';\nimport {CommerceBindings} from '../atomic-commerce-interface/atomic-commerce-interface';\n\n/**\n * The `atomic-commerce-load-more-products` component allows the user to load additional products if more are available.\n *\n * @part container - The container of the component.\n * @part showing-results - The summary displaying which products are shown and how many are available.\n * @part highlight - The highlighted number of products displayed and number of products available.\n * @part progress-bar - The progress bar displaying a percentage of results shown over the total number of products available.\n * @part load-more-results-button - The \"Load more products\" button.\n *\n * @alpha\n */\n@Component({\n  tag: 'atomic-commerce-load-more-products',\n  styleUrl: 'atomic-commerce-load-more-products.pcss',\n  shadow: true,\n})\nexport class AtomicCommerceLoadMoreProducts {\n  @InitializeBindings() public bindings!: CommerceBindings;\n  public pagination!: Pagination;\n  public listingOrSearch!: ProductListing | Search;\n\n  @BindStateToController('pagination')\n  @State()\n  private paginationState!: PaginationState;\n  @BindStateToController('listingOrSearch')\n  @State()\n  private productListingOrSearchState!: ProductListingState | SearchState;\n\n  @State() public error!: Error;\n  @State() private isAppLoaded = false;\n\n  public initialize() {\n    if (this.bindings.interfaceElement.type === 'product-listing') {\n      this.listingOrSearch = buildProductListing(this.bindings.engine);\n    } else {\n      this.listingOrSearch = buildSearch(this.bindings.engine);\n    }\n    this.pagination = this.listingOrSearch.pagination();\n\n    createAppLoadedListener(this.bindings.store, (isAppLoaded) => {\n      this.isAppLoaded = isAppLoaded;\n    });\n  }\n\n  private get lastProduct() {\n    return this.productListingOrSearchState.products.length;\n  }\n\n  private async onClick() {\n    this.bindings.store.state.resultList?.focusOnNextNewResult();\n    this.pagination.fetchMoreProducts();\n  }\n\n  public render() {\n    const {i18n} = this.bindings;\n    return (\n      <LoadMoreGuard\n        hasResults={this.paginationState.totalEntries > 0}\n        isLoaded={this.isAppLoaded}\n      >\n        <LoadMoreContainer>\n          <LoadMoreSummary\n            from={this.lastProduct}\n            to={this.paginationState.totalEntries}\n            i18n={i18n}\n            label=\"showing-products-of-load-more\"\n          />\n          <LoadMoreProgressBar\n            from={this.lastProduct}\n            to={this.paginationState.totalEntries}\n          />\n          <LoadMoreButton\n            i18n={i18n}\n            label={'load-more-products'}\n            moreAvailable={this.lastProduct < this.paginationState.totalEntries}\n            onClick={() => this.onClick()}\n          />\n        </LoadMoreContainer>\n      </LoadMoreGuard>\n    );\n  }\n}\n"],"mappings":"0fAAA,MAAMA,EAAoC,qi2DAC1C,MAAAC,EAAeD,E,iXCsCFE,EAA8B,M,yBAaxBC,KAAAC,YAAc,M,gHAAA,K,CAExB,UAAAC,GACL,GAAIF,KAAKG,SAASC,iBAAiBC,OAAS,kBAAmB,CAC7DL,KAAKM,gBAAkBC,EAAoBP,KAAKG,SAASK,O,KACpD,CACLR,KAAKM,gBAAkBG,EAAYT,KAAKG,SAASK,O,CAEnDR,KAAKU,WAAaV,KAAKM,gBAAgBI,aAEvCC,EAAwBX,KAAKG,SAASS,OAAQX,IAC5CD,KAAKC,YAAcA,CAAW,G,CAIlC,eAAYY,GACV,OAAOb,KAAKc,4BAA4BC,SAASC,M,CAG3C,aAAMC,GACZjB,KAAKG,SAASS,MAAMM,MAAMC,YAAYC,uBACtCpB,KAAKU,WAAWW,mB,CAGX,MAAAC,GACL,MAAMC,KAACA,GAAQvB,KAAKG,SACpB,OACEqB,EAACC,EAAa,CAAAC,IAAA,2CACZC,WAAY3B,KAAK4B,gBAAgBC,aAAe,EAChDC,SAAU9B,KAAKC,aAEfuB,EAACO,EAAiB,CAAAL,IAAA,4CAChBF,EAACQ,EAAe,CAAAN,IAAA,2CACdO,KAAMjC,KAAKa,YACXqB,GAAIlC,KAAK4B,gBAAgBC,aACzBN,KAAMA,EACNY,MAAM,kCAERX,EAACY,EAAmB,CAAAV,IAAA,2CAClBO,KAAMjC,KAAKa,YACXqB,GAAIlC,KAAK4B,gBAAgBC,eAE3BL,EAACa,EAAc,CAAAX,IAAA,2CACbH,KAAMA,EACNY,MAAO,qBACPG,cAAetC,KAAKa,YAAcb,KAAK4B,gBAAgBC,aACvDZ,QAAS,IAAMjB,KAAKiB,a,GA1DDsB,EAAA,CAA5BC,K,+BAMOD,EAAA,CAFPE,EAAsB,e,sCAKfF,EAAA,CAFPE,EAAsB,oB","ignoreList":[]}