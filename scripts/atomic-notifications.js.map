{"file":"atomic-notifications.js","mappings":";;;;;;;;;;;;AAAA,MAAM,sBAAsB,GAAG,qi1DAAqi1D,CAAC;AACrk1D,kCAAe,sBAAsB;;;;;;;;;;;;MC6BxBA,qBAAmB;;;;;;;;QAcA,iBAAY,GAAG,CAAC,CAAC;;;4BAAF,CAAC;;;IAWvC,UAAU;QACf,IAAI,CAAC,aAAa,GAAG,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;KAC/D;IAEM,mBAAmB;QACxB,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;YACnC,OAAO,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;SAC9B;QACD,OAAO,IAAI,CAAC,aAAa;aACtB,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,KACX,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,gBAAgB,EAAE,EAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,IAAI,EAAC,CAAC,CACzD;aACA,IAAI,CAAC,IAAI,CAAC,CAAC;KACf;IAEM,kBAAkB,CAAC,IAAY;QACpC,QACE,WACE,IAAI,EAAC,cAAc,EACnB,KAAK,EAAC,qFAAqF,IAE3F,mBACE,IAAI,EAAE,IAAI,CAAC,IAAI,IAAI,QAAQ,EAC3B,IAAI,EAAC,MAAM,EACX,KAAK,EAAC,gCAAgC,GACtC,EACF,YAAM,IAAI,EAAC,MAAM,EAAC,KAAK,EAAC,wCAAwC,IAC7D,IAAI,CACA,CACH,EACN;KACH;IAEM,mBAAmB;QACxB,QACE,WAAK,IAAI,EAAC,eAAe,EAAC,KAAK,EAAC,qBAAqB,IAClD,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAC5D,EACN;KACH;IAEM,MAAM;QACX,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE;YAC9B,OAAO,EAAC,MAAM,OAAU,CAAC;SAC1B;QAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAE9C,QACE,EAAC,QAAQ,QACP,EAAC,OAAO,IAAC,KAAK,EAAE,IAAI,CAAC,YAAY,IAAI,CAAC,EAAE,KAAK,EAAC,SAAS,IACpD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,eAAe,CAAC,CAC9B,EACT,IAAI,CAAC,mBAAmB,EAAE,CAClB,EACX;KACH;IAED,IAAY,aAAa;QACvB,OAAO,IAAI,CAAC,kBAAkB,EAAE,aAAa,IAAI,EAAE,CAAC;KACrD;;;;;;;;AApF4B;IAA5B,kBAAkB,EAAE;uDAA4B;AAKzC;IAFP,qBAAqB,CAAC,eAAe,CAAC;iEAES;AAGf;IAAhC,cAAc,CAAC,eAAe,CAAC;0DAAsB;;;;;;;;;;;;;;;;;;;;","names":["AtomicNotifications"],"sources":["src/components/search/atomic-notification/atomic-notifications.pcss?tag=atomic-notifications&encapsulation=shadow","src/components/search/atomic-notification/atomic-notifications.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\n","import {\n  NotifyTrigger,\n  NotifyTriggerState,\n  buildNotifyTrigger,\n} from '@coveo/headless';\nimport {Component, h, State, Fragment, Prop} from '@stencil/core';\nimport InfoIcon from '../../../images/info.svg';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {AriaLiveRegion} from '../../../utils/stencil-accessibility-utils';\nimport {Heading} from '../../common/stencil-heading';\nimport {Hidden} from '../../common/stencil-hidden';\nimport {Bindings} from '../atomic-search-interface/atomic-search-interface';\n\n/**\n * The `atomic-notifications` component is responsible for displaying notifications generated by the Coveo Search API (see [Trigger](https://docs.coveo.com/en/1458)).\n *\n * @part notifications - The wrapper around the notifications.\n * @part notification - The wrapper around a single notification.\n * @part icon - The icon of the notification.\n * @part text - The text of the notification.\n */\n@Component({\n  tag: 'atomic-notifications',\n  styleUrl: 'atomic-notifications.pcss',\n  shadow: true,\n})\nexport class AtomicNotifications implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  protected notifyTrigger!: NotifyTrigger;\n\n  @BindStateToController('notifyTrigger')\n  @State()\n  private notifyTriggerState?: NotifyTriggerState;\n  @State() public error!: Error;\n\n  @AriaLiveRegion('notifications') ariaMessage!: string;\n\n  /**\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use above the notifications, from 1 to 6.\n   */\n  @Prop({reflect: true}) public headingLevel = 0;\n\n  /**\n   * Specifies an icon to display at the left-end of a notification.\n   *\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\n   * - Use a stringified SVG to display it directly\n   */\n  @Prop({reflect: true}) public icon?: string;\n\n  public initialize() {\n    this.notifyTrigger = buildNotifyTrigger(this.bindings.engine);\n  }\n\n  public generateAriaMessage() {\n    if (this.notifications.length === 1) {\n      return this.notifications[0];\n    }\n    return this.notifications\n      .map((text, i) =>\n        this.bindings.i18n.t('notification-n', {n: i + 1, text})\n      )\n      .join('\\n');\n  }\n\n  public renderNotification(text: string) {\n    return (\n      <div\n        part=\"notification\"\n        class=\"bg-background border-neutral-dark flex items-center rounded-md border p-6 shadow-lg\"\n      >\n        <atomic-icon\n          icon={this.icon ?? InfoIcon}\n          part=\"icon\"\n          class=\"text-neutral-dark mr-6 h-7 w-7\"\n        />\n        <span part=\"text\" class=\"text-on-background text-base leading-5\">\n          {text}\n        </span>\n      </div>\n    );\n  }\n\n  public renderNotifications() {\n    return (\n      <div part=\"notifications\" class=\"flex flex-col gap-4\">\n        {this.notifications.map((text) => this.renderNotification(text))}\n      </div>\n    );\n  }\n\n  public render() {\n    if (!this.notifications.length) {\n      return <Hidden></Hidden>;\n    }\n\n    this.ariaMessage = this.generateAriaMessage();\n\n    return (\n      <Fragment>\n        <Heading level={this.headingLevel ?? 0} class=\"sr-only\">\n          {this.bindings.i18n.t('notifications')}\n        </Heading>\n        {this.renderNotifications()}\n      </Fragment>\n    );\n  }\n\n  private get notifications(): string[] {\n    return this.notifyTriggerState?.notifications || [];\n  }\n}\n"],"version":3}