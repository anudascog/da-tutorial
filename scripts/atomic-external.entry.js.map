{"file":"atomic-external.entry.js","mappings":";;;;;;;;;;;;;MAgBa,cAAc;;;;;;;QAKF,aAAQ,GAAG,yBAAyB,CAAC;wBAA1B,yBAAyB;;;IAEpD,oBAAoB,CAAC,KAAsB;QAChD,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,KAAK,CAAC,eAAe,EAAE,CAAC;QACxB,uBAAA,IAAI,gEAAW,CAAC,aAAa,CAC3B,gBAAgB,CAAC,mBAAmB,EAAE,KAAK,CAAC,MAAM,CAAC,CACpD,CAAC;KACH;IAGM,iBAAiB,CAAC,KAAkB;QACzC,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,KAAK,CAAC,eAAe,EAAE,CAAC;QACxB,uBAAA,IAAI,gEAAW,CAAC,aAAa,CAC3B,gBAAgB,CAAC,oBAAoB,EAAE,KAAK,CAAC,MAAM,CAAC,CACrD,CAAC;KACH;IAGM,iBAAiB,CAAC,KAAkB;QACzC,IAAI,KAAK,CAAC,MAAM,KAAK,IAAI,CAAC,cAAc,EAAE;YACxC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC9B;KACF;IAOD,iBAAiB;QACf,IAAI,aAAa,CAAC,uBAAA,IAAI,gEAAW,CAAC,EAAE;YAClC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC9B;KACF;;;;IAGC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;QACxB,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,SAAS,CAAC;QACzE,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;YACxB,MAAM,IAAI,KAAK,CACb,gDAAgD,IAAI,CAAC,QAAQ,GAAG,CACjE,CAAC;SACH;KACF;IAED,OAAO,IAAI,CAAC,cAAe,CAAC;AAC9B,CAAC;;;;","names":[],"sources":["src/components/search/atomic-external/atomic-external.tsx"],"sourcesContent":["import {markParentAsReady, isParentReady} from '@/src/utils/init-queue';\nimport {Component, Prop, Listen, Element} from '@stencil/core';\nimport {buildCustomEvent} from '../../../utils/event-utils';\nimport {\n  AtomicInterface,\n  InitializeEvent,\n  initializeEventName,\n} from '../../../utils/initialization-utils';\n\n/**\n * The `atomic-external` component allows components defined outside of the `atomic-search-interface` to initialize.\n */\n@Component({\n  tag: 'atomic-external',\n  shadow: false,\n})\nexport class AtomicExternal {\n  @Element() public host!: HTMLAtomicExternalElement;\n  /**\n   * The CSS selector that identifies the `atomic-search-interface` component with which to initialize the external components.\n   */\n  @Prop({reflect: true}) selector = 'atomic-search-interface';\n  @Listen('atomic/initializeComponent')\n  public handleInitialization(event: InitializeEvent) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.#interface.dispatchEvent(\n      buildCustomEvent(initializeEventName, event.detail)\n    );\n  }\n\n  @Listen('atomic/scrollToTop')\n  public handleScrollToTop(event: CustomEvent) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.#interface.dispatchEvent(\n      buildCustomEvent('atomic/scrollToTop', event.detail)\n    );\n  }\n\n  @Listen('atomic/parentReady', {target: 'window'})\n  public handleParentReady(event: CustomEvent) {\n    if (event.target === this.boundInterface) {\n      markParentAsReady(this.host);\n    }\n  }\n\n  /**\n   * Represents the bound interface for the AtomicExternal component.\n   */\n  @Prop({mutable: true}) boundInterface?: AtomicInterface;\n\n  connectedCallback() {\n    if (isParentReady(this.#interface)) {\n      markParentAsReady(this.host);\n    }\n  }\n\n  get #interface() {\n    if (!this.boundInterface) {\n      this.boundInterface = document.querySelector(this.selector) ?? undefined;\n      if (!this.boundInterface) {\n        throw new Error(\n          `Cannot find interface element with selector \"${this.selector}\"`\n        );\n      }\n    }\n\n    return this.boundInterface!;\n  }\n}\n"],"version":3}