{"file":"stencil-facet-value.js","mappings":";;;;;;;MAsBa,UAAU,GAAyC,CAAC,EAC/D,gBAAgB,EAChB,eAAe,EACf,eAAe,EACf,UAAU,EACV,UAAU,EACV,UAAU,EACV,KAAK,EACL,IAAI,EACJ,SAAS,EACT,QAAQ,EACR,MAAM,GACP;IACC,MAAM,YAAY,GAAG,oBAAoB,CAAC,KAAK,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;IACnE,MAAM,UAAU,GAAG,UAAU,KAAK,UAAU,CAAC;IAC7C,MAAM,UAAU,GAAG,UAAU,KAAK,UAAU,CAAC;IAC7C,MAAM,aAAa,GAAG,eAAe;UACjC;YACE,SAAS;YACT,KAAK,EAAE,UAAU;SAClB;UACD,EAAE,CAAC;IACP,QAAQ,eAAe;QACrB,KAAK,UAAU;YACb,QACE,EAAC,kBAAkB,OACb,aAAa,EACjB,YAAY,EAAE,YAAY,EAC1B,eAAe,EAAE,UAAU,EAC3B,UAAU,EAAE,UAAU,EACtB,IAAI,EAAE,IAAI,EACV,OAAO,EAAE,QAAQ,EACjB,WAAW,EAAE,gBAAgB,EAC7B,SAAS,EAAE,CAAC,OAAO;oBACjB,MAAM,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC;iBAC3B;gBAED,EAAC,wBAAwB,IACvB,YAAY,EAAE,YAAY,EAC1B,UAAU,EAAE,UAAU,EACtB,UAAU,EAAE,UAAU,EACtB,WAAW,EAAE,gBAAgB,GACH,CACT,EACrB;QACJ,KAAK,MAAM;YACT,QACE,EAAC,cAAc,IACb,YAAY,EAAE,YAAY,EAC1B,eAAe,EAAE,UAAU,EAC3B,UAAU,EAAE,UAAU,EACtB,IAAI,EAAE,IAAI,EACV,OAAO,EAAE,QAAQ,EACjB,WAAW,EAAE,gBAAgB,EAC7B,SAAS,EAAE,CAAC,OAAO;oBACjB,MAAM,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC;iBAC3B;gBAED,EAAC,wBAAwB,IACvB,YAAY,EAAE,YAAY,EAC1B,UAAU,EAAE,UAAU,EACtB,WAAW,EAAE,gBAAgB,GACH,CACb,EACjB;QACJ,KAAK,KAAK;YACR,QACE,EAAC,aAAa,IACZ,YAAY,EAAE,YAAY,EAC1B,eAAe,EAAE,UAAU,EAC3B,UAAU,EAAE,UAAU,EACtB,IAAI,EAAE,IAAI,EACV,OAAO,EAAE,QAAQ,EACjB,WAAW,EAAE,gBAAgB,EAC7B,SAAS,EAAE,CAAC,OAAO;oBACjB,MAAM,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC;iBAC3B;gBAED,EAAC,wBAAwB,IACvB,YAAY,EAAE,YAAY,EAC1B,UAAU,EAAE,UAAU,EACtB,WAAW,EAAE,gBAAgB,GACH,CACd,EAChB;KACL;AACH;;;;","names":[],"sources":["src/components/common/facets/facet-value/stencil-facet-value.tsx"],"sourcesContent":["import {FunctionalComponent, h} from '@stencil/core';\nimport {i18n} from 'i18next';\nimport {getFieldValueCaption} from '../../../../utils/field-utils';\nimport {FacetValueBox} from '../facet-value-box/stencil-facet-value-box';\nimport {FacetValueCheckbox} from '../facet-value-checkbox/stencil-facet-value-checkbox';\nimport {FacetValueLabelHighlight} from '../facet-value-label-highlight/stencil-facet-value-label-highlight';\nimport {FacetValueLink} from '../facet-value-link/stencil-facet-value-link';\n\nexport interface FacetValueProps {\n  field: string;\n  facetValue: string;\n  facetCount: number;\n  facetState: 'idle' | 'selected' | 'excluded';\n  i18n: i18n;\n  enableExclusion: boolean;\n  onExclude: () => void;\n  onSelect: () => void;\n  displayValuesAs: 'checkbox' | 'link' | 'box';\n  facetSearchQuery: string;\n  setRef?: (btn?: HTMLButtonElement) => void;\n}\n\nexport const FacetValue: FunctionalComponent<FacetValueProps> = ({\n  facetSearchQuery,\n  displayValuesAs,\n  enableExclusion,\n  facetCount,\n  facetState,\n  facetValue,\n  field,\n  i18n,\n  onExclude,\n  onSelect,\n  setRef,\n}) => {\n  const displayValue = getFieldValueCaption(field, facetValue, i18n);\n  const isSelected = facetState === 'selected';\n  const isExcluded = facetState === 'excluded';\n  const triStateProps = enableExclusion\n    ? {\n        onExclude,\n        state: facetState,\n      }\n    : {};\n  switch (displayValuesAs) {\n    case 'checkbox':\n      return (\n        <FacetValueCheckbox\n          {...triStateProps}\n          displayValue={displayValue}\n          numberOfResults={facetCount}\n          isSelected={isSelected}\n          i18n={i18n}\n          onClick={onSelect}\n          searchQuery={facetSearchQuery}\n          buttonRef={(element) => {\n            setRef && setRef(element);\n          }}\n        >\n          <FacetValueLabelHighlight\n            displayValue={displayValue}\n            isSelected={isSelected}\n            isExcluded={isExcluded}\n            searchQuery={facetSearchQuery}\n          ></FacetValueLabelHighlight>\n        </FacetValueCheckbox>\n      );\n    case 'link':\n      return (\n        <FacetValueLink\n          displayValue={displayValue}\n          numberOfResults={facetCount}\n          isSelected={isSelected}\n          i18n={i18n}\n          onClick={onSelect}\n          searchQuery={facetSearchQuery}\n          buttonRef={(element) => {\n            setRef && setRef(element);\n          }}\n        >\n          <FacetValueLabelHighlight\n            displayValue={displayValue}\n            isSelected={isSelected}\n            searchQuery={facetSearchQuery}\n          ></FacetValueLabelHighlight>\n        </FacetValueLink>\n      );\n    case 'box':\n      return (\n        <FacetValueBox\n          displayValue={displayValue}\n          numberOfResults={facetCount}\n          isSelected={isSelected}\n          i18n={i18n}\n          onClick={onSelect}\n          searchQuery={facetSearchQuery}\n          buttonRef={(element) => {\n            setRef && setRef(element);\n          }}\n        >\n          <FacetValueLabelHighlight\n            displayValue={displayValue}\n            isSelected={isSelected}\n            searchQuery={facetSearchQuery}\n          ></FacetValueLabelHighlight>\n        </FacetValueBox>\n      );\n  }\n};\n"],"version":3}