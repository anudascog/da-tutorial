{"file":"atomic-insight-result-children.entry.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,MAAM,8BAA8B,GAAG,0+1DAA0+1D,CAAC;AAClh2D,0CAAe,8BAA8B;;;;;;;;;;;;ACgC7C,MAAM,sBAAsB,GAAG,yCAAyC,CAAC;AACzE,MAAM,YAAY,GAAG,gCAAgC,CAAC;MAUzC,oBAAoB;;;QAgBd,6BAAwB,GAAG,KAAK,CAAC;QACjC,qBAAgB,GAAG,KAAK,CAAC;QAKlC,wBAAmB,GAAG,KAAK,CAAC;;;;QAK5B,qBAAgB,GAAG,KAAK,CAAC;;;;QAQlB,iBAAY,GAAG,sBAAsB,CAAC;QAsF7C,8BAAyB,GAAG;YAClC,IAAI,CAAC,mBAAmB;kBACpB,IAAI,CAAC,gBAAgB,CAAC,wBAAwB,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;kBAClE,IAAI,CAAC,gBAAgB,CAAC,wBAAwB,EAAE,CAAC;YAErD,IAAI,CAAC,mBAAmB,GAAG,CAAC,IAAI,CAAC,mBAAmB,CAAC;SACtD,CAAC;;wCA/G0C,KAAK;gCACb,KAAK;;mCAKX,KAAK;gCAKR,KAAK;;4BAQF,sBAAsB;;IAG7C,qBAAqB,CAAC,KAAiC;QAC5D,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;KACzC;IAEM,UAAU;QACf,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACzB,OAAO;SACR;QAED,MAAM,iBAAiB,GAAG,KAAK,CAAC,IAAI,CAClC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,CACnD,CAAC,MAAM,CACN,CAAC,QAAQ,KAAK,CAAC,qBAAqB,CAAC,QAAQ,EAAE,sBAAsB,CAAC,CACvE,CAAC;QAEF,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE;YAC7B,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,CACpB,QAAQ,YAAY,sCAAsC,sBAAsB,cAAc,CAC/F,CAAC;YACF,OAAO;SACR;QAED,IAAI,CAAC,oBAAoB,GAAG,IAAI,oBAAoB,CAAC;YACnD,sBAAsB,EAAE,KAAK;YAC7B,gBAAgB,EAAE,iBAAiB;YACnC,2BAA2B,EAAE,MAAM,IAAI,CAAC,wBAAwB;YAChE,mBAAmB,EAAE,MAAM,IAAI,CAAC,gBAAgB;YAChD,2BAA2B,EAAE,CAAC,KAAc;gBAC1C,IAAI,CAAC,wBAAwB,GAAG,KAAK,CAAC;aACvC;YACD,mBAAmB,EAAE,CAAC,KAAc;gBAClC,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;aAC/B;YACD,QAAQ,EAAE,IAAI,CAAC,QAAQ;SACxB,CAAC,CAAC;KACJ;IAEO,WAAW,CAAC,KAA0B,EAAE,MAAe;QAC7D,MAAM,OAAO,GAAG,IAAI,CAAC,oBAAoB,EAAE,kBAAkB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAE5E,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO;SACR;QAED,MAAM,GAAG,GACP,KAAK,CAAC,MAAM,CAAC,QAAQ;YACrB,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACvD,QACE,6BACE,GAAG,EAAE,GAAG,EACR,OAAO,EAAE,OAAO,EAChB,MAAM,EAAE,KAAK,EACb,iBAAiB,EAAEA,sBAA6B,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;gBACrE,OAAO,EAAE,EAAC,MAAM,EAAE,mBAAmB,CAAC,KAAK,CAAC,EAAC;aAC9C,CAAC,EACF,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,EAC1B,OAAO,EAAE,IAAI,CAAC,aAAa,CAAC,OAAO,EACnC,SAAS,EAAE,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,aAAa,CAAC,SAAS,EACzD,OAAO,EAAE,gBAAgB,MAAM,GAAG,YAAY,GAAG,EAAE,EAAE,CAAC,IAAI,EAAE,GACrC,EACzB;KACH;IAEM,mBAAmB;QACxB,IAAI,IAAI,CAAC,eAAe,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YAC5C,OAAO;SACR;QAED,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;KACjD;IAED,IAAY,UAAU;QACpB,OAAO,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YAC/C,OAAO,CAAC,CAAC,MAAM,CAAC,QAAQ,KAAK,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC;SAC1D,CAAC,CAAC;KACJ;IAEO,kBAAkB;QACxB,IAAI,CAAC,IAAI,CAAC,aAAa,CACrB,gBAAgB,CAAC,uBAAuB,EAAE,IAAI,CAAC,UAAU,CAAC,CAC3D,CAAC;KACH;IAQO,gBAAgB;QACtB,MAAM,UAAU,GAAG,IAAI,CAAC,UAAW,CAAC;QAEpC,MAAM,QAAQ,GAAG,IAAI,CAAC,mBAAmB;cACrC,IAAI,CAAC,eAAe;cACpB,UAAU,CAAC,QAAQ,CAAC;QAExB,QACE,EAAC,eAAe,IACd,oBAAoB,EAAE,UAAU,CAAC,oBAAoB,EACrD,oBAAoB,EAAE,UAAU,CAAC,oBAAoB,EACrD,WAAW,EAAE,UAAU,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAC3C,gBAAgB,EAAE,UAAU,CAAC,QAAQ,CAAC,MAAM,EAC5C,OAAO,EAAE,IAAI,CAAC,aAAa,CAAC,OAAO,EACnC,SAAS,EAAE,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,aAAa,CAAC,SAAS,EACzD,YAAY,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,IAErD,EAAC,cAAc,IACb,oBAAoB,EAAE,UAAU,CAAC,oBAAoB,EACrD,kBAAkB,EAAE,MAAM,IAAI,CAAC,kBAAkB,EAAE,EACnD,mBAAmB,EAAE,IAAI,CAAC,mBAAmB,EAC7C,yBAAyB,EAAE,IAAI,CAAC,yBAAyB,EACzD,cAAc,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,kBAAkB,CAAC,EACxD,eAAe,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,kBAAkB,CAAC,GACzC,EAClB,EAAC,eAAe,IAAC,WAAW,EAAE,UAAU,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,IACzD,QAAQ,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC,KACrB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,KAAK,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CACnD,CACe,CACF,EAClB;KACH;IAEO,kBAAkB;QACxB,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;YACrC,OAAO;SACR;QAED,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;QAEtC,QACE,EAAC,eAAe,IAAC,WAAW,EAAE,QAAQ,CAAC,MAAM,GAAG,CAAC,IAC9C,QAAQ,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC,KACrB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,KAAK,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CACnD,CACe,EAClB;KACH;IAEM,MAAM;QACX,QACE,EAAC,mBAAmB,qDAClB,gBAAgB,EAAE,IAAI,CAAC,gBAAgB,EACvC,wBAAwB,EAAE,IAAI,CAAC,wBAAwB,EACvD,gBAAgB,EAAE,IAAI,CAAC,gBAAgB,IAEtC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,gBAAgB,EAAE,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAClD,EACtB;KACH;;;AAzL4B;IAA5B,kBAAkB,EAAE;sDAAmC;AAEjD;IADN,qBAAqB,EAAE;kEAC2B;AAE3C;IADP,qBAAqB,EAAE;8DAC2B;AAE3C;IADP,WAAW,CAAC,EAAC,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,uBAAuB,EAAC,CAAC;oDAC5B;AAE7B;IADP,wBAAwB,EAAE;2DACW;AAS9B;IAFP,0BAA0B,EAAE;mEAEgC;;;;;","names":["buildInsightInteractiveResult"],"sources":["src/components/insight/result-templates/atomic-insight-result-children/atomic-insight-result-children.pcss?tag=atomic-insight-result-children&encapsulation=shadow","src/components/insight/result-templates/atomic-insight-result-children/atomic-insight-result-children.tsx"],"sourcesContent":["@import '../../../../components/common/result-children/result-children.pcss';\n\n[part='children-root'] {\n  @apply border-neutral border-l;\n  padding-left: 1rem;\n  margin-top: 1rem;\n}\n","import {\n  buildInteractiveResult as buildInsightInteractiveResult,\n  FoldedResultListState as InsightFoldedResultListState,\n  FoldedResult as InsightFoldedResult,\n  FoldedResultList as InsightFoldedResultList,\n} from '@coveo/headless/insight';\nimport {Component, Element, State, h, Listen, Prop} from '@stencil/core';\nimport {buildCustomEvent} from '../../../../utils/event-utils';\nimport {\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {elementHasAncestorTag} from '../../../../utils/utils';\nimport {extractUnfoldedItem} from '../../../common/interface/item';\nimport {\n  ChildTemplatesContext,\n  ChildTemplatesContextEvent,\n  DisplayConfig,\n  ItemContext,\n  ItemDisplayConfigContext,\n} from '../../../common/item-list/item-decorators';\nimport {\n  FoldedItemListContext,\n  FoldedItemListStateContext,\n} from '../../../common/item-list/item-list-decorators';\nimport {ItemTemplateProvider} from '../../../common/item-list/item-template-provider';\nimport {ItemDisplayImageSize} from '../../../common/layout/display-options';\nimport {ChildrenWrapper} from '../../../common/result-children/children-wrapper';\nimport {CollectionGuard} from '../../../common/result-children/collection-guard';\nimport {ResultChildrenGuard} from '../../../common/result-children/guard';\nimport {ShowHideButton} from '../../../common/result-children/show-hide-button';\nimport {InsightBindings} from '../../atomic-insight-interface/atomic-insight-interface';\n\nconst childTemplateComponent = 'atomic-insight-result-children-template';\nconst componentTag = 'atomic-insight-result-children';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-result-children',\n  styleUrl: 'atomic-insight-result-children.pcss',\n  shadow: true,\n})\nexport class AtomicResultChildren\n  implements InitializableComponent<InsightBindings>\n{\n  @InitializeBindings() public bindings!: InsightBindings;\n  @ChildTemplatesContext()\n  public itemTemplateProvider?: ItemTemplateProvider;\n  @FoldedItemListContext()\n  private foldedResultList!: InsightFoldedResultList;\n  @ItemContext({folded: true, parentName: 'atomic-insight-result'})\n  private result!: InsightFoldedResult;\n  @ItemDisplayConfigContext()\n  private displayConfig!: DisplayConfig;\n  private initialChildren!: InsightFoldedResult[];\n\n  @Element() public host!: HTMLDivElement;\n  @State() public error!: Error;\n  @State() private resultTemplateRegistered = false;\n  @State() private templateHasError = false;\n  @FoldedItemListStateContext()\n  @State()\n  private foldedResultListState!: InsightFoldedResultListState;\n  @State()\n  private showInitialChildren = false;\n\n  /**\n   * Whether to inherit templates defined in a parent atomic-result-children. Only works for the second level of child nesting.\n   */\n  @Prop() inheritTemplates = false;\n  /**\n   * The expected size of the image displayed in the children results.\n   */\n  @Prop({reflect: true}) imageSize?: ItemDisplayImageSize;\n  /**\n   * The non-localized copy for an empty result state. An empty string will result in the component being hidden.\n   */\n  @Prop() public noResultText = 'no-documents-related';\n\n  @Listen('atomic/resolveChildTemplates')\n  public resolveChildTemplates(event: ChildTemplatesContextEvent) {\n    event.preventDefault();\n    event.detail(this.itemTemplateProvider);\n  }\n\n  public initialize() {\n    if (this.inheritTemplates) {\n      return;\n    }\n\n    const childrenTemplates = Array.from(\n      this.host.querySelectorAll(childTemplateComponent)\n    ).filter(\n      (template) => !elementHasAncestorTag(template, childTemplateComponent)\n    );\n\n    if (!childrenTemplates.length) {\n      this.error = new Error(\n        `The \"${componentTag}\" component requires at least one \"${childTemplateComponent}\" component.`\n      );\n      return;\n    }\n\n    this.itemTemplateProvider = new ItemTemplateProvider({\n      includeDefaultTemplate: false,\n      templateElements: childrenTemplates,\n      getResultTemplateRegistered: () => this.resultTemplateRegistered,\n      getTemplateHasError: () => this.templateHasError,\n      setResultTemplateRegistered: (value: boolean) => {\n        this.resultTemplateRegistered = value;\n      },\n      setTemplateHasError: (value: boolean) => {\n        this.templateHasError = value;\n      },\n      bindings: this.bindings,\n    });\n  }\n\n  private renderChild(child: InsightFoldedResult, isLast: boolean) {\n    const content = this.itemTemplateProvider?.getTemplateContent(child.result);\n\n    if (!content) {\n      return;\n    }\n\n    const key =\n      child.result.uniqueId +\n      child.children.map((child) => child.result.uniqueId);\n    return (\n      <atomic-insight-result\n        key={key}\n        content={content}\n        result={child}\n        interactiveResult={buildInsightInteractiveResult(this.bindings.engine, {\n          options: {result: extractUnfoldedItem(child)},\n        })}\n        store={this.bindings.store}\n        density={this.displayConfig.density}\n        imageSize={this.imageSize || this.displayConfig.imageSize}\n        classes={`child-result ${isLast ? 'last-child' : ''}`.trim()}\n      ></atomic-insight-result>\n    );\n  }\n\n  public componentWillRender() {\n    if (this.initialChildren || !this.collection) {\n      return;\n    }\n\n    this.initialChildren = this.collection.children;\n  }\n\n  private get collection() {\n    return this.foldedResultListState.results.find((r) => {\n      return r.result.uniqueId === this.result.result.uniqueId;\n    });\n  }\n\n  private loadFullCollection() {\n    this.host.dispatchEvent(\n      buildCustomEvent('atomic/loadCollection', this.collection)\n    );\n  }\n  private toggleShowInitialChildren = () => {\n    this.showInitialChildren\n      ? this.foldedResultList.logShowMoreFoldedResults(this.result.result)\n      : this.foldedResultList.logShowLessFoldedResults();\n\n    this.showInitialChildren = !this.showInitialChildren;\n  };\n  private renderCollection() {\n    const collection = this.collection!;\n\n    const children = this.showInitialChildren\n      ? this.initialChildren\n      : collection.children;\n\n    return (\n      <CollectionGuard\n        isLoadingMoreResults={collection.isLoadingMoreResults}\n        moreResultsAvailable={collection.moreResultsAvailable}\n        hasChildren={collection.children.length > 0}\n        numberOfChildren={collection.children.length}\n        density={this.displayConfig.density}\n        imageSize={this.imageSize || this.displayConfig.imageSize}\n        noResultText={this.bindings.i18n.t(this.noResultText)}\n      >\n        <ShowHideButton\n          moreResultsAvailable={collection.moreResultsAvailable}\n          loadFullCollection={() => this.loadFullCollection()}\n          showInitialChildren={this.showInitialChildren}\n          toggleShowInitialChildren={this.toggleShowInitialChildren}\n          loadAllResults={this.bindings.i18n.t('load-all-results')}\n          collapseResults={this.bindings.i18n.t('collapse-results')}\n        ></ShowHideButton>\n        <ChildrenWrapper hasChildren={collection.children.length > 0}>\n          {children.map((child, i) =>\n            this.renderChild(child, i === children.length - 1)\n          )}\n        </ChildrenWrapper>\n      </CollectionGuard>\n    );\n  }\n\n  private renderFoldedResult() {\n    if (this.result.children.length === 0) {\n      return;\n    }\n\n    const children = this.result.children;\n\n    return (\n      <ChildrenWrapper hasChildren={children.length > 0}>\n        {children.map((child, i) =>\n          this.renderChild(child, i === children.length - 1)\n        )}\n      </ChildrenWrapper>\n    );\n  }\n\n  public render() {\n    return (\n      <ResultChildrenGuard\n        inheritTemplates={this.inheritTemplates}\n        resultTemplateRegistered={this.resultTemplateRegistered}\n        templateHasError={this.templateHasError}\n      >\n        {this.collection ? this.renderCollection() : this.renderFoldedResult()}\n      </ResultChildrenGuard>\n    );\n  }\n}\n"],"version":3}