{"version":3,"names":["getPartialInstantItemElement","i18n","itemTitle","itemUniqueId","ariaLabel","t","title","interpolation","escapeValue","key","encodeForDomAttribute","part","getPartialInstantItemShowAllElement","InstantItemShowAllButton","h","class","getClassNameForButtonStyle","AtomicSearchBoxInstantResults","this","results","display","templateHasError","maxResultsPerQuery","density","imageSize","setRenderFunction","resultRenderingFunction","itemRenderingFunction","componentWillLoad","dispatchSearchBoxSuggestionsEvent","bindings","initialize","host","error","getLink","el","atomicResult","tagName","querySelector","shadowRoot","handleLinkClick","hasModifier","setTarget","value","setAttribute","initialTarget","getAttribute","click","renderItems","suggestedQuery","store","isMobile","instantResults","state","length","elements","map","result","partialItem","ariaLabelGenerator","uniqueId","content","interactiveResult","buildInteractiveInstantResult","engine","options","itemTemplateProvider","getTemplateContent","stopPropagation","renderingFunction","onSelect","e","link","target","ctrlKey","metaKey","push","clearSuggestions","searchBoxController","updateText","q","submit","buildInstantResults","ItemTemplateProvider","includeDefaultTemplate","templateElements","Array","from","querySelectorAll","getResultTemplateRegistered","setResultTemplateRegistered","getTemplateHasError","setTemplateHasError","position","parentNode","children","indexOf","panel","onSuggestedQueryChange","updateQuery","getSuggestionElements","console","warn","Promise","resolve","unsubscribe","subscribe","isLoading","render","element"],"sources":["src/components/common/suggestions/stencil-instant-item.tsx","src/components/search/search-box-suggestions/atomic-search-box-instant-results/atomic-search-box-instant-results.tsx"],"sourcesContent":["import {FunctionalComponent, h} from '@stencil/core';\nimport {i18n} from 'i18next';\nimport {encodeForDomAttribute} from '../../../utils/string-utils';\nimport {getClassNameForButtonStyle} from '../stencil-button-style';\nimport {SearchBoxSuggestionElement} from './suggestions-common';\n\nexport const getPartialInstantItemElement = (\n  i18n: i18n,\n  itemTitle: string,\n  itemUniqueId: string\n): Pick<SearchBoxSuggestionElement, 'ariaLabel' | 'key' | 'part'> => {\n  return {\n    ariaLabel: i18n.t('instant-results-suggestion-label', {\n      title: itemTitle,\n      interpolation: {escapeValue: false},\n    }),\n    key: `instant-result-${encodeForDomAttribute(itemUniqueId)}`,\n    part: 'instant-results-item',\n  };\n};\n\nexport const getPartialInstantItemShowAllElement = (\n  i18n: i18n\n): Pick<SearchBoxSuggestionElement, 'key' | 'part' | 'ariaLabel'> => {\n  return {\n    key: 'instant-results-show-all-button',\n    part: 'instant-results-show-all',\n    ariaLabel: i18n.t('show-all-results'),\n  };\n};\n\ninterface InstantItemShowAllButtonProps {\n  i18n: i18n;\n}\nexport const InstantItemShowAllButton: FunctionalComponent<\n  InstantItemShowAllButtonProps\n> = ({i18n}) => {\n  return (\n    <div\n      part=\"instant-results-show-all-button\"\n      class={getClassNameForButtonStyle('text-primary')}\n    >\n      {i18n.t('show-all-results')}\n    </div>\n  );\n};\n","import {\n  buildInstantResults,\n  buildInteractiveInstantResult,\n  InstantResults,\n  Result,\n  SearchBox,\n} from '@coveo/headless';\nimport {Component, Element, State, h, Prop, Method} from '@stencil/core';\nimport {InitializableComponent} from '../../../../utils/initialization-utils';\nimport {encodeForDomAttribute} from '../../../../utils/string-utils';\nimport {ItemTemplateProvider} from '../../../common/item-list/item-template-provider';\nimport {ItemRenderingFunction} from '../../../common/item-list/stencil-item-list-common';\nimport {\n  ItemDisplayDensity,\n  ItemDisplayImageSize,\n  ItemDisplayLayout,\n} from '../../../common/layout/display-options';\nimport {\n  getPartialInstantItemElement,\n  getPartialInstantItemShowAllElement,\n  InstantItemShowAllButton,\n} from '../../../common/suggestions/stencil-instant-item';\nimport {\n  dispatchSearchBoxSuggestionsEvent,\n  SearchBoxSuggestionElement,\n  SearchBoxSuggestions,\n  SearchBoxSuggestionsBindings,\n} from '../../../common/suggestions/suggestions-common';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\n\nexport type AriaLabelGenerator = (\n  bindings: Bindings,\n  result: Result\n) => string | undefined;\n\n/**\n * The `atomic-search-box-instant-results` component can be added as a child of an `atomic-search-box` component, allowing for the configuration of instant results behavior.\n *\n * This component does not support accessibility out-of-the-box. To do so, see [Instant Results Accessibility](https://docs.coveo.com/en/atomic/latest/usage/accessibility/#instant-results-accessibility).\n *\n * This component is not supported on mobile.\n *\n * @slot default - The default slot where the instant results are rendered.\n */\n@Component({\n  tag: 'atomic-search-box-instant-results',\n  shadow: true,\n})\nexport class AtomicSearchBoxInstantResults implements InitializableComponent {\n  public bindings!: SearchBoxSuggestionsBindings<SearchBox, Bindings>;\n  private itemRenderingFunction: ItemRenderingFunction;\n  private results: Result[] = [];\n  private itemTemplateProvider!: ItemTemplateProvider;\n  private instantResults!: InstantResults;\n  private display: ItemDisplayLayout = 'list';\n\n  @Element() public host!: HTMLElement;\n\n  @State() public error!: Error;\n  @State() private templateHasError = false;\n\n  /**\n   * Sets a rendering function to bypass the standard HTML template mechanism for rendering results.\n   * You can use this function while working with web frameworks that don't use plain HTML syntax, e.g., React, Angular or Vue.\n   *\n   * Do not use this method if you integrate Atomic in a plain HTML deployment.\n   *\n   * @param resultRenderingFunction\n   */\n  @Method() public async setRenderFunction(\n    resultRenderingFunction: ItemRenderingFunction\n  ) {\n    this.itemRenderingFunction = resultRenderingFunction;\n  }\n  /**\n   * The maximum number of results to show.\n   */\n  @Prop({reflect: true}) public maxResultsPerQuery = 4;\n  /**\n   * The spacing of various elements in the result list, including the gap between results, the gap between parts of a result, and the font sizes of different parts in a result.\n   */\n  @Prop({reflect: true}) public density: ItemDisplayDensity = 'normal';\n  /**\n   * The expected size of the image displayed in the results.\n   */\n  @Prop({reflect: true}) public imageSize: ItemDisplayImageSize = 'icon';\n  /**\n   * The callback to generate an [`aria-label`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label) for a given result so that accessibility tools can fully describe what's visually rendered by a result.\n   *\n   * By default, or if an empty string is returned, `result.title` is used.\n   */\n  @Prop() public ariaLabelGenerator?: AriaLabelGenerator;\n\n  public componentWillLoad() {\n    try {\n      dispatchSearchBoxSuggestionsEvent<SearchBox, Bindings>(\n        (bindings) => {\n          this.bindings = bindings;\n          return this.initialize();\n        },\n        this.host,\n        ['atomic-search-box']\n      );\n    } catch (error) {\n      this.error = error as Error;\n    }\n  }\n\n  private getLink(el: HTMLElement): HTMLElement | null {\n    const atomicResult =\n      el.tagName === 'ATOMIC-RESULT' ? el : el?.querySelector('atomic-result');\n\n    return (\n      atomicResult?.shadowRoot?.querySelector(\n        'atomic-result-link a:not([slot])'\n      ) || null\n    );\n  }\n\n  private handleLinkClick(el: HTMLElement, hasModifier: boolean) {\n    const setTarget = (value: string) => el.setAttribute('target', value);\n    const initialTarget = el.getAttribute('target');\n\n    hasModifier && setTarget('_blank');\n    el.click();\n    hasModifier && setTarget(initialTarget || '');\n\n    return true;\n  }\n\n  private renderItems(): SearchBoxSuggestionElement[] {\n    if (!this.bindings.suggestedQuery() || this.bindings.store.isMobile()) {\n      return [];\n    }\n    const results = this.instantResults.state.results.length\n      ? this.instantResults.state.results\n      : this.results;\n\n    const elements: SearchBoxSuggestionElement[] = results.map(\n      (result: Result) => {\n        const partialItem = getPartialInstantItemElement(\n          this.bindings.i18n,\n          this.ariaLabelGenerator?.(this.bindings, result) || result.title,\n          result.uniqueId\n        );\n        return {\n          ...partialItem,\n          content: (\n            <atomic-result\n              key={`instant-result-${encodeForDomAttribute(result.uniqueId)}`}\n              part=\"outline\"\n              result={result}\n              interactiveResult={buildInteractiveInstantResult(\n                this.bindings.engine,\n                {\n                  options: {result},\n                }\n              )}\n              display={this.display}\n              density={this.density}\n              imageSize={this.imageSize}\n              content={this.itemTemplateProvider.getTemplateContent(result)}\n              stopPropagation={false}\n              renderingFunction={this.itemRenderingFunction}\n            ></atomic-result>\n          ),\n          onSelect: (e: MouseEvent) => {\n            const link = this.getLink(e.target as HTMLElement);\n\n            if (!link) {\n              return;\n            }\n            this.handleLinkClick(link, e.ctrlKey || e.metaKey);\n          },\n        };\n      }\n    );\n    if (elements.length) {\n      const partialItem = getPartialInstantItemShowAllElement(\n        this.bindings.i18n\n      );\n      elements.push({\n        ...partialItem,\n        content: <InstantItemShowAllButton i18n={this.bindings.i18n} />,\n        onSelect: () => {\n          this.bindings.clearSuggestions();\n          this.bindings.searchBoxController.updateText(\n            this.instantResults.state.q\n          );\n          this.bindings.searchBoxController.submit();\n        },\n      });\n    }\n    return elements;\n  }\n\n  public initialize(): SearchBoxSuggestions {\n    this.instantResults = buildInstantResults(this.bindings.engine, {\n      options: {\n        maxResultsPerQuery: this.maxResultsPerQuery,\n      },\n    });\n\n    this.itemTemplateProvider = new ItemTemplateProvider({\n      includeDefaultTemplate: true,\n      templateElements: Array.from(\n        this.host.querySelectorAll('atomic-result-template')\n      ),\n      getResultTemplateRegistered: () => true,\n      setResultTemplateRegistered: () => {},\n      getTemplateHasError: () => this.templateHasError,\n      setTemplateHasError: (value: boolean) => {\n        this.templateHasError = value;\n      },\n      bindings: this.bindings,\n    });\n\n    return {\n      position: Array.from(this.host.parentNode!.children).indexOf(this.host),\n      panel: 'right',\n      onSuggestedQueryChange: (q) => {\n        this.instantResults.updateQuery(q);\n        return this.onSuggestedQueryChange();\n      },\n      renderItems: () => this.renderItems(),\n    };\n  }\n\n  private onSuggestedQueryChange() {\n    if (\n      !this.bindings.getSuggestionElements().length &&\n      !this.bindings.searchBoxController.state.value\n    ) {\n      console.warn(\n        \"There doesn't seem to be any query suggestions configured. Make sure to include either an atomic-search-box-query-suggestions or atomic-search-box-recent-queries in your search box in order to see some instant results.\"\n      );\n    }\n\n    return new Promise<void>((resolve) => {\n      const unsubscribe = this.instantResults.subscribe(() => {\n        const state = this.instantResults.state;\n        if (!state.isLoading) {\n          if (state.results.length) {\n            this.results = state.results;\n          }\n          unsubscribe();\n          resolve();\n        }\n      });\n    });\n  }\n\n  public render() {\n    if (this.error) {\n      return (\n        <atomic-component-error\n          element={this.host}\n          error={this.error}\n        ></atomic-component-error>\n      );\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}