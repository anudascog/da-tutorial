{"version":3,"names":["SortContainer","_","children","h","class","SortGuard","hasError","firstSearchExecuted","hasResults","part","Fragment","SortLabel","id","i18n","htmlFor","t","text","SortSelect","onSelect","onChange","option","icon","ArrowBottomIcon","atomicSortDropdownCss","AtomicSortDropdownStyle0","AtomicSortDropdown","connectedCallback","this","randomID","initialize","buildOptions","searchStatus","buildSearchStatus","bindings","engine","sort","buildSort","initialState","criterion","store","state","sortOptions","criteria","tabManager","buildTabManager","sortExpressionElements","Array","from","host","querySelectorAll","length","error","Error","map","expression","label","tabsIncluded","tabsExcluded","Schema","StringValue","emptyAllowed","required","validate","tabs","included","excluded","parseCriterionExpression","options","filter","shouldDisplayOnCurrentTab","tabManagerState","activeTab","select","e","composedPath","find","value","sortBy","componentShouldUpdate","some","trim","replace","sortState","sortCriteria","action","loadSortCriteriaActions","updateSortCriterion","dispatch","render","searchStatusState","key","evt","SortOption","selected","isSortedBy","__decorate","InitializeBindings","BindStateToController"],"sources":["src/components/common/sort/container.tsx","src/components/common/sort/stencil-guard.tsx","src/components/common/sort/stencil-label.tsx","src/components/common/sort/stencil-select.tsx","src/components/search/atomic-sort-dropdown/atomic-sort-dropdown.pcss?tag=atomic-sort-dropdown&encapsulation=shadow","src/components/search/atomic-sort-dropdown/atomic-sort-dropdown.tsx"],"sourcesContent":["import {FunctionalComponent, h} from '@stencil/core';\n\nexport const SortContainer: FunctionalComponent = (_, children) => {\n  return (\n    <div class=\"text-on-background flex flex-wrap items-center\">{children}</div>\n  );\n};\n","import {Fragment, FunctionalComponent, h} from '@stencil/core';\n\ninterface SortGuardProps {\n  hasError: boolean;\n  firstSearchExecuted: boolean;\n  hasResults: boolean;\n}\nexport const SortGuard: FunctionalComponent<SortGuardProps> = (\n  {hasError, firstSearchExecuted, hasResults},\n  children\n) => {\n  if (hasError) {\n    return;\n  }\n\n  if (!firstSearchExecuted) {\n    return (\n      <div\n        part=\"placeholder\"\n        aria-hidden\n        class=\"bg-neutral my-2 h-6 w-44 animate-pulse rounded\"\n      ></div>\n    );\n  }\n\n  if (!hasResults) {\n    return;\n  }\n\n  return <Fragment>{children}</Fragment>;\n};\n","import {FunctionalComponent, h} from '@stencil/core';\nimport {i18n} from 'i18next';\n\ninterface SortLabelProps {\n  id: string;\n  i18n: i18n;\n}\n\nexport const SortLabel: FunctionalComponent<SortLabelProps> = ({id, i18n}) => {\n  return (\n    <label\n      class=\"m-2 cursor-pointer text-sm font-bold\"\n      part=\"label\"\n      htmlFor={id}\n    >\n      {i18n.t('with-colon', {\n        text: i18n.t('sort-by'),\n      })}\n    </label>\n  );\n};\n","import {FunctionalComponent, h} from '@stencil/core';\nimport {i18n} from 'i18next';\nimport ArrowBottomIcon from '../../../images/arrow-bottom-rounded.svg';\n\ninterface SortSelectProps {\n  id: string;\n  i18n: i18n;\n  onSelect: (opt: Event) => void;\n}\nexport const SortSelect: FunctionalComponent<SortSelectProps> = (\n  {i18n, id, onSelect},\n  children\n) => {\n  return (\n    <div class=\"relative\" part=\"select-parent\">\n      <select\n        id={id}\n        class=\"btn-outline-neutral h-10 grow cursor-pointer appearance-none pr-24 pl-3\"\n        part=\"select\"\n        aria-label={i18n.t('sort-by')}\n        onChange={(option) => onSelect(option)}\n      >\n        {children}\n      </select>\n      <div\n        part=\"select-separator\"\n        class=\"border-neutral pointer-events-none absolute top-px right-0 bottom-px flex w-10 items-center justify-center border-l\"\n      >\n        <atomic-icon class=\"w-2.5\" icon={ArrowBottomIcon}></atomic-icon>\n      </div>\n    </div>\n  );\n};\n","@import '../../../global/global.pcss';\n\nselect:hover + div,\nselect:focus-visible + div {\n  @apply border-primary-light text-primary-light;\n}\n","import {Schema, StringValue} from '@coveo/bueno';\nimport {\n  Sort,\n  buildSort,\n  SortState,\n  parseCriterionExpression,\n  buildSearchStatus,\n  SearchStatus,\n  SearchStatusState,\n  TabManager,\n  TabManagerState,\n  buildTabManager,\n  loadSortCriteriaActions,\n} from '@coveo/headless';\nimport {Component, h, State, Element} from '@stencil/core';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {shouldDisplayOnCurrentTab} from '../../../utils/tab-utils';\nimport {randomID} from '../../../utils/utils';\nimport {SortContainer} from '../../common/sort/container';\nimport {SortGuard} from '../../common/sort/stencil-guard';\nimport {SortLabel} from '../../common/sort/stencil-label';\nimport {SortOption} from '../../common/sort/stencil-option';\nimport {SortSelect} from '../../common/sort/stencil-select';\nimport {Bindings} from '../atomic-search-interface/atomic-search-interface';\n\n/**\n * The `atomic-sort-dropdown` component renders a dropdown that the end user can interact with to select the criteria to use when sorting query results.\n *\n * @slot default - The `atomic-sort-expression` of the dropdown are slotted in.\n *\n * @part label - The \"Sort by\" label of the `<select>` element.\n * @part select-parent - The `<select>` element parent.\n * @part select - The `<select>` element of the dropdown list.\n * @part select-separator - The element separating the select from the icon.\n * @part placeholder - The dropdown placeholder for while the search interface is initializing.\n */\n@Component({\n  tag: 'atomic-sort-dropdown',\n  styleUrl: 'atomic-sort-dropdown.pcss',\n  shadow: true,\n})\nexport class AtomicSortDropdown implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  private sort!: Sort;\n  public searchStatus!: SearchStatus;\n  private id!: string;\n\n  @Element() host!: HTMLElement;\n\n  @State() @BindStateToController('sort') public sortState!: SortState;\n  @BindStateToController('searchStatus')\n  @State()\n  private searchStatusState!: SearchStatusState;\n  public tabManager!: TabManager;\n  @BindStateToController('tabManager')\n  @State()\n  public tabManagerState!: TabManagerState;\n  @State() public error!: Error;\n\n  connectedCallback(): void {\n    this.id ||= randomID('atomic-sort-dropdown-');\n  }\n\n  public initialize() {\n    this.buildOptions();\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\n    this.sort = buildSort(this.bindings.engine, {\n      initialState: {\n        criterion: this.bindings.store.state.sortOptions[0]?.criteria,\n      },\n    });\n    this.tabManager = buildTabManager(this.bindings.engine);\n  }\n\n  private buildOptions() {\n    const sortExpressionElements = Array.from(\n      this.host.querySelectorAll('atomic-sort-expression')\n    );\n\n    if (!sortExpressionElements.length) {\n      this.error = new Error(\n        'The \"atomic-sort-dropdown\" element requires at least one \"atomic-sort-expression\" child.'\n      );\n      return;\n    }\n\n    this.bindings.store.state.sortOptions = sortExpressionElements.map(\n      ({expression, label, tabsIncluded, tabsExcluded}) => {\n        new Schema({\n          label: new StringValue({emptyAllowed: false, required: true}),\n        }).validate({label});\n\n        return {\n          tabs: {\n            included: tabsIncluded,\n            excluded: tabsExcluded,\n          },\n          criteria: parseCriterionExpression(expression),\n          expression,\n          label,\n        };\n      }\n    );\n  }\n\n  private get options() {\n    return this.bindings.store.state.sortOptions.filter(({tabs}) =>\n      shouldDisplayOnCurrentTab(\n        [...tabs.included],\n        [...tabs.excluded],\n        this.tabManagerState?.activeTab\n      )\n    );\n  }\n\n  private select(e: Event) {\n    const select = e.composedPath()[0] as HTMLSelectElement;\n    const option = this.options.find(\n      (option) => option.expression === select.value\n    );\n    option && this.sort.sortBy(option.criteria);\n  }\n\n  public componentShouldUpdate(): void {\n    if (\n      this.options.some(\n        (option) =>\n          option.expression.trim().replace(/\\s*,\\s*/g, ',') ===\n          this.sortState.sortCriteria.replace(/@/g, '')\n      )\n    ) {\n      return;\n    }\n\n    const action = loadSortCriteriaActions(\n      this.bindings.engine\n    ).updateSortCriterion(this.options[0]?.criteria);\n\n    this.bindings.engine.dispatch(action);\n  }\n\n  public render() {\n    const {hasError, hasResults, firstSearchExecuted} = this.searchStatusState;\n    const {\n      bindings: {i18n},\n      id,\n    } = this;\n\n    return [\n      <SortGuard\n        firstSearchExecuted={firstSearchExecuted}\n        hasError={hasError}\n        hasResults={hasResults}\n      >\n        <SortContainer>\n          <SortLabel i18n={i18n} id={id} />\n          <SortSelect i18n={i18n} id={id} onSelect={(evt) => this.select(evt)}>\n            {this.options.map(({label, criteria, expression}) => (\n              <SortOption\n                i18n={i18n}\n                label={label}\n                selected={this.sort.isSortedBy(criteria)}\n                value={expression}\n              />\n            ))}\n          </SortSelect>\n        </SortContainer>\n      </SortGuard>,\n      <slot></slot>,\n    ];\n  }\n}\n"],"mappings":"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","ignoreList":[]}