{"version":3,"names":["atomicInsightUserActionsModalCss","AtomicInsightUserActionsModalStyle0","AtomicInsightUserActionsModal","this","isOpen","excludedCustomActions","componentDidLoad","host","style","display","watchEnabled","onAnimationFrame","dimensionChanged","updateDimensions","window","requestAnimationFrame","interfaceDimensions","rectEquals","bindings","interfaceElement","getBoundingClientRect","render","renderHeader","h","slot","class","part","i18n","t","Button","onClick","ariaLabel","icon","CloseIcon","renderBody","height","userId","ticketCreationDateTime","Host","top","left","width","fullscreen","source","openButton","container","close","exportparts","ATOMIC_MODAL_EXPORT_PARTS","scope","__decorate","InitializeBindings"],"sources":["src/components/insight/user-actions/atomic-insight-user-actions-modal/atomic-insight-user-actions-modal.pcss?tag=atomic-insight-user-actions-modal&encapsulation=shadow","src/components/insight/user-actions/atomic-insight-user-actions-modal/atomic-insight-user-actions-modal.tsx"],"sourcesContent":["@import '../../../common/refine-modal/refine-modal-common.pcss';\n:host {\n  position: absolute;\n}\n\natomic-modal::part(body-wrapper),\natomic-modal::part(footer-wrapper) {\n  padding: 2px;\n}\n","import {ATOMIC_MODAL_EXPORT_PARTS} from '@/src/components/common/atomic-modal/export-parts';\nimport {Component, h, State, Prop, Element, Watch, Host} from '@stencil/core';\nimport CloseIcon from '../../../../images/close.svg';\nimport {rectEquals} from '../../../../utils/dom-utils';\nimport {\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {Button} from '../../../common/stencil-button';\nimport {InsightBindings} from '../../atomic-insight-interface/atomic-insight-interface';\n\n/**\n * @internal\n * The `atomic-insight-user-actions-modal` is automatically created as a child of the `atomic-insight-interface` when the `atomic-insight-user-actions-toggle` is initialized.\n *\n * When the modal is opened, the CSS class `atomic-modal-opened` is added to the interface element and the body, allowing further customization.\n */\n@Component({\n  tag: 'atomic-insight-user-actions-modal',\n  styleUrl: 'atomic-insight-user-actions-modal.pcss',\n  shadow: true,\n})\nexport class AtomicInsightUserActionsModal\n  implements InitializableComponent<InsightBindings>\n{\n  @Element() public host!: HTMLElement;\n  @InitializeBindings() public bindings!: InsightBindings;\n  @State()\n  public error!: Error;\n  @State()\n  public interfaceDimensions?: DOMRect;\n\n  @Prop({mutable: true}) openButton?: HTMLElement;\n  @Prop({reflect: true, mutable: true}) isOpen = false;\n\n  /**\n   * The ID of the user whose actions are being displayed.\n   */\n  @Prop() public userId!: string;\n  /**\n   * The date and time when the case was created. For example \"2024-01-01T00:00:00Z\"\n   */\n  @Prop() public ticketCreationDateTime!: string;\n  /**\n   * The names of custom events to exclude.\n   */\n  @Prop() public excludedCustomActions: string[] = [];\n\n  public componentDidLoad() {\n    this.host.style.display = '';\n  }\n\n  @Watch('isOpen')\n  watchEnabled(isOpen: boolean) {\n    if (isOpen) {\n      this.onAnimationFrame();\n    }\n  }\n\n  private onAnimationFrame() {\n    if (!this.isOpen) {\n      return;\n    }\n    if (this.dimensionChanged()) {\n      this.updateDimensions();\n    }\n    window.requestAnimationFrame(() => this.onAnimationFrame());\n  }\n\n  private dimensionChanged() {\n    if (!this.interfaceDimensions) {\n      return true;\n    }\n\n    return !rectEquals(\n      this.interfaceDimensions,\n      this.bindings.interfaceElement.getBoundingClientRect()\n    );\n  }\n\n  public updateDimensions() {\n    this.interfaceDimensions =\n      this.bindings.interfaceElement.getBoundingClientRect();\n  }\n\n  public render() {\n    const renderHeader = () => {\n      return (\n        <div slot=\"header\" class=\"contents\">\n          <div part=\"title\" class=\"truncate font-light\">\n            {this.bindings.i18n.t('user-actions')}\n          </div>\n          <Button\n            style=\"text-transparent\"\n            class=\"grid place-items-center\"\n            part=\"close-button\"\n            onClick={() => (this.isOpen = false)}\n            ariaLabel={this.bindings.i18n.t('close')}\n          >\n            <atomic-icon\n              part=\"close-icon\"\n              class=\"h-5 w-5\"\n              icon={CloseIcon}\n            ></atomic-icon>\n          </Button>\n        </div>\n      );\n    };\n\n    const renderBody = () => {\n      return (\n        <aside\n          style={{height: '100%'}}\n          slot=\"body\"\n          class=\"adjust-for-scroll-bar flex w-full flex-col px-2\"\n        >\n          <atomic-insight-user-actions-timeline\n            userId={this.userId}\n            ticketCreationDateTime={this.ticketCreationDateTime}\n            excludedCustomActions={this.excludedCustomActions}\n            class=\"flex-1\"\n          ></atomic-insight-user-actions-timeline>\n        </aside>\n      );\n    };\n    return (\n      <Host>\n        {this.interfaceDimensions && (\n          <style>\n            {`atomic-modal::part(backdrop) {\n            top: ${this.interfaceDimensions.top}px;\n            left: ${this.interfaceDimensions.left}px;\n            width: ${this.interfaceDimensions.width}px;\n            height: ${this.interfaceDimensions.height}px;\n            }`}\n          </style>\n        )}\n        <atomic-modal\n          fullscreen\n          isOpen={this.isOpen}\n          source={this.openButton}\n          container={this.host}\n          close={() => (this.isOpen = false)}\n          exportparts={ATOMIC_MODAL_EXPORT_PARTS}\n          scope={this.bindings.interfaceElement}\n        >\n          {renderHeader()}\n          {renderBody()}\n        </atomic-modal>\n      </Host>\n    );\n  }\n}\n"],"mappings":"qWAAA,MAAMA,EAAmC,kn1DACzC,MAAAC,EAAeD,E,iXCqBFE,EAA6B,M,yBAWFC,KAAAC,OAAS,MAahCD,KAAAE,sBAAkC,G,8FAbF,M,uFAaE,E,CAE1C,gBAAAC,GACLH,KAAKI,KAAKC,MAAMC,QAAU,E,CAI5B,YAAAC,CAAaN,GACX,GAAIA,EAAQ,CACVD,KAAKQ,kB,EAID,gBAAAA,GACN,IAAKR,KAAKC,OAAQ,CAChB,M,CAEF,GAAID,KAAKS,mBAAoB,CAC3BT,KAAKU,kB,CAEPC,OAAOC,uBAAsB,IAAMZ,KAAKQ,oB,CAGlC,gBAAAC,GACN,IAAKT,KAAKa,oBAAqB,CAC7B,OAAO,I,CAGT,OAAQC,EACNd,KAAKa,oBACLb,KAAKe,SAASC,iBAAiBC,wB,CAI5B,gBAAAP,GACLV,KAAKa,oBACHb,KAAKe,SAASC,iBAAiBC,uB,CAG5B,MAAAC,GACL,MAAMC,EAAe,IAEjBC,EAAA,OAAKC,KAAK,SAASC,MAAM,YACvBF,EAAA,OAAKG,KAAK,QAAQD,MAAM,uBACrBtB,KAAKe,SAASS,KAAKC,EAAE,iBAExBL,EAACM,EAAM,CACLrB,MAAM,mBACNiB,MAAM,0BACNC,KAAK,eACLI,QAAS,IAAO3B,KAAKC,OAAS,MAC9B2B,UAAW5B,KAAKe,SAASS,KAAKC,EAAE,UAEhCL,EAAA,eACEG,KAAK,aACLD,MAAM,UACNO,KAAMC,MAOhB,MAAMC,EAAa,IAEfX,EAAA,SACEf,MAAO,CAAC2B,OAAQ,QAChBX,KAAK,OACLC,MAAM,mDAENF,EAAA,wCACEa,OAAQjC,KAAKiC,OACbC,uBAAwBlC,KAAKkC,uBAC7BhC,sBAAuBF,KAAKE,sBAC5BoB,MAAM,YAKd,OACEF,EAACe,EAAI,KACFnC,KAAKa,qBACJO,EAAA,aACG,oDACMpB,KAAKa,oBAAoBuB,6BACxBpC,KAAKa,oBAAoBwB,+BACxBrC,KAAKa,oBAAoByB,iCACxBtC,KAAKa,oBAAoBmB,4BAIvCZ,EAAA,gBACEmB,WAAU,KACVtC,OAAQD,KAAKC,OACbuC,OAAQxC,KAAKyC,WACbC,UAAW1C,KAAKI,KAChBuC,MAAO,IAAO3C,KAAKC,OAAS,MAC5B2C,YAAaC,EACbC,MAAO9C,KAAKe,SAASC,kBAEpBG,IACAY,K,mFAzHoBgB,EAAA,CAA5BC,K","ignoreList":[]}