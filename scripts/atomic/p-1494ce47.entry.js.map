{"version":3,"names":["atomicInsightSearchBoxCss","AtomicInsightSearchBoxStyle0","AtomicInsightSearchBox","this","isExpanded","disableSearch","numberOfSuggestions","initialize","id","randomID","searchBoxOptions","highlightOptions","notMatchDelimiters","open","close","correctionDelimiters","fetchQuerySuggestions","registerQuerySuggest","loadInsightSearchActions","bindings","engine","searchBox","buildInsightSearchBox","options","dispatch","count","suggestionManager","SuggestionManager","getNumberOfSuggestionsToDisplay","updateQuery","query","updateText","getSearchBoxValue","searchBoxState","value","getSuggestionTimeout","getSuggestionDelay","getHost","host","getLogger","logger","registerSuggestions","position","renderItems","state","suggestions","map","suggestion","renderSuggestionItem","onInput","panel","onSubmit","activeDescendantElement","clickOnActiveElement","submit","clearSuggestions","onKeyDown","e","key","preventDefault","focusNextValue","announceNewActiveSuggestionToScreenReader","focusPreviousValue","triggerTextAreaChange","textAreaRef","dispatchEvent","window","Event","renderSuggestion","item","index","lastIndex","isSelected","activeDescendant","suggestedQuery","hideIfLast","h","i18n","side","isDoubleList","onClick","onSuggestionClick","onMouseOver","onSuggestionMouseOver","hasQuery","partialItem","getPartialSearchBoxSuggestionElement","content","QuerySuggestionContainer","QuerySuggestionIcon","icon","SearchSlimIcon","hasSuggestion","length","QuerySuggestionText","onSelect","selectSuggestion","rawValue","renderPanel","elements","setRef","getRef","part","ref","class","onMouseDown","target","renderSuggestions","hasSuggestions","updateActiveDescendant","role","t","allSuggestionElements","el","leftPanel","getSearchInputLabel","isMacOS","hasKeyboard","onFocus","triggerSuggestions","announceNewSuggestionsToScreenReader","ariaLabel","suggestionsAriaMessage","numberOfSuggestionsToAnnounce","filter","elementHasQuery","searchBoxAriaMessage","render","SearchBoxWrapper","disabled","onFocusout","event","isFocusingOut","SearchTextArea","loading","isLoading","placeholder","onClear","clear","__decorate","InitializeBindings","BindStateToController","AriaLiveRegion"],"sources":["src/components/insight/atomic-insight-search-box/atomic-insight-search-box.pcss?tag=atomic-insight-search-box&encapsulation=shadow","src/components/insight/atomic-insight-search-box/atomic-insight-search-box.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\n@import '../../common/search-box/search-box.pcss';\n\n[part='wrapper'] {\n  @apply z-10;\n}\n\n:host {\n  position: relative;\n}\n\n[part='input'] {\n  padding-top: 0.675rem;\n  padding-bottom: 0.675rem;\n}\n\n[part='submit-icon'] {\n  @apply text-on-background;\n}\n\n[part='submit-button'] {\n  @apply flex w-10 items-center justify-center;\n}\n\n.loading::after {\n  content: '';\n  @apply bg-background absolute h-5/6 w-5/6 rounded-full;\n}\n\n[part='clear-button-wrapper'] {\n  @apply mr-2 py-0;\n}\n\n[part='clear-icon'] {\n  @apply h-3 w-3;\n}\n\n[part='textarea-expander'] {\n  &::after {\n    @apply p-2 px-4;\n  }\n}\n\n[part='textarea-expander'] {\n  [part='textarea'] {\n    @apply p-2 px-4;\n  }\n}\n","import {loadInsightSearchActions} from '@coveo/headless/insight';\nimport {\n  buildSearchBox as buildInsightSearchBox,\n  SearchBox as InsightSearchBox,\n  SearchBoxState as InsightSearchBoxState,\n  Suggestion as InsightSuggestion,\n} from '@coveo/headless/insight';\nimport {Component, Element, h, Prop, State} from '@stencil/core';\nimport SearchSlimIcon from '../../../images/search-slim.svg';\nimport {hasKeyboard, isMacOS} from '../../../utils/device-utils';\nimport {\n  BindStateToController,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {AriaLiveRegion} from '../../../utils/stencil-accessibility-utils';\nimport {isFocusingOut, randomID} from '../../../utils/utils';\nimport {SearchBoxWrapper} from '../../common/search-box/stencil-search-box-wrapper';\nimport {SearchTextArea} from '../../common/search-box/stencil-search-text-area';\nimport {\n  getPartialSearchBoxSuggestionElement,\n  QuerySuggestionContainer,\n  QuerySuggestionIcon,\n  QuerySuggestionText,\n} from '../../common/suggestions/stencil-query-suggestions';\nimport {SuggestionManager} from '../../common/suggestions/stencil-suggestion-manager';\nimport {\n  elementHasQuery,\n  SearchBoxSuggestionElement,\n} from '../../common/suggestions/suggestions-common';\nimport {InsightBindings} from '../atomic-insight-interface/atomic-insight-interface';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-search-box',\n  styleUrl: 'atomic-insight-search-box.pcss',\n  shadow: true,\n})\nexport class AtomicInsightSearchBox {\n  @InitializeBindings() public bindings!: InsightBindings;\n\n  private searchBox!: InsightSearchBox;\n  private id!: string;\n  private textAreaRef!: HTMLTextAreaElement;\n  private suggestionManager!: SuggestionManager<InsightSearchBox>;\n\n  @Element() private host!: HTMLElement;\n\n  @BindStateToController('searchBox')\n  @State()\n  private searchBoxState!: InsightSearchBoxState;\n  @State() public error!: Error;\n  @State() private isExpanded = false;\n\n  /**\n   * Whether to prevent the user from triggering a search from the component.\n   * Perfect for use cases where you need to disable the search conditionally, like when the input is empty.\n   */\n  @Prop({reflect: true}) public disableSearch = false;\n  /**\n   * The number of query suggestions to display when interacting with the search box.\n   */\n  @Prop({reflect: true}) public numberOfSuggestions = 5;\n\n  @AriaLiveRegion('search-box')\n  protected searchBoxAriaMessage!: string;\n\n  @AriaLiveRegion('search-suggestions', true)\n  protected suggestionsAriaMessage!: string;\n\n  public initialize() {\n    this.id = randomID('atomic-search-box-');\n\n    const searchBoxOptions = {\n      id: this.id,\n      numberOfSuggestions: 0,\n      highlightOptions: {\n        notMatchDelimiters: {\n          open: '<span class=\"font-bold\">',\n          close: '</span>',\n        },\n        correctionDelimiters: {\n          open: '<span class=\"font-normal\">',\n          close: '</span>',\n        },\n      },\n    };\n\n    const {fetchQuerySuggestions, registerQuerySuggest} =\n      loadInsightSearchActions(this.bindings.engine);\n\n    this.searchBox = buildInsightSearchBox(this.bindings.engine, {\n      options: searchBoxOptions,\n    });\n\n    this.bindings.engine.dispatch(\n      registerQuerySuggest({id: this.id, count: this.numberOfSuggestions})\n    );\n\n    this.suggestionManager = new SuggestionManager({\n      getNumberOfSuggestionsToDisplay: () => this.numberOfSuggestions,\n      updateQuery: (query) => this.searchBox.updateText(query),\n      getSearchBoxValue: () => this.searchBoxState.value,\n      getSuggestionTimeout: () => 500,\n      getSuggestionDelay: () => 0,\n      getHost: () => this.host,\n      getLogger: () => this.bindings.engine.logger,\n    });\n\n    this.suggestionManager.registerSuggestions({\n      position: 0,\n      renderItems: () =>\n        this.searchBox.state.suggestions.map((suggestion) =>\n          this.renderSuggestionItem(suggestion)\n        ),\n      onInput: () => {\n        this.bindings.engine.dispatch(fetchQuerySuggestions({id: this.id}));\n      },\n      panel: 'left',\n    });\n  }\n\n  private onSubmit() {\n    if (this.suggestionManager.activeDescendantElement) {\n      this.suggestionManager.clickOnActiveElement();\n      return;\n    }\n\n    this.searchBox.submit();\n    this.suggestionManager.clearSuggestions();\n  }\n\n  private onKeyDown(e: KeyboardEvent) {\n    if (this.disableSearch) {\n      return;\n    }\n\n    switch (e.key) {\n      case 'Enter':\n        this.onSubmit();\n        break;\n      case 'Escape':\n        this.suggestionManager.clearSuggestions();\n        break;\n      case 'ArrowDown':\n        e.preventDefault();\n        this.suggestionManager.focusNextValue();\n        this.announceNewActiveSuggestionToScreenReader();\n        break;\n      case 'ArrowUp':\n        e.preventDefault();\n        this.suggestionManager.focusPreviousValue();\n        this.announceNewActiveSuggestionToScreenReader();\n        break;\n      case 'Tab':\n        this.suggestionManager.clearSuggestions();\n        break;\n    }\n  }\n\n  private triggerTextAreaChange(value: string) {\n    this.textAreaRef.value = value;\n    this.textAreaRef.dispatchEvent(new window.Event('change'));\n  }\n\n  private renderSuggestion(\n    item: SearchBoxSuggestionElement,\n    index: number,\n    lastIndex: number\n  ) {\n    const id = `${this.id}-suggestion-${item.key}`;\n\n    const isSelected =\n      id === this.suggestionManager.activeDescendant ||\n      this.suggestionManager.suggestedQuery === item.query;\n\n    if (index === lastIndex && item.hideIfLast) {\n      return null;\n    }\n\n    return (\n      <atomic-suggestion-renderer\n        i18n={this.bindings.i18n}\n        id={id}\n        suggestion={item}\n        isSelected={isSelected}\n        side={'left'}\n        index={index}\n        lastIndex={lastIndex}\n        isDoubleList={false}\n        onClick={(e: Event) => {\n          this.suggestionManager.onSuggestionClick(item, e);\n        }}\n        onMouseOver={() => {\n          this.suggestionManager.onSuggestionMouseOver(item, 'left', id);\n        }}\n      ></atomic-suggestion-renderer>\n    );\n  }\n\n  private renderSuggestionItem(\n    suggestion: InsightSuggestion\n  ): SearchBoxSuggestionElement {\n    const hasQuery = this.searchBox.state.value !== '';\n    const partialItem = getPartialSearchBoxSuggestionElement(\n      suggestion,\n      this.bindings.i18n\n    );\n\n    return {\n      ...partialItem,\n      content: (\n        <QuerySuggestionContainer>\n          <QuerySuggestionIcon\n            icon={SearchSlimIcon}\n            hasSuggestion={this.searchBoxState.suggestions.length > 1}\n          />\n\n          <QuerySuggestionText suggestion={suggestion} hasQuery={hasQuery} />\n        </QuerySuggestionContainer>\n      ),\n      onSelect: () => {\n        this.searchBox.selectSuggestion(suggestion.rawValue);\n      },\n    };\n  }\n\n  private renderPanel(\n    elements: SearchBoxSuggestionElement[],\n    setRef: (el: HTMLElement | undefined) => void,\n    getRef: () => HTMLElement | undefined\n  ) {\n    if (!elements.length) {\n      return null;\n    }\n\n    return (\n      <div\n        part={'suggestions'}\n        ref={setRef}\n        class=\"flex grow basis-1/2 flex-col\"\n        onMouseDown={(e) => {\n          if (e.target === getRef()) {\n            e.preventDefault();\n          }\n        }}\n      >\n        {elements.map((suggestion, index) =>\n          this.renderSuggestion(suggestion, index, elements.length - 1)\n        )}\n      </div>\n    );\n  }\n\n  private renderSuggestions() {\n    if (!this.suggestionManager.hasSuggestions) {\n      this.suggestionManager.updateActiveDescendant();\n      return null;\n    }\n\n    return (\n      <div\n        id={`${this.id}-popup`}\n        part=\"suggestions-wrapper\"\n        class={`bg-background border-neutral absolute top-full left-0 z-10 flex w-full rounded-md border ${\n          this.suggestionManager.hasSuggestions && this.isExpanded\n            ? ''\n            : 'hidden'\n        }`}\n        role=\"application\"\n        aria-label={this.bindings.i18n.t('search-suggestions-single-list')}\n        {...(this.suggestionManager.activeDescendant && {\n          'aria-activedescendant': this.suggestionManager.activeDescendant,\n        })}\n      >\n        {this.renderPanel(\n          this.suggestionManager.allSuggestionElements,\n          (el) => (this.suggestionManager.leftPanel = el),\n          () => this.suggestionManager.leftPanel\n        )}\n      </div>\n    );\n  }\n\n  private getSearchInputLabel() {\n    if (isMacOS()) {\n      return this.bindings.i18n.t('search-box-with-suggestions-macos');\n    }\n    if (!hasKeyboard()) {\n      return this.bindings.i18n.t('search-box-with-suggestions-keyboardless');\n    }\n    return this.bindings.i18n.t('search-box-with-suggestions');\n  }\n\n  private async onFocus() {\n    if (this.isExpanded) {\n      return;\n    }\n    this.isExpanded = true;\n    await this.suggestionManager.triggerSuggestions();\n    this.announceNewSuggestionsToScreenReader();\n  }\n\n  private async onInput(value: string) {\n    this.searchBox.updateText(value);\n    this.isExpanded = true;\n    await this.suggestionManager.triggerSuggestions();\n    this.announceNewSuggestionsToScreenReader();\n  }\n\n  private announceNewActiveSuggestionToScreenReader() {\n    const ariaLabel = this.suggestionManager.activeDescendantElement?.ariaLabel;\n    if (isMacOS() && ariaLabel) {\n      this.suggestionsAriaMessage = ariaLabel;\n    }\n  }\n\n  private announceNewSuggestionsToScreenReader() {\n    const numberOfSuggestionsToAnnounce =\n      this.suggestionManager.allSuggestionElements.filter(\n        elementHasQuery\n      ).length;\n    this.searchBoxAriaMessage = numberOfSuggestionsToAnnounce\n      ? this.bindings.i18n.t(\n          this.searchBoxState.value\n            ? 'query-suggestions-available'\n            : 'query-suggestions-available-no-query',\n          {\n            count: numberOfSuggestionsToAnnounce,\n            query: this.searchBoxState.value,\n          }\n        )\n      : this.bindings.i18n.t('query-suggestions-unavailable');\n  }\n\n  public render() {\n    return (\n      <SearchBoxWrapper\n        disabled={this.disableSearch}\n        onFocusout={(event) => {\n          if (!isFocusingOut(event)) {\n            return;\n          }\n          this.suggestionManager.clearSuggestions();\n          this.isExpanded = false;\n        }}\n      >\n        <atomic-icon\n          part=\"submit-icon\"\n          icon={SearchSlimIcon}\n          class=\"my-auto mr-0 ml-4 h-4 w-4\"\n        />\n        <SearchTextArea\n          textAreaRef={this.textAreaRef}\n          loading={this.searchBoxState.isLoading}\n          ref={(el) => el && (this.textAreaRef = el)}\n          bindings={this.bindings}\n          value={this.searchBoxState.value}\n          ariaLabel={this.getSearchInputLabel()}\n          placeholder={this.bindings.i18n.t('search-ellipsis')}\n          onFocus={() => this.onFocus()}\n          onKeyDown={(e) => this.onKeyDown(e)}\n          onClear={() => {\n            this.searchBox.clear();\n            this.triggerTextAreaChange('');\n          }}\n          onInput={(e) => this.onInput((e.target as HTMLInputElement).value)}\n        />\n        {this.renderSuggestions()}\n      </SearchBoxWrapper>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}