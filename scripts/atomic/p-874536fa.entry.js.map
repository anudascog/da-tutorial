{"version":3,"names":["AtomicInsightResultChildrenTemplate","constructor","hostRef","this","conditions","mustMatch","mustNotMatch","connectedCallback","resultTemplateCommon","ResultTemplateCommon","host","setError","err","error","validParents","componentWillLoad","makeDefinedConditions","ifDefined","ifNotDefined","matchConditions","makeMatchConditions","getTemplate","render","renderIfError","__decorate","MapProp","splitValues"],"sources":["src/components/insight/result-templates/atomic-insight-result-children-template/atomic-insight-result-children-template.tsx"],"sourcesContent":["import {ResultTemplate, ResultTemplateCondition} from '@coveo/headless';\nimport {Component, Element, Prop, State, Method} from '@stencil/core';\nimport {MapProp} from '../../../../utils/props-utils';\nimport {\n  makeDefinedConditions,\n  makeMatchConditions,\n  ResultTemplateCommon,\n} from '../../../common/result-templates/result-template-common';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-result-children-template',\n  shadow: true,\n})\nexport class AtomicInsightResultChildrenTemplate {\n  @Element() public host!: HTMLDivElement;\n\n  @State() public error!: Error;\n\n  /**\n   * A function that must return true on results for the result template to apply.\n   * Set programmatically before initialization, not via attribute.\n   *\n   * For example, the following targets a template and sets a condition to make it apply only to results whose `title` contains `singapore`:\n   * `document.querySelector('#target-template').conditions = [(result) => /singapore/i.test(result.title)];`\n   */\n  @Prop() public conditions: ResultTemplateCondition[] = [];\n\n  /**\n   * The field that, when defined on a result item, would allow the template to be applied.\n   *\n   * For example, a template with the following attribute only applies to result items whose `filetype` and `sourcetype` fields are defined: `if-defined=\"filetype,sourcetype\"`\n   */\n  @Prop({reflect: true}) ifDefined?: string;\n\n  /**\n   * The field that, when defined on a result item, would prevent the template from being applied.\n   *\n   * For example, a template with the following attribute only applies to result items whose `filetype` and `sourcetype` fields are NOT defined: `if-not-defined=\"filetype,sourcetype\"`\n   */\n  @Prop({reflect: true}) ifNotDefined?: string;\n\n  /**\n   * The field and values that define which result items the condition must be applied to.\n   *\n   * For example, a template with the following attribute only applies to result items whose `filetype` is `lithiummessage` or `YouTubePlaylist`: `must-match-filetype=\"lithiummessage,YouTubePlaylist\"`\n   */\n  @Prop() @MapProp({splitValues: true}) public mustMatch: Record<\n    string,\n    string[]\n  > = {};\n\n  /**\n   * The field and values that define which result items the condition must not be applied to.\n   *\n   * For example, a template with the following attribute only applies to result items whose `filetype` is not `lithiummessage`: `must-not-match-filetype=\"lithiummessage\"`\n   */\n  @Prop() @MapProp({splitValues: true}) public mustNotMatch: Record<\n    string,\n    string[]\n  > = {};\n\n  public resultTemplateCommon!: ResultTemplateCommon;\n\n  constructor() {}\n\n  connectedCallback() {\n    this.resultTemplateCommon = new ResultTemplateCommon({\n      host: this.host,\n      setError: (err) => {\n        this.error = err;\n      },\n      validParents: ['atomic-insight-result-children'],\n    });\n  }\n\n  public componentWillLoad() {\n    this.conditions = makeDefinedConditions(this.ifDefined, this.ifNotDefined);\n    this.resultTemplateCommon.matchConditions = makeMatchConditions(\n      this.mustMatch,\n      this.mustNotMatch\n    );\n  }\n\n  /**\n   * Gets the appropriate result template based on conditions applied.\n   */\n  @Method()\n  public async getTemplate(): Promise<ResultTemplate<DocumentFragment> | null> {\n    return this.resultTemplateCommon.getTemplate(this.conditions, this.error);\n  }\n\n  public render() {\n    return this.resultTemplateCommon.renderIfError(this.error);\n  }\n}\n"],"mappings":"upBAgBaA,EAAmC,MAkD9C,WAAAC,CAAAC,G,UAtCeC,KAAAC,WAAwC,GAqBVD,KAAAE,UAGzC,GAOyCF,KAAAG,aAGzC,G,qCAlCmD,G,oEAwBnD,G,kBAUA,E,CAMJ,iBAAAC,GACEJ,KAAKK,qBAAuB,IAAIC,EAAqB,CACnDC,KAAMP,KAAKO,KACXC,SAAWC,IACTT,KAAKU,MAAQD,CAAG,EAElBE,aAAc,CAAC,mC,CAIZ,iBAAAC,GACLZ,KAAKC,WAAaY,EAAsBb,KAAKc,UAAWd,KAAKe,cAC7Df,KAAKK,qBAAqBW,gBAAkBC,EAC1CjB,KAAKE,UACLF,KAAKG,a,CAQF,iBAAMe,GACX,OAAOlB,KAAKK,qBAAqBa,YAAYlB,KAAKC,WAAYD,KAAKU,M,CAG9D,MAAAS,GACL,OAAOnB,KAAKK,qBAAqBe,cAAcpB,KAAKU,M,6BA9CTW,EAAA,CAApCC,EAAQ,CAACC,YAAa,Q,gCAUcF,EAAA,CAApCC,EAAQ,CAACC,YAAa,Q","ignoreList":[]}