{"version":3,"names":["atomicInsightSmartSnippetCss","AtomicInsightSmartSnippetStyle0","AtomicInsightSmartSnippet","this","headingLevel","maximumHeight","collapsedHeight","feedbackSent","initialize","id","randomID","smartSnippet","buildInsightSmartSnippet","bindings","engine","setModalRef","ref","modalRef","setFeedbackSent","isSent","componentWillUpdate","smartSnippetState","liked","disliked","render","answerFound","h","Hidden","source","SmartSnippetWrapper","i18n","SmartSnippetQuestion","question","expanded","exportparts","htmlContent","answer","onCollapse","collapse","onExpand","expand","part","snippetStyle","style","SmartSnippetFooter","anchorAttributes","getAttributesFromLinkSlot","host","onBeginDelayedSelectSource","beginDelayedSelectSource","onCancelPendingSelectSource","cancelPendingSelectSource","onSelectSource","selectSource","SmartSnippetFeedbackBanner","explainWhyRef","button","onDislike","loadModal","dislike","onLike","like","onPressExplainWhy","isOpen","styleTag","querySelector","content","innerHTML","document","createElement","addEventListener","insertAdjacentElement","__decorate","InitializeBindings","BindStateToController"],"sources":["src/components/insight/smart-snippets/atomic-insight-smart-snippet/atomic-insight-smart-snippet.pcss?tag=atomic-insight-smart-snippet&encapsulation=shadow","src/components/insight/smart-snippets/atomic-insight-smart-snippet/atomic-insight-smart-snippet.tsx"],"sourcesContent":["@import '../../../common/smart-snippets/atomic-smart-snippet/atomic-smart-snippet.pcss';\n","import {getAttributesFromLinkSlot} from '@/src/components/common/item-link/attributes-slot';\nimport {SmartSnippetFeedbackBanner} from '@/src/components/common/smart-snippets/atomic-smart-snippet-feedback-banner';\nimport {\n  SmartSnippetFooter,\n  SmartSnippetQuestion,\n  SmartSnippetWrapper,\n} from '@/src/components/common/smart-snippets/atomic-smart-snippet/smart-snippet-common';\nimport {Hidden} from '@/src/components/common/stencil-hidden';\nimport {randomID} from '@/src/utils/utils';\nimport {\n  buildSmartSnippet as buildInsightSmartSnippet,\n  SmartSnippet as InsightSmartSnippet,\n  SmartSnippetState as InsightSmartSnippetState,\n} from '@coveo/headless/insight';\nimport {Component, Prop, State, Element, h} from '@stencil/core';\nimport {\n  InitializableComponent,\n  InitializeBindings,\n  BindStateToController,\n} from '../../../../utils/initialization-utils';\nimport {InsightBindings} from '../../atomic-insight-interface/atomic-insight-interface';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-smart-snippet',\n  styleUrl: 'atomic-insight-smart-snippet.pcss',\n  shadow: true,\n})\nexport class AtomicInsightSmartSnippet\n  implements InitializableComponent<InsightBindings>\n{\n  @InitializeBindings() public bindings!: InsightBindings;\n  public smartSnippet!: InsightSmartSnippet;\n\n  @BindStateToController('smartSnippet')\n  @State()\n  public smartSnippetState!: InsightSmartSnippetState;\n  public error!: Error;\n\n  @Element() public host!: HTMLElement;\n\n  private id!: string;\n  private modalRef?: HTMLAtomicSmartSnippetFeedbackModalElement;\n\n  /**\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the question at the top of the snippet, from 1 to 5.\n   */\n  @Prop({reflect: true}) public headingLevel = 0;\n\n  /**\n   * The maximum height (in pixels) a snippet can have before the component truncates it and displays a \"show more\" button.\n   */\n  @Prop({reflect: true}) maximumHeight = 250;\n  /**\n   * When the answer is partly hidden, how much of its height (in pixels) should be visible.\n   */\n  @Prop({reflect: true}) collapsedHeight = 180;\n\n  /**\n   * Sets the style of the snippet.\n   *\n   * Example:\n   * ```ts\n   * smartSnippet.snippetStyle = `\n   *   b {\n   *     color: blue;\n   *   }\n   * `;\n   * ```\n   */\n  @Prop({reflect: true}) snippetStyle?: string;\n\n  @State() feedbackSent = false;\n\n  public initialize() {\n    this.id ||= randomID();\n    this.smartSnippet = buildInsightSmartSnippet(this.bindings.engine);\n  }\n\n  private setModalRef(ref: HTMLElement) {\n    this.modalRef = ref as HTMLAtomicInsightSmartSnippetFeedbackModalElement;\n  }\n\n  private setFeedbackSent(isSent: boolean) {\n    this.feedbackSent = isSent;\n  }\n\n  public componentWillUpdate() {\n    if (!(this.smartSnippetState.liked || this.smartSnippetState.disliked)) {\n      this.setFeedbackSent(false);\n    }\n  }\n\n  public render() {\n    if (!this.smartSnippetState.answerFound) {\n      return <Hidden></Hidden>;\n    }\n\n    const source = this.smartSnippetState.source;\n\n    return (\n      <SmartSnippetWrapper\n        headingLevel={this.headingLevel}\n        i18n={this.bindings.i18n}\n      >\n        <atomic-smart-snippet-collapse-wrapper>\n          <SmartSnippetQuestion\n            headingLevel={this.headingLevel}\n            question={this.smartSnippetState.question}\n          />\n          <atomic-smart-snippet-expandable-answer\n            collapsedHeight={this.collapsedHeight}\n            expanded={this.smartSnippetState.expanded}\n            exportparts=\"answer,show-more-button,show-less-button,truncated-answer\"\n            htmlContent={this.smartSnippetState.answer}\n            maximumHeight={this.maximumHeight}\n            onCollapse={() => this.smartSnippet.collapse()}\n            onExpand={() => this.smartSnippet.expand()}\n            part=\"body\"\n            snippetStyle={this.style}\n          ></atomic-smart-snippet-expandable-answer>\n          <SmartSnippetFooter i18n={this.bindings.i18n}>\n            {source && (\n              <atomic-smart-snippet-source\n                anchorAttributes={getAttributesFromLinkSlot(\n                  this.host,\n                  'source-anchor-attributes'\n                )}\n                onBeginDelayedSelectSource={\n                  this.smartSnippet.beginDelayedSelectSource\n                }\n                onCancelPendingSelectSource={\n                  this.smartSnippet.cancelPendingSelectSource\n                }\n                onSelectSource={this.smartSnippet.selectSource}\n                source={source}\n              ></atomic-smart-snippet-source>\n            )}\n            <SmartSnippetFeedbackBanner\n              disliked={this.smartSnippetState.disliked}\n              explainWhyRef={(button) => {\n                if (this.modalRef) {\n                  this.modalRef.source = button;\n                }\n              }}\n              feedbackSent={this.feedbackSent}\n              id={this.id}\n              i18n={this.bindings.i18n}\n              liked={this.smartSnippetState.liked}\n              onDislike={() => {\n                this.loadModal();\n                this.smartSnippet.dislike();\n              }}\n              onLike={() => this.smartSnippet.like()}\n              onPressExplainWhy={() => (this.modalRef!.isOpen = true)}\n            ></SmartSnippetFeedbackBanner>\n          </SmartSnippetFooter>\n        </atomic-smart-snippet-collapse-wrapper>\n      </SmartSnippetWrapper>\n    );\n  }\n\n  private get style() {\n    const styleTag = this.host\n      .querySelector('template')\n      ?.content.querySelector('style');\n    if (!styleTag) {\n      return this.snippetStyle;\n    }\n    return styleTag.innerHTML;\n  }\n\n  private loadModal() {\n    if (this.modalRef) {\n      return;\n    }\n    const modalRef = document.createElement(\n      'atomic-insight-smart-snippet-feedback-modal'\n    );\n    modalRef.addEventListener('feedbackSent', () => {\n      this.setFeedbackSent(true);\n    });\n    this.setModalRef(modalRef);\n    this.host.insertAdjacentElement('beforebegin', modalRef);\n  }\n}\n"],"mappings":"ikBAAA,MAAMA,EAA+B,ip3DACrC,MAAAC,EAAeD,E,iXC6BFE,EAAyB,M,yBAmBNC,KAAAC,aAAe,EAKtBD,KAAAE,cAAgB,IAIhBF,KAAAG,gBAAkB,IAgBhCH,KAAAI,aAAe,M,mDAzBqB,E,mBAKN,I,qBAIE,I,8CAgBjB,K,CAEjB,UAAAC,GACLL,KAAKM,KAAOC,IACZP,KAAKQ,aAAeC,EAAyBT,KAAKU,SAASC,O,CAGrD,WAAAC,CAAYC,GAClBb,KAAKc,SAAWD,C,CAGV,eAAAE,CAAgBC,GACtBhB,KAAKI,aAAeY,C,CAGf,mBAAAC,GACL,KAAMjB,KAAKkB,kBAAkBC,OAASnB,KAAKkB,kBAAkBE,UAAW,CACtEpB,KAAKe,gBAAgB,M,EAIlB,MAAAM,GACL,IAAKrB,KAAKkB,kBAAkBI,YAAa,CACvC,OAAOC,EAACC,EAAM,K,CAGhB,MAAMC,EAASzB,KAAKkB,kBAAkBO,OAEtC,OACEF,EAACG,EAAmB,CAClBzB,aAAcD,KAAKC,aACnB0B,KAAM3B,KAAKU,SAASiB,MAEpBJ,EAAA,6CACEA,EAACK,EAAoB,CACnB3B,aAAcD,KAAKC,aACnB4B,SAAU7B,KAAKkB,kBAAkBW,WAEnCN,EAAA,0CACEpB,gBAAiBH,KAAKG,gBACtB2B,SAAU9B,KAAKkB,kBAAkBY,SACjCC,YAAY,4DACZC,YAAahC,KAAKkB,kBAAkBe,OACpC/B,cAAeF,KAAKE,cACpBgC,WAAY,IAAMlC,KAAKQ,aAAa2B,WACpCC,SAAU,IAAMpC,KAAKQ,aAAa6B,SAClCC,KAAK,OACLC,aAAcvC,KAAKwC,QAErBjB,EAACkB,EAAkB,CAACd,KAAM3B,KAAKU,SAASiB,MACrCF,GACCF,EAAA,+BACEmB,iBAAkBC,EAChB3C,KAAK4C,KACL,4BAEFC,2BACE7C,KAAKQ,aAAasC,yBAEpBC,4BACE/C,KAAKQ,aAAawC,0BAEpBC,eAAgBjD,KAAKQ,aAAa0C,aAClCzB,OAAQA,IAGZF,EAAC4B,EAA0B,CACzB/B,SAAUpB,KAAKkB,kBAAkBE,SACjCgC,cAAgBC,IACd,GAAIrD,KAAKc,SAAU,CACjBd,KAAKc,SAASW,OAAS4B,C,GAG3BjD,aAAcJ,KAAKI,aACnBE,GAAIN,KAAKM,GACTqB,KAAM3B,KAAKU,SAASiB,KACpBR,MAAOnB,KAAKkB,kBAAkBC,MAC9BmC,UAAW,KACTtD,KAAKuD,YACLvD,KAAKQ,aAAagD,SAAS,EAE7BC,OAAQ,IAAMzD,KAAKQ,aAAakD,OAChCC,kBAAmB,IAAO3D,KAAKc,SAAU8C,OAAS,S,CAQ9D,SAAYpB,GACV,MAAMqB,EAAW7D,KAAK4C,KACnBkB,cAAc,aACbC,QAAQD,cAAc,SAC1B,IAAKD,EAAU,CACb,OAAO7D,KAAKuC,Y,CAEd,OAAOsB,EAASG,S,CAGV,SAAAT,GACN,GAAIvD,KAAKc,SAAU,CACjB,M,CAEF,MAAMA,EAAWmD,SAASC,cACxB,+CAEFpD,EAASqD,iBAAiB,gBAAgB,KACxCnE,KAAKe,gBAAgB,KAAK,IAE5Bf,KAAKY,YAAYE,GACjBd,KAAK4C,KAAKwB,sBAAsB,cAAetD,E,6BAxJpBuD,EAAA,CAA5BC,K,+BAKMD,EAAA,CAFNE,EAAsB,iB","ignoreList":[]}