{"version":3,"names":["AtomicProductFieldCondition","this","mustMatch","mustNotMatch","conditions","shouldBeRemoved","componentWillLoad","makeDefinedConditions","ifDefined","ifNotDefined","push","makeMatchConditions","render","every","condition","product","h","componentDidLoad","host","remove","__decorate","MapProp","splitValues","ProductContext"],"sources":["src/components/commerce/product-template-components/atomic-product-field-condition/atomic-product-field-condition.tsx"],"sourcesContent":["import {Product, ProductTemplateCondition} from '@coveo/headless/commerce';\nimport {Component, Prop, h, Element} from '@stencil/core';\nimport {MapProp} from '../../../../utils/props-utils';\nimport {\n  makeDefinedConditions,\n  makeMatchConditions,\n} from '../../../common/product-template/stencil-product-template-common';\nimport {ProductContext} from '../product-template-decorators';\n\n/**\n * The `atomic-product-field-condition` component takes a list of conditions that, if fulfilled, apply the template in which it's defined.\n * The condition properties can be based on any top-level product property of the `product` object, not restricted to fields (e.g., `ec_name`).\n * @alpha\n */\n@Component({\n  tag: 'atomic-product-field-condition',\n  shadow: false,\n})\nexport class AtomicProductFieldCondition {\n  @Element() host!: HTMLElement;\n\n  /**\n   * Verifies whether the specified fields are defined.\n   */\n  @Prop({reflect: true}) ifDefined?: string;\n  /**\n   * Verifies whether the specified fields are not defined.\n   */\n  @Prop({reflect: true}) ifNotDefined?: string;\n\n  /**\n   * Verifies whether the specified fields match the specified values.\n   * @type {Record<string, string[]>}\n   */\n  @Prop() @MapProp({splitValues: true}) mustMatch: Record<string, string[]> =\n    {};\n\n  /**\n   * Verifies whether the specified fields do not match the specified values.\n   * @type {Record<string, string[]>}\n   */\n  @Prop() @MapProp({splitValues: true}) mustNotMatch: Record<string, string[]> =\n    {};\n\n  private conditions: ProductTemplateCondition[] = [];\n  private shouldBeRemoved = false;\n\n  @ProductContext() private product!: Product;\n\n  public componentWillLoad() {\n    this.conditions = makeDefinedConditions(this.ifDefined, this.ifNotDefined);\n    this.conditions.push(\n      ...makeMatchConditions(this.mustMatch, this.mustNotMatch)\n    );\n  }\n\n  public render() {\n    if (!this.conditions.every((condition) => condition(this.product))) {\n      this.shouldBeRemoved = true;\n      return '';\n    }\n\n    return <slot />;\n  }\n\n  public componentDidLoad() {\n    this.shouldBeRemoved && this.host.remove();\n  }\n}\n"],"mappings":"4wBAkBaA,EAA2B,M,yBAgBAC,KAAAC,UACpC,GAMoCD,KAAAE,aACpC,GAEMF,KAAAG,WAAyC,GACzCH,KAAAI,gBAAkB,M,oEAVxB,G,kBAOA,E,CAOK,iBAAAC,GACLL,KAAKG,WAAaG,EAAsBN,KAAKO,UAAWP,KAAKQ,cAC7DR,KAAKG,WAAWM,QACXC,EAAoBV,KAAKC,UAAWD,KAAKE,c,CAIzC,MAAAS,GACL,IAAKX,KAAKG,WAAWS,OAAOC,GAAcA,EAAUb,KAAKc,WAAW,CAClEd,KAAKI,gBAAkB,KACvB,MAAO,E,CAGT,OAAOW,EAAA,Y,CAGF,gBAAAC,GACLhB,KAAKI,iBAAmBJ,KAAKiB,KAAKC,Q,6BAhCEC,EAAA,CAA7BC,EAAQ,CAACC,YAAa,Q,gCAOOF,EAAA,CAA7BC,EAAQ,CAACC,YAAa,Q,mCAMLF,EAAA,CAAzBG,K","ignoreList":[]}