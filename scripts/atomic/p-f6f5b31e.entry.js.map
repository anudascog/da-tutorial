{"version":3,"names":["AtomicProductNumericFieldValue","this","formatter","defaultNumberFormatter","valueToDisplay","setFormat","event","preventDefault","stopPropagation","detail","formatValue","value","bindings","i18n","languages","error","toString","updateValueToDisplay","parseValue","product","field","componentWillRender","render","host","remove","__decorate","InitializeBindings","ProductContext"],"sources":["src/components/commerce/product-template-components/atomic-product-numeric-field-value/atomic-product-numeric-field-value.tsx"],"sourcesContent":["import {Product} from '@coveo/headless/commerce';\nimport {Component, Prop, Element, State, Listen} from '@stencil/core';\nimport {InitializeBindings} from '../../../../utils/initialization-utils';\nimport {\n  defaultNumberFormatter,\n  NumberFormatter,\n} from '../../../common/formats/format-common';\nimport {CommerceBindings} from '../../atomic-commerce-interface/atomic-commerce-interface';\nimport {ProductContext} from '../product-template-decorators';\nimport {parseValue} from '../product-utils';\n\n/**\n * @alpha\n * The `atomic-product-numeric-field-value` component renders the value of a number product field.\n *\n * The number can be formatted by adding a `atomic-format-number`, `atomic-format-currency` or `atomic-format-unit` component into this component.\n */\n@Component({\n  tag: 'atomic-product-numeric-field-value',\n  shadow: false,\n})\nexport class AtomicProductNumericFieldValue {\n  @InitializeBindings() public bindings!: CommerceBindings;\n  @ProductContext() private product!: Product;\n\n  @Element() host!: HTMLElement;\n\n  @State() public error!: Error;\n\n  /**\n   * The field that the component should use.\n   * The component will try to find this field in the `Product.additionalFields` object unless it finds it in the `Product` object first.\n   */\n  @Prop({reflect: true}) field!: string;\n\n  @State() formatter: NumberFormatter = defaultNumberFormatter;\n\n  @State() valueToDisplay: string | null = null;\n\n  @Listen('atomic/numberFormat')\n  public setFormat(event: CustomEvent<NumberFormatter>) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.formatter = event.detail;\n  }\n\n  private formatValue(value: number) {\n    try {\n      return this.formatter(value, this.bindings.i18n.languages as string[]);\n    } catch (error) {\n      this.error = error as Error;\n      return value.toString();\n    }\n  }\n\n  private updateValueToDisplay() {\n    const value = parseValue(this.product, this.field);\n    if (value !== null) {\n      this.valueToDisplay = this.formatValue(value);\n    }\n  }\n\n  componentWillRender() {\n    this.updateValueToDisplay();\n  }\n\n  public render() {\n    if (this.valueToDisplay === null) {\n      this.host.remove();\n      return;\n    }\n    return this.valueToDisplay;\n  }\n}\n"],"mappings":"qvBAqBaA,EAA8B,M,yBAchCC,KAAAC,UAA6BC,EAE7BF,KAAAG,eAAgC,K,yDAFHD,E,oBAEG,I,CAGlC,SAAAE,CAAUC,GACfA,EAAMC,iBACND,EAAME,kBACNP,KAAKC,UAAYI,EAAMG,M,CAGjB,WAAAC,CAAYC,GAClB,IACE,OAAOV,KAAKC,UAAUS,EAAOV,KAAKW,SAASC,KAAKC,U,CAChD,MAAOC,GACPd,KAAKc,MAAQA,EACb,OAAOJ,EAAMK,U,EAIT,oBAAAC,GACN,MAAMN,EAAQO,EAAWjB,KAAKkB,QAASlB,KAAKmB,OAC5C,GAAIT,IAAU,KAAM,CAClBV,KAAKG,eAAiBH,KAAKS,YAAYC,E,EAI3C,mBAAAU,GACEpB,KAAKgB,sB,CAGA,MAAAK,GACL,GAAIrB,KAAKG,iBAAmB,KAAM,CAChCH,KAAKsB,KAAKC,SACV,M,CAEF,OAAOvB,KAAKG,c,6BAjDeqB,EAAA,CAA5BC,K,+BACyBD,EAAA,CAAzBE,K","ignoreList":[]}