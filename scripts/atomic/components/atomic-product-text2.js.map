{"file":"atomic-product-text2.js","mappings":";;;;;;;;;;;;;;;;;;;MAyBa,iBAAiB;;;;;;;;QAmBE,oBAAe,GAAG,IAAI,CAAC;;;+BAAL,IAAI;;;IAMpD,IAAY,sBAAsB;QAChC,OAAO,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,+BAA+B,EAAE,CAAC;KACvE;IAEM,+BAA+B;QACpC,OAAO,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACpD;IAEM,MAAM;QACX,MAAM,oBAAoB,GAAG,+BAA+B,CAC1D,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,KAAK,CACX,CAAC;QAEF,IAAI,oBAAoB,KAAK,IAAI,EAAE;YACjC,QACE,EAAC,gBAAgB,IACf,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,EACnC,YAAY,EAAE,IAAI,CAAC,OAAO,EAC1B,IAAI,EAAE,IAAI,CAAC,OAAO,EAClB,WAAW,EAAE,uBAAuB,CAAC,kBAAkB,IAEvD,4BACE,KAAK,EAAE,oBAAoB,CACzB,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,OAAQ,EACb,IAAI,CAAC,QAAQ,CAAC,IAAI,CACnB,GACqB,CACP,EACnB;SACH;QAED,MAAM,SAAS,GAAG,GAAG,oBAAoB,EAAE,CAAC;QAC5C,MAAM,iBAAiB,GAAG,uBAAuB,CAAC,kBAAkB,CAClE,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,KAAK,KAAK,SAAS,GAAG,gBAAgB,GAAG,mBAAmB,CAC7B,CAAC;QAEvC,OAAO,IAAI,CAAC,sBAAsB,IAAI,iBAAiB,IACrD,EAAC,mBAAmB,IAClB,SAAS,EAAE,SAAS,EACpB,iBAAiB,EAAE,iBAAiB,EACpC,eAAe,EAAE,cAAc,CAAC,eAAe,EAC/C,OAAO,EAAE,CAAC,KAAK,MAAM,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,GACnB,KAEvB,4BACE,KAAK,EAAE,oBAAoB,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAChD,CACzB,CAAC;KACH;;;;;;;;AA3E4B;IAA5B,kBAAkB,EAAE;mDAAoC;AAG/B;IAAzB,cAAc,EAAE;kDAA2B;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/commerce/product-template-components/atomic-product-text/atomic-product-text.tsx"],"sourcesContent":["import {\n  Product,\n  ProductTemplatesHelpers,\n  HighlightUtils,\n} from '@coveo/headless/commerce';\nimport {Component, h, Prop, Element, State} from '@stencil/core';\nimport {getFieldValueCaption} from '../../../../utils/field-utils';\nimport {\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {ItemTextFallback} from '../../../common/item-text/stencil-item-text-fallback';\nimport {ItemTextHighlighted} from '../../../common/item-text/stencil-item-text-highlighted';\nimport {CommerceBindings} from '../../atomic-commerce-interface/atomic-commerce-interface';\nimport {ProductContext} from '../product-template-decorators';\nimport {getStringValueFromProductOrNull} from '../product-utils';\n\n/**\n * @alpha\n * The `atomic-product-text` component renders the value of a string product field.\n */\n@Component({\n  tag: 'atomic-product-text',\n  shadow: false,\n})\nexport class AtomicProductText\n  implements InitializableComponent<CommerceBindings>\n{\n  @InitializeBindings() public bindings!: CommerceBindings;\n  @State() public error!: Error;\n\n  @ProductContext() private product!: Product;\n\n  @Element() private host!: HTMLElement;\n\n  /**\n   * The product field which the component should use.\n   * This will look in the Product object first, and then in the product.additionalFields object for the fields.\n   */\n  @Prop({reflect: true}) public field!: string;\n  /**\n   * When this is set to `true`, the component attempts to highlight text based on the highlighting properties provided by the search API response.\n   * This property only works for the product excerpt and the ec_name field.\n   */\n  @Prop({reflect: true}) public shouldHighlight = true;\n  /**\n   * The locale key for the text to display when the configured field has no value.\n   */\n  @Prop({reflect: true}) public default?: string;\n\n  private get shouldRenderHighlights() {\n    return this.shouldHighlight && this.isFieldSupportedForHighlighting();\n  }\n\n  public isFieldSupportedForHighlighting() {\n    return ['ec_name', 'excerpt'].includes(this.field);\n  }\n\n  public render() {\n    const productValueAsString = getStringValueFromProductOrNull(\n      this.product,\n      this.field\n    );\n\n    if (productValueAsString === null) {\n      return (\n        <ItemTextFallback\n          field={this.field}\n          host={this.host}\n          logger={this.bindings.engine.logger}\n          defaultValue={this.default}\n          item={this.product}\n          getProperty={ProductTemplatesHelpers.getProductProperty}\n        >\n          <atomic-commerce-text\n            value={getFieldValueCaption(\n              this.field,\n              this.default!,\n              this.bindings.i18n\n            )}\n          ></atomic-commerce-text>\n        </ItemTextFallback>\n      );\n    }\n\n    const textValue = `${productValueAsString}`;\n    const highlightKeywords = ProductTemplatesHelpers.getProductProperty(\n      this.product,\n      this.field === 'ec_name' ? 'nameHighlights' : 'excerptHighlights'\n    ) as HighlightUtils.HighlightKeyword[];\n\n    return this.shouldRenderHighlights && highlightKeywords ? (\n      <ItemTextHighlighted\n        textValue={textValue}\n        highlightKeywords={highlightKeywords}\n        highlightString={HighlightUtils.highlightString}\n        onError={(error) => (this.error = error)}\n      ></ItemTextHighlighted>\n    ) : (\n      <atomic-commerce-text\n        value={getFieldValueCaption(this.field, textValue, this.bindings.i18n)}\n      ></atomic-commerce-text>\n    );\n  }\n}\n"],"version":3}