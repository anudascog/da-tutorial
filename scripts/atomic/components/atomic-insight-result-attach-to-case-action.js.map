{"file":"atomic-insight-result-attach-to-case-action.js","mappings":";;;;;;;;;;;;AAAA,MAAM,wCAAwC,GAAG,qi1DAAqi1D,CAAC;AACvl1D,oDAAe,wCAAwC;;;;;;;;;;;;MC4B1CA,uCAAqC;;;;;;;;;IA+BzC,UAAU;QACf,MAAM,MAAM,GACV,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,kBAAkB,EAAE,MAAM,IAAI,EAAE,CAAC;QAC9D,IAAI,CAAC,YAAY,GAAG,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;YAC1D,OAAO,EAAE;gBACP,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,MAAM,EAAE,MAAM;aACf;SACF,CAAC,CAAC;KACJ;IAEO,OAAO;QACb,IAAI,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,EAAE;YAClC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;gBACf,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM;gBAClC,MAAM,EAAE,IAAI,CAAC,MAAM;aACpB,CAAC,CAAC;SACJ;aAAM;YACL,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;gBACf,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM;gBAClC,MAAM,EAAE,IAAI,CAAC,MAAM;aACpB,CAAC,CAAC;SACJ;KACF;IAEO,OAAO;QACb,OAAO,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,GAAG,UAAU,GAAG,UAAU,CAAC;KACjE;IAEO,UAAU;QAChB,OAAO,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE;cACjC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,kBAAkB,CAAC;cACxC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC;KAC5C;IAEM,MAAM;QACX,QACE,EAAC,UAAU,qDACT,UAAU,EAAC,eAAe,EAC1B,KAAK,EAAC,iBAAiB,EACvB,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE,EACpB,KAAK,EAAE,IAAI,CAAC,UAAU,EAAE,EACxB,OAAO,EAAE,MAAM,IAAI,CAAC,OAAO,EAAE,GAC7B,EACF;KACH;;;;;;;AAzE4B;IAA5B,kBAAkB,EAAE;yEAAmC;AAC/B;IAAxB,aAAa,EAAE;uEAAyB;AASlC;IAFN,qBAAqB,CAAC,cAAc,CAAC;kFAER;;;;;;;;;;;;;;;;;;;;","names":["AtomicInsightResultAttachToCaseAction"],"sources":["src/components/insight/atomic-insight-result-attach-to-case-action/atomic-insight-result-attach-to-case-action.pcss?tag=atomic-insight-result-attach-to-case-action","src/components/insight/atomic-insight-result-attach-to-case-action/atomic-insight-result-attach-to-case-action.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\n","import {AttachToCase, buildAttachToCase, Result} from '@coveo/headless/insight';\nimport {Component, Event, State, h, Element, EventEmitter} from '@stencil/core';\nimport AttachIcon from '../../../images/attach.svg';\nimport DetachIcon from '../../../images/detach.svg';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {IconButton} from '../../common/iconButton';\nimport {ResultContext} from '../../search/result-template-components/result-template-decorators';\nimport {InsightBindings} from '../atomic-insight-interface/atomic-insight-interface';\n\nexport interface InsightResultAttachToCaseEvent {\n  callback: () => void;\n  result: Result;\n}\n/**\n * @internal\n * The `atomic-insight-result-attach-to-case-action` component can be nested inside a `atomic-insight-result-actions` to render an interactive button that will emit an `atomic/insight/attachToCase/attach` or `atomic/insight/attachToCase/detach` JavaScript event, based on its current state, when clicked.\n *\n * @part result-action-container - The result action container\n * @part result-action-button - The result action button\n * @part result-action-icon - The result action icon\n */\n@Component({\n  tag: 'atomic-insight-result-attach-to-case-action',\n  styleUrl: 'atomic-insight-result-attach-to-case-action.pcss',\n})\nexport class AtomicInsightResultAttachToCaseAction\n  implements InitializableComponent<InsightBindings>\n{\n  @InitializeBindings() public bindings!: InsightBindings;\n  @ResultContext() private result!: Result;\n\n  @Element() host!: HTMLElement;\n  @State() public error!: Error;\n\n  public attachToCase!: AttachToCase;\n\n  @BindStateToController('attachToCase')\n  @State()\n  public attachToCaseState!: {};\n\n  @Event({\n    eventName: 'atomic/insight/attachToCase/attach',\n    composed: true,\n    cancelable: true,\n    bubbles: true,\n  })\n  private attach!: EventEmitter<InsightResultAttachToCaseEvent>;\n\n  @Event({\n    eventName: 'atomic/insight/attachToCase/detach',\n    composed: true,\n    cancelable: true,\n    bubbles: true,\n  })\n  private detach!: EventEmitter<InsightResultAttachToCaseEvent>;\n\n  public initialize() {\n    const caseId: string =\n      this.bindings.engine.state.insightCaseContext?.caseId || '';\n    this.attachToCase = buildAttachToCase(this.bindings.engine, {\n      options: {\n        result: this.result,\n        caseId: caseId,\n      },\n    });\n  }\n\n  private onClick() {\n    if (this.attachToCase.isAttached()) {\n      this.detach.emit({\n        callback: this.attachToCase.detach,\n        result: this.result,\n      });\n    } else {\n      this.attach.emit({\n        callback: this.attachToCase.attach,\n        result: this.result,\n      });\n    }\n  }\n\n  private getIcon() {\n    return this.attachToCase.isAttached() ? DetachIcon : AttachIcon;\n  }\n\n  private getTooltip() {\n    return this.attachToCase.isAttached()\n      ? this.bindings.i18n.t('detach-from-case')\n      : this.bindings.i18n.t('attach-to-case');\n  }\n\n  public render() {\n    return (\n      <IconButton\n        partPrefix=\"result-action\"\n        style=\"outline-neutral\"\n        icon={this.getIcon()}\n        title={this.getTooltip()}\n        onClick={() => this.onClick()}\n      />\n    );\n  }\n}\n"],"version":3}