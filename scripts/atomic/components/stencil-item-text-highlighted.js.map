{"file":"stencil-item-text-highlighted.js","mappings":";;;SAEgB,0BAA0B,CACxC,KAAa,EACb,YAAqB,EACrB,IAAiB,EACjB,MAA8B;IAE9B,IAAI,OAAO,CAAC,YAAY,CAAC,EAAE;QACzB,MAAM,CAAC,KAAK,CACV,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,2CAA2C,KAAK,kBAAkB,YAAY,IAAI,EAChH,IAAI,CACL,CAAC;KACH;AACH;;MCDa,gBAAgB,GAAG,CAC9B,EAAC,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,YAAY,EAAE,IAAI,EAAE,WAAW,EAAmB,EACxE,QAAiB;IAEjB,MAAM,GAAG,GAAG,WAAW,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACrC,0BAA0B,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;IAErD,IAAI,WAAW,CAAC,YAAY,CAAC,EAAE;QAC7B,IAAI,CAAC,MAAM,EAAE,CAAC;QACd,OAAO,IAAI,CAAC;KACb;SAAM;QACL,OAAO,EAAC,QAAQ,QAAE,QAAQ,CAAY,CAAC;KACxC;AACH;;SCdgB,oBAAoB,CAClC,KAAa,EACb,UAA+B,EAC/B,eAAgC;IAEhC,MAAM,gBAAgB,GAAG,oBAAoB,CAAC;IAC9C,MAAM,gBAAgB,GAAG,oBAAoB,CAAC;IAC9C,MAAM,gBAAgB,GAAG,eAAe,CAAC;QACvC,OAAO,EAAE,KAAK;QACd,gBAAgB;QAChB,gBAAgB;QAChB,UAAU;KACX,CAAC,CAAC;IACH,OAAO,gBAAgB;SACpB,OAAO,CAAC,IAAI,MAAM,CAAC,gBAAgB,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC;SACjD,OAAO,CAAC,IAAI,MAAM,CAAC,gBAAgB,EAAE,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC;AACxD;;MCda,mBAAmB,GAE5B,CAAC,EAAC,iBAAiB,EAAE,eAAe,EAAE,OAAO,EAAE,SAAS,EAAC;IAC3D,IAAI;QACF,MAAM,gBAAgB,GAAG,oBAAoB,CAC3C,SAAS,EACT,iBAAiB,EACjB,eAAe,CAChB,CAAC;;QAGF,OAAO,EAAC,IAAI,IAAC,SAAS,EAAE,gBAAgB,GAAS,CAAC;KACnD;IAAC,OAAO,KAAK,EAAE;QACd,OAAO,CAAC,KAAc,CAAC,CAAC;KACzB;AACH;;;;","names":[],"sources":["src/components/common/item-text/field-warning.ts","src/components/common/item-text/stencil-item-text-fallback.tsx","src/components/common/item-text/render-highlights.ts","src/components/common/item-text/stencil-item-text-highlighted.tsx"],"sourcesContent":["import {isArray} from '@coveo/bueno';\n\nexport function possiblyWarnOnBadFieldType(\n  field: string,\n  itemValueRaw: unknown,\n  host: HTMLElement,\n  logger: Pick<Console, 'error'>\n) {\n  if (isArray(itemValueRaw)) {\n    logger.error(\n      `${host.nodeName.toLowerCase()} cannot be used with multi value field \"${field}\" with values \"${itemValueRaw}\".`,\n      host\n    );\n  }\n}\n","import {isUndefined} from '@coveo/bueno';\nimport {Fragment, FunctionalComponent, VNode, h} from '@stencil/core';\nimport {possiblyWarnOnBadFieldType} from './field-warning';\n\nexport interface ItemTextProps<T> {\n  logger: Pick<Console, 'error'>;\n  host: HTMLElement;\n  defaultValue: string | undefined;\n  field: string;\n  item: T;\n  getProperty: (result: T, property: string) => unknown;\n}\n\nexport const ItemTextFallback = <T,>(\n  {field, host, logger, defaultValue, item, getProperty}: ItemTextProps<T>,\n  children: VNode[]\n): FunctionalComponent<ItemTextProps<T>> | null => {\n  const raw = getProperty(item, field);\n  possiblyWarnOnBadFieldType(field, raw, host, logger);\n\n  if (isUndefined(defaultValue)) {\n    host.remove();\n    return null;\n  } else {\n    return <Fragment>{children}</Fragment>;\n  }\n};\n","export type HighlightKeywords = {\n  offset: number;\n  length: number;\n};\n\nexport type HighlightString = (params: {\n  content: string;\n  openingDelimiter: string;\n  closingDelimiter: string;\n  highlights: HighlightKeywords[];\n}) => string;\n\nexport function renderWithHighlights(\n  value: string,\n  highlights: HighlightKeywords[],\n  highlightString: HighlightString\n) {\n  const openingDelimiter = '_openingDelimiter_';\n  const closingDelimiter = '_closingDelimiter_';\n  const highlightedValue = highlightString({\n    content: value,\n    openingDelimiter,\n    closingDelimiter,\n    highlights,\n  });\n  return highlightedValue\n    .replace(new RegExp(openingDelimiter, 'g'), '<b>')\n    .replace(new RegExp(closingDelimiter, 'g'), '</b>');\n}\n","import {FunctionalComponent, h, Host} from '@stencil/core';\nimport {\n  HighlightKeywords,\n  HighlightString,\n  renderWithHighlights,\n} from './render-highlights';\n\nexport interface ItemTextHighlightedProps {\n  textValue: string;\n  highlightKeywords: HighlightKeywords[];\n  onError: (error: Error) => void;\n  highlightString: HighlightString;\n}\n\nexport const ItemTextHighlighted: FunctionalComponent<\n  ItemTextHighlightedProps\n> = ({highlightKeywords, highlightString, onError, textValue}) => {\n  try {\n    const highlightedValue = renderWithHighlights(\n      textValue,\n      highlightKeywords,\n      highlightString\n    );\n\n    // deepcode ignore ReactSetInnerHtml: This is not React code\n    return <Host innerHTML={highlightedValue}></Host>;\n  } catch (error) {\n    onError(error as Error);\n  }\n};\n"],"version":3}