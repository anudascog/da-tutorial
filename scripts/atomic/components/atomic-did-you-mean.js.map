{"file":"atomic-did-you-mean.js","mappings":";;;;;AAAA,MAAM,mBAAmB,GAAG,qi1DAAqi1D,CAAC;AAClk1D,+BAAe,mBAAmB;;;;;;;;;;;;MCoCrBA,kBAAgB;;;;;;;;;;;;QAoBG,8BAAyB,GAAG,IAAI,CAAC;;;;;;;;;QAWxD,wBAAmB,GAAsB,MAAM,CAAC;;;;yCAXG,IAAI;mCAWd,MAAM;;IAG/C,yBAAyB;QAC9B,IAAI,CAAC,UAAU,CAAC,yBAAyB,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;KACrE;IAEM,UAAU;QACf,IAAI,CAAC,UAAU,GAAG,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;YACtD,OAAO,EAAE;gBACP,yBAAyB,EAAE,IAAI,CAAC,yBAAyB;gBACzD,mBAAmB,EAAE,IAAI,CAAC,mBAAmB;aAC9C;SACF,CAAC,CAAC;QACH,IAAI,CAAC,YAAY,GAAG,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;KAC7D;IAED,IAAY,OAAO;QACjB,IAAI,CAAC,IAAI,CAAC,iBAAiB,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YACpD,OAAO;SACR;QAED,MAAM,EAAC,kBAAkB,EAAE,yBAAyB,EAAC,GACnD,IAAI,CAAC,eAAe,CAAC;QACvB,MAAM,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC;QAE3D,IAAI,kBAAkB,IAAI,yBAAyB,EAAE;YACnD,QACE,EAAC,cAAc,IACb,WAAW,EAAE,IAAI,CAAC,eAAe,CAAC,cAAc,EAChD,aAAa,EAAE,IAAI,CAAC,eAAe,CAAC,aAAa,EACjD,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,GACxB,EACF;SACH;QACD,IAAI,kBAAkB,EAAE;YACtB,QACE,EAAC,UAAU,IACT,cAAc,EAAE,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,cAAc,EACnE,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,EACxB,OAAO,EAAE,MAAM,IAAI,CAAC,UAAU,CAAC,eAAe,EAAE,GAChD,EACF;SACH;QACD,IAAI,UAAU,EAAE;YACd,QACE,EAAC,iBAAiB,IAChB,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,EACxB,cAAc,EAAE,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAC/C,aAAa,EAAE,IAAI,CAAC,iBAAiB,CAAC,aAAa,EACnD,OAAO,EAAE,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,GACvC,EACF;SACH;KACF;IAEM,MAAM;QACX,IAAI,CAAC,IAAI,CAAC,eAAe,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;YACpD,OAAO;SACR;QAED,QACE,EAAC,oBAAoB,IACnB,aAAa,EACX,IAAI,CAAC,eAAe,CAAC,kBAAkB;gBACvC,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,IAGxC,IAAI,CAAC,OAAO,CACQ,EACvB;KACH;;;;;;;;;;;;;;AArG4B;IAA5B,kBAAkB,EAAE;oDAA4B;AAMzC;IAFP,qBAAqB,CAAC,YAAY,CAAC;2DAEM;AAGlC;IAFP,qBAAqB,CAAC,cAAc,CAAC;6DAEQ;;;;;;;;;;;;;;;;;;;;","names":["AtomicDidYouMean"],"sources":["src/components/search/atomic-did-you-mean/atomic-did-you-mean.pcss?tag=atomic-did-you-mean&encapsulation=shadow","src/components/search/atomic-did-you-mean/atomic-did-you-mean.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\n","import {\n  DidYouMean,\n  DidYouMeanState,\n  buildDidYouMean,\n  QueryTrigger,\n  buildQueryTrigger,\n  QueryTriggerState,\n} from '@coveo/headless';\nimport {Component, h, Prop, State, Watch} from '@stencil/core';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {AutoCorrection} from '../../common/query-correction/auto-correction';\nimport {Correction} from '../../common/query-correction/correction';\nimport {QueryCorrectionGuard} from '../../common/query-correction/guard';\nimport {TriggerCorrection} from '../../common/query-correction/trigger-correction';\nimport {Bindings} from '../atomic-search-interface/atomic-search-interface';\n\n/**\n * The `atomic-did-you-mean` component is responsible for handling query corrections. When a query returns no result but finds a possible query correction, the component either suggests the correction or automatically triggers a new query with the suggested term.\n *\n * @part no-results - The text displayed when there are no results.\n * @part auto-corrected - The text displayed for the automatically corrected query.\n * @part showing-results-for - The first paragraph of the text displayed when a query trigger changes a query.\n * @part search-instead-for - The second paragraph of the text displayed when a query trigger changes a query.\n * @part did-you-mean - The text displayed around the button to manually correct a query.\n * @part correction-btn - The button used to manually correct a query.\n * @part undo-btn - The button used to undo a query changed by a query trigger.\n * @part highlight - The query highlights.\n */\n@Component({\n  tag: 'atomic-did-you-mean',\n  styleUrl: 'atomic-did-you-mean.pcss',\n  shadow: true,\n})\nexport class AtomicDidYouMean implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  private didYouMean!: DidYouMean;\n  protected queryTrigger!: QueryTrigger;\n\n  @BindStateToController('didYouMean')\n  @State()\n  private didYouMeanState?: DidYouMeanState;\n  @BindStateToController('queryTrigger')\n  @State()\n  private queryTriggerState?: QueryTriggerState;\n  @State() public error!: Error;\n\n  /**\n   * Whether to automatically apply corrections for queries that would otherwise return no results.\n   * When `automaticallyCorrectQuery` is `true`, the component automatically triggers a new query using the suggested term.\n   * When `automaticallyCorrectQuery` is `false`, the component returns the suggested term without triggering a new query.\n   *\n   * The default value is `true`.\n   */\n  @Prop({reflect: true}) public automaticallyCorrectQuery = true;\n\n  /**\n   * Define which query correction system to use\n   *\n   * `legacy`: Query correction is powered by the legacy index system. This system relies on an algorithm using solely the index content to compute the suggested terms.\n   * `next`: Query correction is powered by a machine learning system, requiring a valid query suggestion model configured in your Coveo environment to function properly. This system relies on machine learning algorithms to compute the suggested terms.\n   *\n   * Default value is `next`.\n   */\n  @Prop({reflect: true})\n  public queryCorrectionMode: 'legacy' | 'next' = 'next';\n\n  @Watch('queryCorrectionMode')\n  public updateQueryCorrectionMode() {\n    this.didYouMean.updateQueryCorrectionMode(this.queryCorrectionMode);\n  }\n\n  public initialize() {\n    this.didYouMean = buildDidYouMean(this.bindings.engine, {\n      options: {\n        automaticallyCorrectQuery: this.automaticallyCorrectQuery,\n        queryCorrectionMode: this.queryCorrectionMode,\n      },\n    });\n    this.queryTrigger = buildQueryTrigger(this.bindings.engine);\n  }\n\n  private get content() {\n    if (!this.queryTriggerState || !this.didYouMeanState) {\n      return;\n    }\n\n    const {hasQueryCorrection, wasAutomaticallyCorrected} =\n      this.didYouMeanState;\n    const hasTrigger = this.queryTriggerState.wasQueryModified;\n\n    if (hasQueryCorrection && wasAutomaticallyCorrected) {\n      return (\n        <AutoCorrection\n          correctedTo={this.didYouMeanState.wasCorrectedTo}\n          originalQuery={this.didYouMeanState.originalQuery}\n          i18n={this.bindings.i18n}\n        />\n      );\n    }\n    if (hasQueryCorrection) {\n      return (\n        <Correction\n          correctedQuery={this.didYouMeanState.queryCorrection.correctedQuery}\n          i18n={this.bindings.i18n}\n          onClick={() => this.didYouMean.applyCorrection()}\n        />\n      );\n    }\n    if (hasTrigger) {\n      return (\n        <TriggerCorrection\n          i18n={this.bindings.i18n}\n          correctedQuery={this.queryTriggerState.newQuery}\n          originalQuery={this.queryTriggerState.originalQuery}\n          onClick={() => this.queryTrigger.undo()}\n        />\n      );\n    }\n  }\n\n  public render() {\n    if (!this.didYouMeanState || !this.queryTriggerState) {\n      return;\n    }\n\n    return (\n      <QueryCorrectionGuard\n        hasCorrection={\n          this.didYouMeanState.hasQueryCorrection ||\n          this.queryTriggerState.wasQueryModified\n        }\n      >\n        {this.content}\n      </QueryCorrectionGuard>\n    );\n  }\n}\n"],"version":3}