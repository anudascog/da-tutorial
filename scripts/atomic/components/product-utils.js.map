{"file":"product-utils.js","mappings":";;;;SAKgB,UAAU,CAAC,OAAgB,EAAE,KAAa;IACxD,MAAM,KAAK,GAAG,uBAAuB,CAAC,kBAAkB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IACzE,IAAI,KAAK,KAAK,IAAI,EAAE;QAClB,OAAO,IAAI,CAAC;KACb;IACD,MAAM,aAAa,GAAG,UAAU,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC;IAC7C,IAAI,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,EAAE;QAC/B,MAAM,IAAI,oBAAoB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;KAC9C;IACD,OAAO,aAAa,CAAC;AACvB,CAAC;SAEe,+BAA+B,CAC7C,OAAgB,EAChB,KAAa;IAEb,MAAM,KAAK,GAAG,uBAAuB,CAAC,kBAAkB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAEzE,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;QACpD,OAAO,IAAI,CAAC;KACb;IAED,OAAO,KAAK,CAAC;AACf,CAAC;SAEe,8BAA8B,CAC5C,QAAgB,EAChB,OAAgB,EAChB,QAA0B;IAE1B,OAAO,QAAQ,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC,KAAa;QAClD,MAAM,GAAG,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACjD,IAAI,QAAQ,GAAG,cAAc,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;QAC5C,IAAI,CAAC,QAAQ,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;YAC9C,QAAQ,GAAG,cAAc,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;SACxC;QAED,IAAI,CAAC,QAAQ,EAAE;YACb,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CACzB,GAAG,GAAG,6DAA6D,OAAO,CAAC,WAAW,+CAA+C,CACtI,CAAC;YACF,OAAO,EAAE,CAAC;SACX;QAED,OAAO,QAAQ,CAAC;KACjB,CAAC,CAAC;AACL;;;;","names":[],"sources":["src/components/commerce/product-template-components/product-utils.ts"],"sourcesContent":["import {Product, ProductTemplatesHelpers} from '@coveo/headless/commerce';\nimport {readFromObject} from '../../../utils/object-utils';\nimport {CommerceBindings} from '../atomic-commerce-interface/atomic-commerce-interface';\nimport {FieldValueIsNaNError} from './error';\n\nexport function parseValue(product: Product, field: string) {\n  const value = ProductTemplatesHelpers.getProductProperty(product, field);\n  if (value === null) {\n    return null;\n  }\n  const valueAsNumber = parseFloat(`${value}`);\n  if (Number.isNaN(valueAsNumber)) {\n    throw new FieldValueIsNaNError(field, value);\n  }\n  return valueAsNumber;\n}\n\nexport function getStringValueFromProductOrNull(\n  product: Product,\n  field: string\n) {\n  const value = ProductTemplatesHelpers.getProductProperty(product, field);\n\n  if (typeof value !== 'string' || value.trim() === '') {\n    return null;\n  }\n\n  return value;\n}\n\nexport function buildStringTemplateFromProduct(\n  template: string,\n  product: Product,\n  bindings: CommerceBindings\n) {\n  return template.replace(/\\${(.*?)}/g, (value: string) => {\n    const key = value.substring(2, value.length - 1);\n    let newValue = readFromObject(product, key);\n    if (!newValue && typeof window !== 'undefined') {\n      newValue = readFromObject(window, key);\n    }\n\n    if (!newValue) {\n      bindings.engine.logger.warn(\n        `${key} used in the href template is undefined for this product: ${product.permanentid} and could not be found in the window object.`\n      );\n      return '';\n    }\n\n    return newValue;\n  });\n}\n"],"version":3}