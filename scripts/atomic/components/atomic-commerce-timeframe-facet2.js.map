{"file":"atomic-commerce-timeframe-facet2.js","mappings":";;;;;;;;;;;;;;AAAA,MAAM,+BAA+B,GAAG,gz2DAAgz2D,CAAC;AACz12D,2CAAe,+BAA+B;;;;;;;;;;;;MCwCjC,4BAA4B;;;;;;;;QAiBM,gBAAW,GAAG,KAAK,CAAC;;;2BAAN,KAAK;;;;;;;IAmBhE,IAAY,WAAW;QACrB,OAAO,IAAI,CAAC,UAAU,CAAC,WAAW,IAAI,UAAU,CAAC;KAClD;IAED,IAAY,WAAW;QACrB,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACrB,IAAI,CAAC,WAAW,GAAG,IAAI,qBAAqB,CAAC,IAAI,CAAC,CAAC;SACpD;QACD,OAAO,IAAI,CAAC,WAAW,CAAC;KACzB;IAIM,UAAU;QACf,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACf,OAAO;SACR;QACD,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,oBAAoB,EAAE,CAAC;KAC7B;IAEM,iBAAiB;QACtB,IAAI,CAAC,gBAAgB,EAAE,CAAC;KACzB;IAGM,cAAc,CAAC,EAAC,MAAM,EAA+B;QAC1D,IAAI,CAAC,UAAU,GAAG,EAAC,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE,GAAG,EAAE,MAAM,CAAC,GAAG,EAAC,CAAC;KAC1D;IAED,IAAY,cAAc;QACxB,QACE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAC3B,CAAC,KAAK,KAAK,KAAK,CAAC,eAAe,IAAI,KAAK,CAAC,KAAK,KAAK,MAAM,CAC3D,IAAI,EAAE,EACP;KACH;IAED,IAAY,kBAAkB;QAC5B,OAAO,CAAC,IAAI,CAAC,aAAa,IAAI,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;KAC5D;IAED,IAAY,iBAAiB;QAC3B,OAAO,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,kBAAkB,CAAC;KAC1D;IAED,IAAY,iBAAiB;QAC3B,MAAM,EACJ,oBAAoB,EAAE,mBAAmB,EACzC,QAAQ,EACR,SAAS,EACT,WAAW,EAAE,UAAU,GACxB,GAAG,IAAI,CAAC,YAAY,CAAC;QACtB,OAAO,+BAA+B,CAAC;YACrC,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,iBAAiB,EAAE;gBACjB,mBAAmB;gBACnB,QAAQ;gBACR,UAAU;gBACV,SAAS;aACV;YACD,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,IAAI,EAAE;YACzC,QAAQ,EAAE,IAAI;SACf,CAAC,CAAC;KACJ;IAED,IAAY,SAAS;QACnB,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,EAAE;YACjC,OAAO,IAAI,CAAC;SACb;QAED,OAAO,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;KACrC;IAED,IAAY,sBAAsB;QAChC,IAAI,IAAI,CAAC,aAAa,EAAE;YACtB,OAAO,CAAC,CAAC;SACV;QAED,QACE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAC,KAAK,EAAC,KAAK,KAAK,KAAK,UAAU,CAAC,CAAC,MAAM;YACvE,CAAC,EACD;KACH;IAED,IAAY,aAAa;QACvB,OAAO,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;KAC1B;IAEM,oBAAoB;QACzB,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACzB,OAAO;SACR;QACD,IAAI,CAAC,0BAA0B,IAAI,CAAC;QACpC,IAAI,CAAC,0BAA0B,GAAG,SAAS,CAAC;KAC7C;IAED,IAAY,QAAQ;QAClB,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC;KAChC;IAEO,UAAU;QAChB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;KAC1B;IAEO,oBAAoB;QAC1B,MAAM,SAAS,GAAc;YAC3B,KAAK,EAAE,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC;YACnD,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,OAAO;YAChC,OAAO,EAAE,IAAI,CAAC,IAAI;YAClB,QAAQ,EAAE,MAAM,IAAI,CAAC,QAAQ;SAC9B,CAAC;QAEF,iBAAiB,CAAC,IAAI,CAAC,IAAI,EAAE;YAC3B,GAAG,SAAS;YACZ,SAAS,EAAE,MAAM,IAAI,CAAC,SAAS;YAC/B,oBAAoB,EAAE,MAAM,IAAI,CAAC,sBAAsB;SACxD,CAAC,CAAC;KACJ;IAEO,gBAAgB,CAAC,UAA0B;QACjD,IAAI;YACF,MAAM,SAAS,GAAG,uBAAuB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YAC5D,MAAM,YAAY,GAChB,SAAS,CAAC,MAAM,KAAK,MAAM;kBACvB,SAAS;kBACT,uBAAuB,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YAE9C,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CACzB,GAAG,YAAY,CAAC,MAAM,IAAI,YAAY,CAAC,IAAI,EAAE,EAC7C;gBACE,KAAK,EAAE,YAAY,CAAC,MAAM;aAC3B,CACF,CAAC;SACH;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE;gBAChC,KAAK,EAAE,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC;gBACvD,GAAG,EAAE,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC;aACpD,CAAC,CAAC;SACJ;KACF;IACO,YAAY;QAClB,OAAO,IAAI,CAAC,qBAAqB,CAC/B,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAC5D,CAAC;KACH;IAEO,WAAW,CAAC,UAA0B;QAC5C,MAAM,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACvD,MAAM,UAAU,GAAG,UAAU,CAAC,KAAK,KAAK,UAAU,CAAC;QACnD,MAAM,UAAU,GAAG,UAAU,CAAC,KAAK,KAAK,UAAU,CAAC;QACnD,QACE,EAAC,cAAc,IACb,YAAY,EAAE,YAAY,EAC1B,UAAU,EAAE,UAAU,EACtB,eAAe,EAAE,UAAU,CAAC,eAAe,EAC3C,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,EACxB,OAAO,EAAE,MAAM,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,UAAU,CAAC,IAExD,EAAC,wBAAwB,IACvB,YAAY,EAAE,YAAY,EAC1B,UAAU,EAAE,UAAU,EACtB,UAAU,EAAE,UAAU,GACI,CACb,EACjB;KACH;IAEO,qBAAqB,CAAC,QAAiB;QAC7C,QACE,EAAC,gBAAgB,IAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,WAAW,IACjE,UAAI,KAAK,EAAC,MAAM,EAAC,IAAI,EAAC,QAAQ,IAC3B,QAAQ,CACN,CACY,EACnB;KACH;IAEO,YAAY;QAClB,QACE,EAAC,WAAW,IACV,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,EACxB,KAAK,EAAE,IAAI,CAAC,WAAW,EACvB,cAAc,EAAE;gBACd,IAAI,CAAC,WAAW,CAAC,gBAAgB,EAAE,CAAC;gBACpC,IAAI,IAAI,CAAC,aAAa,EAAE;oBACtB,IAAI,CAAC,UAAU,EAAE,CAAC;oBAClB,OAAO;iBACR;gBACD,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;aAC1B,EACD,oBAAoB,EAAE,IAAI,CAAC,sBAAsB,EACjD,WAAW,EAAE,IAAI,CAAC,WAAW,EAC7B,YAAY,EAAE,CAAC,EACf,gBAAgB,EAAE,OAAO,IAAI,CAAC,WAAW,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,EAC9D,SAAS,EAAE,CAAC,EAAE,KAAK,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,EAAE,CAAC,GACpC,EACf;KACH;IAEO,eAAe;QACrB,QACE,+BACE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,KAAK,EAAE,IAAI,CAAC,WAAW,EACvB,WAAW,EAAE,MAAM,IAAI,CAAC,UAAU,EAClC,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,OAAO,EAChC,WAAW,EAAE,CAAC,EAAC,KAAK,EAAE,GAAG,EAAE,YAAY,EAAmB;gBACxD,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;oBACnB;wBACE,KAAK;wBACL,GAAG;wBACH,YAAY;wBACZ,KAAK,EAAE,UAAU;qBAClB;iBACF,CAAC,CAAC;aACJ,GACwB,EAC3B;KACH;IAEM,MAAM;QACX,MAAM,EAAC,QAAQ,EAAE,oBAAoB,EAAC,GAAG,IAAI,CAAC,YAAY,CAAC;QAE3D,QACE,EAAC,UAAU,qDACT,OAAO,EAAE,IAAI,EACb,mBAAmB,EAAE,oBAAoB,EACzC,QAAQ,EAAE,QAAQ,EAClB,UAAU,EAAE,IAAI,CAAC,iBAAiB,IAGhC,EAAC,cAAc,uDACZ,IAAI,CAAC,YAAY,EAAE,EACnB,CAAC,IAAI,CAAC,WAAW,IAAI;YACpB,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,YAAY,EAAE;YAC9C,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,eAAe,EAAE;SACjD,CACc,CAER,EACb;KACH;IAEO,gBAAgB;QACtB,IAAI,IAAI,CAAC,0BAA0B,EAAE;YACnC,OAAO;SACR;QACD,IAAI,CAAC,0BAA0B,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CACpD,OAAO,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAC3C,CAAC;KACH;;;;;;;;;;;;;AA7R4B;IAA5B,kBAAkB,EAAE;8DAA4B;AAyB1C;IAFN,qBAAqB,CAAC,SAAS,CAAC;kEAEqC;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/commerce/facets/atomic-commerce-timeframe-facet/atomic-commerce-timeframe-facet.pcss?tag=atomic-commerce-timeframe-facet&encapsulation=shadow","src/components/commerce/facets/atomic-commerce-timeframe-facet/atomic-commerce-timeframe-facet.tsx"],"sourcesContent":["@import '../../../common/facets/facet-common.pcss';\n","import {\n  DateFacet,\n  DateFilterRange,\n  deserializeRelativeDate,\n  DateFacetValue,\n  DateFacetState,\n  DateRangeRequest,\n  SearchSummaryState,\n  ProductListingSummaryState,\n  Summary,\n} from '@coveo/headless/commerce';\nimport {Component, Element, h, Listen, Prop, State, VNode} from '@stencil/core';\nimport {parseDate} from '../../../../utils/date-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {FocusTargetController} from '../../../../utils/stencil-accessibility-utils';\nimport {FacetInfo} from '../../../common/facets/facet-common-store';\nimport {FacetContainer} from '../../../common/facets/facet-container/stencil-facet-container';\nimport {FacetGuard} from '../../../common/facets/facet-guard';\nimport {FacetHeader} from '../../../common/facets/facet-header/stencil-facet-header';\nimport {FacetValueLabelHighlight} from '../../../common/facets/facet-value-label-highlight/stencil-facet-value-label-highlight';\nimport {FacetValueLink} from '../../../common/facets/facet-value-link/stencil-facet-value-link';\nimport {FacetValuesGroup} from '../../../common/facets/facet-values-group/stencil-facet-values-group';\nimport {initializePopover} from '../../../common/facets/popover/popover-type';\nimport {shouldDisplayInputForFacetRange} from '../../../common/facets/stencil-facet-common';\nimport {CommerceBindings as Bindings} from '../../atomic-commerce-interface/atomic-commerce-interface';\n\n/**\n * A facet is a list of values for a certain field occurring in the results.\n * An `atomic-commerce-timeframe-facet` displays a facet of the results for the current query as date intervals.\n *\n * @alpha\n */\n@Component({\n  tag: 'atomic-commerce-timeframe-facet',\n  styleUrl: './atomic-commerce-timeframe-facet.pcss',\n  shadow: true,\n})\nexport class AtomicCommerceTimeframeFacet\n  implements InitializableComponent<Bindings>\n{\n  @InitializeBindings() public bindings!: Bindings;\n  @Element() private host!: HTMLElement;\n\n  /**\n   * The summary controller instance.\n   */\n  @Prop() summary!: Summary<SearchSummaryState | ProductListingSummaryState>;\n  /**\n   * The date facet controller instance.\n   */\n  @Prop() public facet!: DateFacet;\n  /**\n   * Specifies whether the facet is collapsed.\n   */\n  @Prop({reflect: true, mutable: true}) public isCollapsed = false;\n  /**\n   * The field identifier for this facet.\n   */\n  @Prop({reflect: true}) field?: string;\n\n  @State()\n  public facetState!: DateFacetState;\n\n  @BindStateToController('summary')\n  @State()\n  public summaryState!: SearchSummaryState | ProductListingSummaryState;\n\n  @State() public error!: Error;\n\n  @State() private inputRange?: DateFilterRange;\n\n  private headerFocus?: FocusTargetController;\n\n  private get displayName() {\n    return this.facetState.displayName || 'no-label';\n  }\n\n  private get focusTarget(): FocusTargetController {\n    if (!this.headerFocus) {\n      this.headerFocus = new FocusTargetController(this);\n    }\n    return this.headerFocus;\n  }\n\n  private unsubscribeFacetController?: () => void | undefined;\n\n  public initialize() {\n    if (!this.facet) {\n      return;\n    }\n    this.ensureSubscribed();\n    this.registerFacetToStore();\n  }\n\n  public connectedCallback(): void {\n    this.ensureSubscribed();\n  }\n\n  @Listen('atomic/dateInputApply')\n  public applyDateInput({detail}: CustomEvent<DateFilterRange>) {\n    this.inputRange = {start: detail.start, end: detail.end};\n  }\n\n  private get valuesToRender() {\n    return (\n      this.facetState.values.filter(\n        (value) => value.numberOfResults || value.state !== 'idle'\n      ) || []\n    );\n  }\n\n  private get shouldRenderValues() {\n    return !this.hasInputRange && !!this.valuesToRender.length;\n  }\n\n  private get shouldRenderFacet() {\n    return this.shouldRenderInput || this.shouldRenderValues;\n  }\n\n  private get shouldRenderInput() {\n    const {\n      firstRequestExecuted: firstSearchExecuted,\n      hasError,\n      isLoading,\n      hasProducts: hasResults,\n    } = this.summaryState;\n    return shouldDisplayInputForFacetRange({\n      hasInputRange: this.hasInputRange,\n      searchStatusState: {\n        firstSearchExecuted,\n        hasError,\n        hasResults,\n        isLoading,\n      },\n      facetValues: this.facetState.values || [],\n      hasInput: true,\n    });\n  }\n\n  private get hasValues() {\n    if (this.facetState.values.length) {\n      return true;\n    }\n\n    return !!this.valuesToRender.length;\n  }\n\n  private get numberOfSelectedValues() {\n    if (this.hasInputRange) {\n      return 1;\n    }\n\n    return (\n      this.facetState.values.filter(({state}) => state === 'selected').length ||\n      0\n    );\n  }\n\n  private get hasInputRange() {\n    return !!this.inputRange;\n  }\n\n  public disconnectedCallback() {\n    if (this.host.isConnected) {\n      return;\n    }\n    this.unsubscribeFacetController?.();\n    this.unsubscribeFacetController = undefined;\n  }\n\n  private get isHidden() {\n    return !this.shouldRenderFacet;\n  }\n\n  private resetRange() {\n    this.inputRange = undefined;\n    this.facet.setRanges([]);\n  }\n\n  private registerFacetToStore() {\n    const facetInfo: FacetInfo = {\n      label: () => this.bindings.i18n.t(this.displayName),\n      facetId: this.facetState.facetId,\n      element: this.host,\n      isHidden: () => this.isHidden,\n    };\n\n    initializePopover(this.host, {\n      ...facetInfo,\n      hasValues: () => this.hasValues,\n      numberOfActiveValues: () => this.numberOfSelectedValues,\n    });\n  }\n\n  private formatFacetValue(facetValue: DateFacetValue) {\n    try {\n      const startDate = deserializeRelativeDate(facetValue.start);\n      const relativeDate =\n        startDate.period === 'past'\n          ? startDate\n          : deserializeRelativeDate(facetValue.end);\n\n      return this.bindings.i18n.t(\n        `${relativeDate.period}-${relativeDate.unit}`,\n        {\n          count: relativeDate.amount,\n        }\n      );\n    } catch (error) {\n      return this.bindings.i18n.t('to', {\n        start: parseDate(facetValue.start).format('YYYY-MM-DD'),\n        end: parseDate(facetValue.end).format('YYYY-MM-DD'),\n      });\n    }\n  }\n  private renderValues() {\n    return this.renderValuesContainer(\n      this.valuesToRender.map((value) => this.renderValue(value))\n    );\n  }\n\n  private renderValue(facetValue: DateFacetValue) {\n    const displayValue = this.formatFacetValue(facetValue);\n    const isSelected = facetValue.state === 'selected';\n    const isExcluded = facetValue.state === 'excluded';\n    return (\n      <FacetValueLink\n        displayValue={displayValue}\n        isSelected={isSelected}\n        numberOfResults={facetValue.numberOfResults}\n        i18n={this.bindings.i18n}\n        onClick={() => this.facet.toggleSingleSelect(facetValue)}\n      >\n        <FacetValueLabelHighlight\n          displayValue={displayValue}\n          isSelected={isSelected}\n          isExcluded={isExcluded}\n        ></FacetValueLabelHighlight>\n      </FacetValueLink>\n    );\n  }\n\n  private renderValuesContainer(children: VNode[]) {\n    return (\n      <FacetValuesGroup i18n={this.bindings.i18n} label={this.displayName}>\n        <ul class=\"mt-3\" part=\"values\">\n          {children}\n        </ul>\n      </FacetValuesGroup>\n    );\n  }\n\n  private renderHeader() {\n    return (\n      <FacetHeader\n        i18n={this.bindings.i18n}\n        label={this.displayName}\n        onClearFilters={() => {\n          this.focusTarget.focusAfterSearch();\n          if (this.hasInputRange) {\n            this.resetRange();\n            return;\n          }\n          this.facet.deselectAll();\n        }}\n        numberOfActiveValues={this.numberOfSelectedValues}\n        isCollapsed={this.isCollapsed}\n        headingLevel={0}\n        onToggleCollapse={() => (this.isCollapsed = !this.isCollapsed)}\n        headerRef={(el) => this.focusTarget.setTarget(el)}\n      ></FacetHeader>\n    );\n  }\n\n  private renderDateInput() {\n    return (\n      <atomic-facet-date-input\n        bindings={this.bindings}\n        label={this.displayName}\n        rangeGetter={() => this.inputRange}\n        facetId={this.facetState.facetId}\n        rangeSetter={({start, end, endInclusive}: DateRangeRequest) => {\n          this.facet.setRanges([\n            {\n              start,\n              end,\n              endInclusive,\n              state: 'selected',\n            },\n          ]);\n        }}\n      ></atomic-facet-date-input>\n    );\n  }\n\n  public render() {\n    const {hasError, firstRequestExecuted} = this.summaryState;\n\n    return (\n      <FacetGuard\n        enabled={true}\n        firstSearchExecuted={firstRequestExecuted}\n        hasError={hasError}\n        hasResults={this.shouldRenderFacet}\n      >\n        {\n          <FacetContainer>\n            {this.renderHeader()}\n            {!this.isCollapsed && [\n              this.shouldRenderValues && this.renderValues(),\n              this.shouldRenderInput && this.renderDateInput(),\n            ]}\n          </FacetContainer>\n        }\n      </FacetGuard>\n    );\n  }\n\n  private ensureSubscribed() {\n    if (this.unsubscribeFacetController) {\n      return;\n    }\n    this.unsubscribeFacetController = this.facet.subscribe(\n      () => (this.facetState = this.facet.state)\n    );\n  }\n}\n"],"version":3}