{"version":3,"names":["CarouselIndicator","numberOfImages","currentImage","navigateToImage","maxImagesBeforeAndAfter","h","part","class","Array","from","length","_","index","isActive","shouldDisplay","Math","max","min","isLastDisplayed","isFirstDisplayed","onClick","event","stopPropagation","ImageCarousel","props","children","commonPaginationClasses","commonArrowClasses","renderPreviousButton","Button","style","ariaLabel","bindings","i18n","t","previousImage","icon","ArrowRight","renderNextButton","nextImage","renderIndicators","Fragment","atomicProductImageCss","AtomicProductImageStyle0","AtomicProductImage","this","useFallback","images","field","fallback","logWarning","message","engine","logger","warn","host","handleImageError","image","target","src","handleMissingFallback","remove","validateUrl","url","product","ec_name","componentWillLoad","validImages","imageUrls","filter","validImageAlt","imageAlt","map","finalUrl","altText","count","itemName","filterProtocol","alt","value","ProductTemplatesHelpers","getProductProperty","isArray","imageAltField","isNullOrUndefined","trim","renderCurrentImage","onError","loading","render","imagesToRender","__decorate","InitializeBindings","ProductContext"],"sources":["src/components/common/image-carousel/image-carousel-indicators.tsx","src/components/common/image-carousel/image-carousel.tsx","src/components/commerce/product-template-components/atomic-product-image/atomic-product-image.pcss?tag=atomic-product-image&encapsulation=shadow","src/components/commerce/product-template-components/atomic-product-image/atomic-product-image.tsx"],"sourcesContent":["/* eslint-disable @cspell/spellchecker */\nimport {FunctionalComponent, h} from '@stencil/core';\n\ninterface CarouselIndicatorProps {\n  numberOfImages: number;\n  currentImage: number;\n  navigateToImage: (index: number) => void;\n  maxImagesBeforeAndAfter?: number;\n}\n\nconst CarouselIndicator: FunctionalComponent<CarouselIndicatorProps> = ({\n  numberOfImages,\n  currentImage: currentImage,\n  navigateToImage: navigateToImage,\n  maxImagesBeforeAndAfter = 2,\n}) => {\n  return (\n    <ul\n      part=\"indicators\"\n      class=\"absolute bottom-2 mt-6 mb-1 flex max-w-4/5 items-center justify-center gap-2\"\n    >\n      {Array.from({length: numberOfImages}, (_, index) => {\n        const isActive = index === currentImage % numberOfImages;\n\n        const shouldDisplay =\n          index >= Math.max(0, currentImage - maxImagesBeforeAndAfter) &&\n          index <=\n            Math.min(\n              currentImage + maxImagesBeforeAndAfter,\n              numberOfImages - 1\n            );\n\n        const isLastDisplayed =\n          index ===\n            Math.min(\n              currentImage + maxImagesBeforeAndAfter,\n              numberOfImages - 1\n            ) && index < numberOfImages - 1;\n\n        const isFirstDisplayed =\n          index === Math.max(0, currentImage - maxImagesBeforeAndAfter) &&\n          index > 0;\n\n        return (\n          <li\n            part={`indicator ${isActive ? 'active-indicator' : ''}`}\n            class={`hover:bg-primary-light cursor-pointer rounded-md shadow transition-all duration-200 ease-in-out ${\n              isActive ? 'bg-primary' : 'bg-neutral'\n            } ${isLastDisplayed || isFirstDisplayed ? 'mobile-only:w-2 mobile-only:h-2 h-1 w-1 scale-75 transform' : 'mobile-only:w-3 mobile-only:h-3 h-2 w-2 scale-100 transform'} ${\n              shouldDisplay\n                ? 'pointer-events-auto opacity-80'\n                : 'pointer-events-none hidden opacity-0'\n            }`}\n            onClick={(event) => {\n              event.stopPropagation();\n              navigateToImage(index);\n            }}\n          ></li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default CarouselIndicator;\n","import {h, FunctionalComponent, Fragment} from '@stencil/core';\nimport {JSXBase} from '@stencil/core/internal';\nimport ArrowRight from '../../../images/arrow-right.svg';\nimport {AnyBindings} from '../interface/bindings';\nimport {Button} from '../stencil-button';\nimport CarouselIndicator from './image-carousel-indicators';\n\nexport interface CarouselProps {\n  bindings: AnyBindings;\n  previousImage(): void;\n  nextImage(): void;\n  navigateToImage(index: number): void;\n  numberOfImages: number;\n  currentImage: number;\n}\n\nexport const ImageCarousel: FunctionalComponent<\n  CarouselProps & JSXBase.HTMLAttributes<HTMLHeadingElement>\n> = (props, children) => {\n  const commonPaginationClasses =\n    'w-6 h-6 grid mobile-only:w-10 mobile-only:h-10 justify-center items-center z-1 group rounded-full duration-200 opacity-50 hover:opacity-100 focus:opacity-100 transition-opacity hover:shadow-sm bottom-0 mb-1 absolute';\n  const commonArrowClasses =\n    'w-4 align-middle text-on-background group-hover:text-primary';\n\n  function renderPreviousButton() {\n    return (\n      <Button\n        style=\"text-primary\"\n        ariaLabel={props.bindings.i18n.t('previous')}\n        onClick={(event) => {\n          event?.stopPropagation();\n          props.previousImage();\n        }}\n        part=\"previous-button\"\n        class={`${commonPaginationClasses} left-0 ml-1`}\n      >\n        <atomic-icon\n          icon={ArrowRight}\n          class={`${commonArrowClasses} rotate-180`}\n        ></atomic-icon>\n      </Button>\n    );\n  }\n\n  function renderNextButton() {\n    return (\n      <Button\n        style=\"text-primary\"\n        ariaLabel={props.bindings.i18n.t('next')}\n        onClick={(event) => {\n          event?.stopPropagation();\n          props.nextImage();\n        }}\n        part=\"next-button\"\n        class={`${commonPaginationClasses} right-0 mr-1`}\n      >\n        <atomic-icon icon={ArrowRight} class={commonArrowClasses}></atomic-icon>\n      </Button>\n    );\n  }\n  function renderIndicators() {\n    return (\n      <CarouselIndicator\n        numberOfImages={props.numberOfImages}\n        currentImage={props.currentImage}\n        navigateToImage={props.navigateToImage}\n      />\n    );\n  }\n  return (\n    <Fragment>\n      <div class=\"relative flex w-full min-w-full items-center justify-center\">\n        {renderPreviousButton()}\n        {children}\n        {renderNextButton()}\n        {renderIndicators()}\n      </div>\n    </Fragment>\n  );\n};\n","@import '../../../../global/global.pcss';\n@import '../../../common/item-list/styles/mixins.pcss';\n@import '../../../common/item-list/styles/placeholders.pcss';\n\n:host {\n  @apply atomic-grid-clickable-elements;\n  @apply atomic-grid-display-common;\n  display: grid;\n  place-items: center;\n  grid-template-rows: 100%;\n  width: 100%;\n  height: 100%;\n\n  img {\n    width: 100%;\n    height: 100%;\n    object-fit: contain;\n  }\n}\n","import {isNullOrUndefined} from '@coveo/bueno';\nimport {Product, ProductTemplatesHelpers} from '@coveo/headless/commerce';\nimport {Component, h, Prop, Element, State, Method} from '@stencil/core';\nimport {\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {filterProtocol} from '../../../../utils/xss-utils';\nimport {ImageCarousel} from '../../../common/image-carousel/image-carousel';\nimport {CommerceBindings as Bindings} from '../../atomic-commerce-interface/atomic-commerce-interface';\nimport {ProductContext} from '../product-template-decorators';\n\ntype Image = {\n  src: string;\n  alt: string;\n};\n\n/**\n * The `atomic-product-image` component renders an image from a product field.\n * @alpha\n */\n@Component({\n  tag: 'atomic-product-image',\n  styleUrl: 'atomic-product-image.pcss',\n  shadow: true,\n})\nexport class AtomicProductImage implements InitializableComponent<Bindings> {\n  @InitializeBindings() public bindings!: Bindings;\n  @ProductContext() private product!: Product;\n  @Element() private host!: HTMLElement;\n  @State() private useFallback = false;\n  @State() private currentImage = 0;\n  @State() private images: Image[] = [];\n\n  public error!: Error;\n\n  /**\n   * The product field which the component should use. This will look for the field in the product object first, then in the product.additionalFields object.\n   */\n  @Prop({reflect: true}) field: string = 'ec_thumbnails';\n\n  /**\n   * The product field that contains the alt text for the images. This will look for the field in the product object first, then in the product.additionalFields object.\n   * If the product has multiple images, the value of the `imageAltField` will be used as the alt text for every image.\n   *\n   * If the field is not specified, or does not contain a valid value, the alt text will be set to \"Image {index} out of {totalImages} for {productName}\".\n   * @type {string}\n   */\n  @Prop({reflect: true}) imageAltField?: string;\n\n  /**\n   * An fallback image URL that will be used in case the specified image is not available or an error is encountered.\n   */\n  @Prop({reflect: true}) fallback: string =\n    // eslint-disable-next-line @cspell/spellchecker\n    'data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\" viewBox=\"0 0 50 50\"%3E%3Crect width=\"50\" height=\"50\" fill=\"none\" stroke=\"none\"%3E%3C/rect%3E%3C/svg%3E';\n\n  /**\n   * Moves to the previous image, when the carousel is activated.\n   */\n  @Method() public async previousImage() {\n    this.currentImage =\n      this.currentImage - 1 < 0\n        ? this.numberOfImages - 1\n        : this.currentImage - 1;\n  }\n\n  /**\n   * Moves to the next image, when the carousel is activated.\n   */\n  @Method() public async nextImage() {\n    this.currentImage = (this.currentImage + 1) % this.numberOfImages;\n  }\n\n  /**\n   * Navigates to the specified image index.\n   *\n   * @param index - The index of the image to navigate to.\n   */\n  @Method() public async navigateToImage(index: number) {\n    this.currentImage = index;\n  }\n\n  private logWarning(message: string) {\n    this.bindings.engine.logger.warn(message, this.host);\n  }\n\n  private handleImageError(event: Event) {\n    const image = event.target as HTMLImageElement;\n    const message = `The image url \"${image.src}\" is not valid or could not be loaded. You might want to add a \"fallback\" property.`;\n    if (this.fallback && image.src !== this.fallback) {\n      this.useFallback = true;\n      image.src = this.fallback;\n    } else if (image.src === this.fallback) {\n      this.logWarning('The fallback image failed to load.');\n    } else {\n      this.logWarning(message);\n    }\n  }\n\n  private handleMissingFallback(message: string) {\n    if (!this.fallback) {\n      this.logWarning(message);\n      this.host.remove();\n      return null;\n    }\n    return this.fallback;\n  }\n\n  private validateUrl(url: string | undefined) {\n    if (!url) {\n      const message = `Image for ${this.product.ec_name} is missing. Please review your indexing. You might want to add a \"fallback\" property.`;\n      return this.handleMissingFallback(message);\n    }\n\n    if (typeof url !== 'string') {\n      const message = `Expected \"${this.field}\" to be a text field. Please review your indexing. You might want to add a \"fallback\" property.`;\n      return this.handleMissingFallback(message);\n    }\n\n    return url;\n  }\n\n  componentWillLoad(): void {\n    const validImages = this.imageUrls.filter(\n      (image) => typeof image === 'string'\n    );\n\n    const validImageAlt = this.imageAlt;\n\n    this.images = validImages.map((url, index) => {\n      const finalUrl = this.useFallback ? this.fallback : url;\n\n      this.validateUrl(finalUrl);\n      let altText;\n\n      if (typeof validImageAlt === 'string') {\n        altText = validImageAlt;\n      } else {\n        altText = this.bindings.i18n.t('image-alt-fallback-multiple', {\n          count: index + 1,\n          max: validImages?.length,\n          itemName: this.product.ec_name,\n        });\n      }\n\n      return {\n        src: filterProtocol(finalUrl),\n        alt: altText,\n      };\n    }) as Image[];\n  }\n\n  private get imageUrls() {\n    const value = ProductTemplatesHelpers.getProductProperty(\n      this.product,\n      this.field\n    );\n\n    return Array.isArray(value) ? value : [value];\n  }\n\n  private get imageAlt() {\n    if (!this.imageAltField) {\n      return null;\n    }\n    const value = ProductTemplatesHelpers.getProductProperty(\n      this.product,\n      this.imageAltField\n    );\n    if (isNullOrUndefined(value)) {\n      return null;\n    }\n    return (value as string).trim();\n  }\n\n  private get numberOfImages() {\n    return this.images?.length ?? 0;\n  }\n\n  private renderCurrentImage(image: Image | null) {\n    if (image === null) {\n      return;\n    }\n\n    return (\n      <img\n        class=\"aspect-square\"\n        alt={image.alt}\n        src={image.src}\n        onError={(image) => this.handleImageError(image)}\n        loading=\"lazy\"\n      />\n    );\n  }\n\n  public render() {\n    const imagesToRender = this.images.map((image: Image) => {\n      return {\n        src: image.src,\n        alt: image.alt,\n      };\n    });\n\n    if (this.images.length === 0) {\n      this.validateUrl(this.fallback);\n      const alt = this.imageAlt\n        ? this.imageAlt\n        : this.bindings.i18n.t('image-not-found-alt', {\n            itemName: this.product.ec_name,\n          });\n      return (\n        <img\n          class=\"aspect-square\"\n          alt={alt}\n          src={this.fallback}\n          loading=\"eager\"\n        />\n      );\n    }\n    if (this.images.length === 1) {\n      return this.renderCurrentImage(imagesToRender[this.currentImage]);\n    }\n\n    return (\n      // TODO - KIT-3612 : handle small/icon image sizes better on mobile\n      <ImageCarousel\n        bindings={this.bindings}\n        currentImage={this.currentImage}\n        navigateToImage={(index) => this.navigateToImage(index)}\n        nextImage={() => this.nextImage()}\n        previousImage={() => this.previousImage()}\n        numberOfImages={this.numberOfImages}\n      >\n        {this.renderCurrentImage(this.images[this.currentImage])}\n      </ImageCarousel>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}