{"version":3,"names":["AtomicResultTemplate","constructor","hostRef","this","conditions","mustMatch","mustNotMatch","connectedCallback","resultTemplateCommon","ResultTemplateCommon","host","setError","err","error","validParents","allowEmpty","componentWillLoad","matchConditions","makeMatchConditions","getTemplate","render","renderIfError","__decorate","MapProp","splitValues"],"sources":["src/components/search/result-templates/atomic-result-template/atomic-result-template.tsx"],"sourcesContent":["import {ResultTemplate, ResultTemplateCondition} from '@coveo/headless';\nimport {Component, Element, Prop, Method, State} from '@stencil/core';\nimport {MapProp} from '../../../../utils/props-utils';\nimport {\n  makeMatchConditions,\n  ResultTemplateCommon,\n} from '../../../common/result-templates/result-template-common';\n\n/**\n * A [result template](https://docs.coveo.com/en/atomic/latest/usage/displaying-results#defining-a-result-template) determines the format of the query results, depending on the conditions that are defined for each template.\n *\n * @slot default - Mandatory. A `template` element that defines the structure of the result item.\n * @slot link - A `template` element that contains a single `atomic-result-link` component.\n *\n * **Note:** Any `<script>` tags that are defined inside a `<template>` element will not be executed when the results are being rendered.\n * @MapProp name: mustMatch;attr: must-match;docs: The field and values that define which result items the condition must be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is `lithiummessage` or `YouTubePlaylist`: `must-match-filetype=\"lithiummessage,YouTubePlaylist\"`;type: Record<string, string[]> ;default: {}\n * @MapProp name: mustNotMatch;attr: must-not-match;docs: The field and values that define which result items the condition must not be applied to. For example, a template with the following attribute only applies to result items whose `filetype` is not `lithiummessage`: `must-not-match-filetype=\"lithiummessage\";type: Record<string, string[]> ;default: {}\n */\n@Component({\n  tag: 'atomic-result-template',\n  shadow: true,\n})\nexport class AtomicResultTemplate {\n  private resultTemplateCommon!: ResultTemplateCommon;\n\n  @State() public error!: Error;\n\n  @Element() public host!: HTMLDivElement;\n\n  /**\n   * A function that must return true on results for the result template to apply.\n   * Set programmatically before initialization, not via attribute.\n   *\n   * For example, the following targets a template and sets a condition to make it apply only to results whose `title` contains `singapore`:\n   * `document.querySelector('#target-template').conditions = [(result) => /singapore/i.test(result.title)];`\n   */\n  @Prop() public conditions: ResultTemplateCondition[] = [];\n\n  /**\n   * Verifies whether the specified fields match the specified values.\n   * @type {Record<string, string[]>}\n   */\n  @Prop() @MapProp({splitValues: true}) public mustMatch: Record<\n    string,\n    string[]\n  > = {};\n\n  /**\n   * Verifies whether the specified fields do not match the specified values.\n   * @type {Record<string, string[]>}\n   */\n  @Prop() @MapProp({splitValues: true}) public mustNotMatch: Record<\n    string,\n    string[]\n  > = {};\n\n  constructor() {}\n\n  connectedCallback() {\n    this.resultTemplateCommon = new ResultTemplateCommon({\n      host: this.host,\n      setError: (err) => {\n        this.error = err;\n      },\n      validParents: [\n        'atomic-result-list',\n        'atomic-folded-result-list',\n        'atomic-search-box-instant-results',\n      ],\n      allowEmpty: true,\n    });\n  }\n\n  public componentWillLoad() {\n    this.resultTemplateCommon.matchConditions = makeMatchConditions(\n      this.mustMatch,\n      this.mustNotMatch\n    );\n  }\n\n  /**\n   * Gets the appropriate result template based on conditions applied.\n   */\n  @Method()\n  public async getTemplate(): Promise<ResultTemplate<DocumentFragment> | null> {\n    return this.resultTemplateCommon.getTemplate(this.conditions, this.error);\n  }\n\n  public render() {\n    return this.resultTemplateCommon.renderIfError(this.error);\n  }\n}\n"],"mappings":"gpBAsBaA,EAAoB,MAkC/B,WAAAC,CAAAC,G,UApBeC,KAAAC,WAAwC,GAMVD,KAAAE,UAGzC,GAMyCF,KAAAG,aAGzC,G,qCAlBmD,G,eASnD,G,kBASA,E,CAIJ,iBAAAC,GACEJ,KAAKK,qBAAuB,IAAIC,EAAqB,CACnDC,KAAMP,KAAKO,KACXC,SAAWC,IACTT,KAAKU,MAAQD,CAAG,EAElBE,aAAc,CACZ,qBACA,4BACA,qCAEFC,WAAY,M,CAIT,iBAAAC,GACLb,KAAKK,qBAAqBS,gBAAkBC,EAC1Cf,KAAKE,UACLF,KAAKG,a,CAQF,iBAAMa,GACX,OAAOhB,KAAKK,qBAAqBW,YAAYhB,KAAKC,WAAYD,KAAKU,M,CAG9D,MAAAO,GACL,OAAOjB,KAAKK,qBAAqBa,cAAclB,KAAKU,M,6BA/CTS,EAAA,CAApCC,EAAQ,CAACC,YAAa,Q,gCAScF,EAAA,CAApCC,EAAQ,CAACC,YAAa,Q","ignoreList":[]}