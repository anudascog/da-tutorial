{"version":3,"names":["atomicPagerCss","AtomicPagerStyle0","AtomicPager","this","isAppLoaded","numberOfPages","previousButtonIcon","ArrowLeftIcon","nextButtonIcon","ArrowRightIcon","radioGroupName","randomID","initialize","searchStatus","buildSearchStatus","bindings","engine","pager","buildPager","options","createAppLoadedListener","store","render","h","PagerGuard","key","hasError","searchStatusState","hasItems","hasResults","PagerNavigation","i18n","PagerPreviousButton","icon","disabled","pagerState","hasPreviousPage","onClick","previousPage","focusOnFirstResultAndScrollToTop","PagerPageButtons","currentPages","map","pageNumber","PagerPageButton","isSelected","isCurrentPage","ariaLabel","t","onChecked","selectPage","page","groupName","text","toLocaleString","language","PagerNextButton","hasNextPage","nextPage","state","resultList","focusOnFirstResultAfterNextSearch","scrollToTopEvent","emit","__decorate","InitializeBindings","BindStateToController"],"sources":["src/components/search/atomic-pager/atomic-pager.pcss?tag=atomic-pager&encapsulation=shadow","src/components/search/atomic-pager/atomic-pager.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\n","import {\n  buildPager,\n  buildSearchStatus,\n  Pager,\n  PagerState,\n  SearchStatus,\n  SearchStatusState,\n} from '@coveo/headless';\nimport {Component, Event, EventEmitter, h, Prop, State} from '@stencil/core';\nimport ArrowLeftIcon from '../../../images/arrow-left-rounded.svg';\nimport ArrowRightIcon from '../../../images/arrow-right-rounded.svg';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {randomID} from '../../../utils/utils';\nimport {createAppLoadedListener} from '../../common/interface/store';\nimport {\n  PagerNextButton,\n  PagerPageButton,\n  PagerPageButtons,\n  PagerPreviousButton,\n} from '../../common/pager/stencil-pager-buttons';\nimport {PagerGuard} from '../../common/pager/stencil-pager-guard';\nimport {PagerNavigation} from '../../common/pager/stencil-pager-navigation';\nimport {Bindings} from '../atomic-search-interface/atomic-search-interface';\n\n/**\n * The `atomic-pager` provides buttons that allow the end user to navigate through the different result pages.\n *\n * @part buttons - The list of the next/previous buttons and page-buttons.\n * @part page-buttons - The list of page buttons.\n * @part page-button - The page button.\n * @part active-page-button - The active page button.\n * @part previous-button - The previous button.\n * @part next-button - The next button.\n * @part previous-button-icon - Icon of the previous button.\n * @part next-button-icon - Icon of the next button.\n */\n@Component({\n  tag: 'atomic-pager',\n  styleUrl: 'atomic-pager.pcss',\n  shadow: true,\n})\nexport class AtomicPager implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  public pager!: Pager;\n  public searchStatus!: SearchStatus;\n\n  @BindStateToController('pager')\n  @State()\n  public pagerState!: PagerState;\n  @BindStateToController('searchStatus')\n  @State()\n  public searchStatusState!: SearchStatusState;\n  @State() error!: Error;\n  @State() private isAppLoaded = false;\n\n  @Event({\n    eventName: 'atomic/scrollToTop',\n  })\n  private scrollToTopEvent!: EventEmitter;\n\n  /**\n   * Specifies how many page buttons to display in the pager.\n   */\n  @Prop({reflect: true}) numberOfPages = 5;\n\n  /**\n   * The SVG icon to use to display the Previous button.\n   *\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\n   * - Use a stringified SVG to display it directly.\n   */\n  @Prop({reflect: true}) previousButtonIcon: string = ArrowLeftIcon;\n\n  /**\n   * The SVG icon to use to display the Next button.\n   *\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\n   * - Use a stringified SVG to display it directly.\n   */\n  @Prop({reflect: true}) nextButtonIcon: string = ArrowRightIcon;\n\n  private radioGroupName = randomID('atomic-pager-');\n\n  public initialize() {\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\n    this.pager = buildPager(this.bindings.engine, {\n      options: {numberOfPages: this.numberOfPages},\n    });\n    createAppLoadedListener(this.bindings.store, (isAppLoaded) => {\n      this.isAppLoaded = isAppLoaded;\n    });\n  }\n\n  public render() {\n    return (\n      <PagerGuard\n        hasError={this.searchStatusState.hasError}\n        hasItems={this.searchStatusState.hasResults}\n        isAppLoaded={this.isAppLoaded}\n      >\n        <PagerNavigation i18n={this.bindings.i18n}>\n          <PagerPreviousButton\n            icon={this.previousButtonIcon}\n            disabled={!this.pagerState.hasPreviousPage}\n            i18n={this.bindings.i18n}\n            onClick={() => {\n              this.pager.previousPage();\n              this.focusOnFirstResultAndScrollToTop();\n            }}\n          />\n          <PagerPageButtons i18n={this.bindings.i18n}>\n            {this.pagerState.currentPages.map((pageNumber) => {\n              return (\n                <PagerPageButton\n                  isSelected={this.pager.isCurrentPage(pageNumber)}\n                  ariaLabel={this.bindings.i18n.t('page-number', {pageNumber})}\n                  onChecked={() => {\n                    this.pager.selectPage(pageNumber);\n                    this.focusOnFirstResultAndScrollToTop();\n                  }}\n                  page={pageNumber}\n                  groupName={this.radioGroupName}\n                  text={pageNumber.toLocaleString(this.bindings.i18n.language)}\n                />\n              );\n            })}\n          </PagerPageButtons>\n          <PagerNextButton\n            icon={this.nextButtonIcon}\n            disabled={!this.pagerState.hasNextPage}\n            i18n={this.bindings.i18n}\n            onClick={() => {\n              this.pager.nextPage();\n              this.focusOnFirstResultAndScrollToTop();\n            }}\n          />\n        </PagerNavigation>\n      </PagerGuard>\n    );\n  }\n\n  private async focusOnFirstResultAndScrollToTop() {\n    await this.bindings.store.state.resultList?.focusOnFirstResultAfterNextSearch();\n    this.scrollToTopEvent.emit();\n  }\n}\n"],"mappings":"qoBAAA,MAAMA,EAAiB,k60DACvB,MAAAC,EAAeD,E,iXC4CFE,EAAW,M,8EAYLC,KAAAC,YAAc,MAURD,KAAAE,cAAgB,EAShBF,KAAAG,mBAA6BC,EAS7BJ,KAAAK,eAAyBC,EAExCN,KAAAO,eAAiBC,EAAS,iB,iGA9BH,M,mBAUQ,E,wBASaJ,E,oBASJE,C,CAIzC,UAAAG,GACLT,KAAKU,aAAeC,EAAkBX,KAAKY,SAASC,QACpDb,KAAKc,MAAQC,EAAWf,KAAKY,SAASC,OAAQ,CAC5CG,QAAS,CAACd,cAAeF,KAAKE,iBAEhCe,EAAwBjB,KAAKY,SAASM,OAAQjB,IAC5CD,KAAKC,YAAcA,CAAW,G,CAI3B,MAAAkB,GACL,OACEC,EAACC,EAAU,CAAAC,IAAA,2CACTC,SAAUvB,KAAKwB,kBAAkBD,SACjCE,SAAUzB,KAAKwB,kBAAkBE,WACjCzB,YAAaD,KAAKC,aAElBmB,EAACO,EAAe,CAAAL,IAAA,2CAACM,KAAM5B,KAAKY,SAASgB,MACnCR,EAACS,EAAmB,CAAAP,IAAA,2CAClBQ,KAAM9B,KAAKG,mBACX4B,UAAW/B,KAAKgC,WAAWC,gBAC3BL,KAAM5B,KAAKY,SAASgB,KACpBM,QAAS,KACPlC,KAAKc,MAAMqB,eACXnC,KAAKoC,kCAAkC,IAG3ChB,EAACiB,EAAgB,CAAAf,IAAA,2CAACM,KAAM5B,KAAKY,SAASgB,MACnC5B,KAAKgC,WAAWM,aAAaC,KAAKC,GAE/BpB,EAACqB,EAAe,CACdC,WAAY1C,KAAKc,MAAM6B,cAAcH,GACrCI,UAAW5C,KAAKY,SAASgB,KAAKiB,EAAE,cAAe,CAACL,eAChDM,UAAW,KACT9C,KAAKc,MAAMiC,WAAWP,GACtBxC,KAAKoC,kCAAkC,EAEzCY,KAAMR,EACNS,UAAWjD,KAAKO,eAChB2C,KAAMV,EAAWW,eAAenD,KAAKY,SAASgB,KAAKwB,eAK3DhC,EAACiC,EAAe,CAAA/B,IAAA,2CACdQ,KAAM9B,KAAKK,eACX0B,UAAW/B,KAAKgC,WAAWsB,YAC3B1B,KAAM5B,KAAKY,SAASgB,KACpBM,QAAS,KACPlC,KAAKc,MAAMyC,WACXvD,KAAKoC,kCAAkC,K,CAQ3C,sCAAMA,SACNpC,KAAKY,SAASM,MAAMsC,MAAMC,YAAYC,qCAC5C1D,KAAK2D,iBAAiBC,M,GAvGKC,EAAA,CAA5BC,K,+BAMMD,EAAA,CAFNE,EAAsB,U,iCAKhBF,EAAA,CAFNE,EAAsB,iB","ignoreList":[]}