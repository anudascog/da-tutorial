{"version":3,"names":["Hidden","h","Host","class","initializeBindings","element","Promise","resolve","reject","event","buildCustomEvent","initializeEventName","bindings","parent","closest","initializableElements","join","MissingInterfaceParentError","nodeName","toLowerCase","enqueueOrDispatchInitializationEvent","renderedAttribute","loadedAttribute","InitializeBindings","forceUpdate","component","bindingsProperty","componentWillLoad","render","componentDidRender","componentDidLoad","disconnectedCallback","unsubscribeLanguage","console","error","getElement","this","setAttribute","updateLanguage","forceUpdateComponent","i18n","on","off","initialize","e","call","getAttribute","BindStateToController","controllerProperty","options","stateProperty","onUpdateCallbackMethod","unsubscribeController","subscribe","state","isConnected"],"sources":["src/components/common/stencil-hidden.tsx","src/utils/initialization-utils.tsx"],"sourcesContent":["import {FunctionalComponent, Host, h} from '@stencil/core';\n\n/**\n * @deprecated Should only be used for Stencil components; for Lit components, use the displayIf directive instead\n */\nexport const Hidden: FunctionalComponent = () => (\n  <Host class=\"atomic-hidden\"></Host>\n);\n","import type {CoreEngine} from '@coveo/headless';\nimport {\n  ComponentInterface,\n  getElement,\n  h,\n  forceUpdate as forceUpdateComponent,\n} from '@stencil/core';\nimport {TOptions} from 'i18next';\nimport {AnyBindings} from '../components/common/interface/bindings';\nimport {Hidden} from '../components/common/stencil-hidden';\nimport {Bindings} from '../components/search/atomic-search-interface/atomic-search-interface';\nimport {closest} from './dom-utils';\nimport {buildCustomEvent} from './event-utils';\nimport {enqueueOrDispatchInitializationEvent} from './init-queue';\nimport {\n  MissingInterfaceParentError,\n  InitializeEventHandler,\n  initializableElements,\n  initializeEventName,\n} from './initialization-lit-stencil-common-utils';\n\nexport type InitializeEvent = CustomEvent<InitializeEventHandler>;\n\n/**\n * Retrieves `Bindings` or `CommerceBindings` on a configured parent interface.\n * @param event - The element on which to dispatch the event, which must be the child of a configured Atomic container element.\n * @returns A promise that resolves upon initialization of the parent container element, and rejects otherwise.\n * @deprecated should only be used for Stencil components. For Lit components, use `initializeBindings` from @/src/decorators/initialize-bindings.\n */\nexport function initializeBindings<\n  SpecificBindings extends AnyBindings = Bindings,\n>(element: Element) {\n  return new Promise<SpecificBindings>((resolve, reject) => {\n    const event = buildCustomEvent<InitializeEventHandler>(\n      initializeEventName,\n      (bindings) => resolve(bindings as SpecificBindings)\n    );\n\n    const parent = closest(element, initializableElements.join(', '));\n\n    if (!parent) {\n      reject(new MissingInterfaceParentError(element.nodeName.toLowerCase()));\n      return;\n    }\n\n    enqueueOrDispatchInitializationEvent(parent, event, element);\n  });\n}\n\nexport {\n  MissingInterfaceParentError,\n  InitializeEventHandler,\n  initializeEventName,\n} from './initialization-lit-stencil-common-utils';\n\n/**\n * Necessary interface an Atomic Component must have to initialize itself correctly.\n * @deprecated To be used for Stencil components. For Lit components. use `InitializableComponent` from './decorators/types/'\n */\nexport interface InitializableComponent<\n  SpecificBindings extends AnyBindings = Bindings,\n> extends ComponentInterface {\n  /**\n   * Bindings passed from the `AtomicSearchInterface` to its children components.\n   */\n  bindings: SpecificBindings;\n  /**\n   * Method called right after the `bindings` property is defined. This is the method where Headless Framework controllers should be initialized.\n   */\n  initialize?: () => void;\n  error: Error;\n}\n\ntype InitializeBindingsProps = {\n  forceUpdate?: boolean;\n};\n\nconst renderedAttribute = 'data-atomic-rendered';\nconst loadedAttribute = 'data-atomic-loaded';\n\n/**\n * A [StencilJS property decorator](https://stenciljs.com/) to be used on a property named `bindings`.\n * This will automatically fetch the `Bindings` from the parent `atomic-search-interface` or `atomic-external` components.\n *\n * Once a component is bound, the `initialize` method is called.\n * In the event of an initialization error, the `error` property will be set and an `atomic-component-error` will be rendered.\n *\n * In order for a component using this decorator to render properly, it should have an internal state bound to one of the properties from `bindings`.\n * This is possible by using the `BindStateToController` decorator.\n *\n * @example\n * @InitializeBindings() public bindings!: Bindings;\n *\n * For more information and examples, view the \"Utilities\" section of the readme.\n * @deprecated To be used for Stencil components. For Lit components, use `BindingController` Reactive Controller from @/mixins/bindings-mixin.ts.\n */\nexport function InitializeBindings<SpecificBindings extends AnyBindings>({\n  forceUpdate,\n}: InitializeBindingsProps = {}) {\n  return (\n    component: InitializableComponent<SpecificBindings>,\n    bindingsProperty: string\n  ) => {\n    const {\n      componentWillLoad,\n      render,\n      componentDidRender,\n      componentDidLoad,\n      disconnectedCallback,\n    } = component;\n    let unsubscribeLanguage = () => {};\n\n    if (bindingsProperty !== 'bindings') {\n      return console.error(\n        `The InitializeBindings decorator should be used on a property called \"bindings\", and not \"${bindingsProperty}\"`,\n        component\n      );\n    }\n\n    component.componentWillLoad = function () {\n      const element = getElement(this);\n      element.setAttribute(renderedAttribute, 'false');\n      element.setAttribute(loadedAttribute, 'false');\n      const event = buildCustomEvent(\n        initializeEventName,\n        (bindings: SpecificBindings) => {\n          this.bindings = bindings;\n\n          const updateLanguage = () => forceUpdateComponent(this);\n          this.bindings.i18n.on('languageChanged', updateLanguage);\n          unsubscribeLanguage = () =>\n            this.bindings.i18n.off('languageChanged', updateLanguage);\n\n          try {\n            // When no controller is initialized, updating a property with a State() decorator, there will be no re-render.\n            // In this case, we have to manually trigger it.\n            if (this.initialize) {\n              this.initialize();\n              if (forceUpdate) {\n                forceUpdateComponent(this);\n              }\n            } else {\n              forceUpdateComponent(this);\n            }\n          } catch (e) {\n            this.error = e as Error;\n          }\n        }\n      );\n      const parent = closest(element, initializableElements.join(', '));\n      if (!parent) {\n        this.error = new MissingInterfaceParentError(\n          element.nodeName.toLowerCase()\n        );\n        return;\n      }\n      enqueueOrDispatchInitializationEvent(\n        parent,\n        event as InitializeEvent,\n        element\n      );\n      return componentWillLoad && componentWillLoad.call(this);\n    };\n\n    component.render = function () {\n      if (this.error) {\n        return (\n          <atomic-component-error\n            element={getElement(this)}\n            error={this.error}\n          ></atomic-component-error>\n        );\n      }\n\n      if (!this.bindings) {\n        return <Hidden></Hidden>;\n      }\n\n      getElement(this).setAttribute(renderedAttribute, 'true');\n      return render && render.call(this);\n    };\n\n    component.disconnectedCallback = function () {\n      const element = getElement(this);\n      element.setAttribute(renderedAttribute, 'false');\n      element.setAttribute(loadedAttribute, 'false');\n      unsubscribeLanguage();\n      disconnectedCallback && disconnectedCallback.call(this);\n    };\n\n    component.componentDidRender = function () {\n      const element = getElement(this);\n      if (element.getAttribute(renderedAttribute) === 'false') {\n        return;\n      }\n\n      componentDidRender && componentDidRender.call(this);\n      if (element.getAttribute(loadedAttribute) === 'false') {\n        element.setAttribute(loadedAttribute, 'true');\n        componentDidLoad && componentDidLoad.call(this);\n      }\n    };\n\n    component.componentDidLoad = function () {};\n  };\n}\n\n/**\n * A [StencilJS property decorator](https://stenciljs.com/) is used together with the [State decorator](https://stenciljs.com/docs/state#state-decorator).\n * This allows the Stencil component state property to automatically get updates from a [Coveo Headless controller](https://docs.coveo.com/en/headless/latest/usage/#use-headless-controllers).\n *\n * @example\n * @BindStateToController('pager') @State() private pagerState!: PagerState;\n *\n * For more information and examples, view the \"Utilities\" section of the readme.\n *\n * @param controllerProperty The controller property to subscribe to. The controller has to be created inside of the `initialize` method.\n * @param options The configurable `BindStateToController` options.\n *\n * @deprecated To be used for Stencil components. For Lit components. use `bindStateToController` from '../decorators/bind-state.ts'\n */\nexport function BindStateToController(\n  controllerProperty: string,\n  options?: {\n    /**\n     * Component's method to be called when state is updated.\n     */\n    onUpdateCallbackMethod?: string;\n  }\n) {\n  return (\n    component: InitializableComponent<AnyBindings>,\n    stateProperty: string\n  ) => {\n    const {disconnectedCallback, initialize} = component;\n\n    component.initialize = function () {\n      initialize && initialize.call(this);\n\n      if (!initialize) {\n        return console.error(\n          `ControllerState: The \"initialize\" method has to be defined and instantiate a controller for the property ${controllerProperty}`,\n          component\n        );\n      }\n\n      if (!this[controllerProperty]) {\n        return;\n      }\n\n      if (\n        options?.onUpdateCallbackMethod &&\n        !this[options.onUpdateCallbackMethod]\n      ) {\n        return console.error(\n          `ControllerState: The onUpdateCallbackMethod property \"${options.onUpdateCallbackMethod}\" is not defined`,\n          component\n        );\n      }\n\n      this.unsubscribeController = this[controllerProperty].subscribe(() => {\n        this[stateProperty] = this[controllerProperty].state;\n        options?.onUpdateCallbackMethod &&\n          this[options.onUpdateCallbackMethod]();\n      });\n    };\n\n    component.disconnectedCallback = function () {\n      !getElement(this).isConnected && this.unsubscribeController?.();\n      disconnectedCallback && disconnectedCallback.call(this);\n    };\n  };\n}\n\ninterface DeferredExecution {\n  args: unknown[];\n}\n\nexport function DeferUntilRender() {\n  return (component: ComponentInterface, methodName: string) => {\n    const {componentDidRender, connectedCallback} = component;\n    const originalMethod = component[methodName] as Function;\n    let deferredExecutions: DeferredExecution[] = [];\n\n    component.connectedCallback = function () {\n      this[methodName] = function (...args: unknown[]) {\n        deferredExecutions.push({args});\n      };\n      connectedCallback && connectedCallback.call(this);\n    };\n\n    component.componentDidRender = function () {\n      deferredExecutions.forEach(({args}) =>\n        originalMethod.call(this, ...args)\n      );\n      deferredExecutions = [];\n      componentDidRender && componentDidRender.call(this);\n    };\n  };\n}\n\nexport type I18nState = Record<string, (variables?: TOptions) => string>;\nexport type AtomicInterface = HTMLElement & {\n  engine?: CoreEngine;\n  bindings?: Bindings;\n};\n"],"mappings":"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","ignoreList":[]}