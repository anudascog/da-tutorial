{"version":3,"names":["AtomicExternal","this","selector","handleInitialization","event","preventDefault","stopPropagation","__classPrivateFieldGet","_AtomicExternal_instances","_AtomicExternal_interface_get","dispatchEvent","buildCustomEvent","initializeEventName","detail","handleScrollToTop","handleParentReady","target","boundInterface","markParentAsReady","host","connectedCallback","isParentReady","document","querySelector","undefined","Error"],"sources":["src/components/search/atomic-external/atomic-external.tsx"],"sourcesContent":["import {markParentAsReady, isParentReady} from '@/src/utils/init-queue';\nimport {Component, Prop, Listen, Element} from '@stencil/core';\nimport {buildCustomEvent} from '../../../utils/event-utils';\nimport {\n  AtomicInterface,\n  InitializeEvent,\n  initializeEventName,\n} from '../../../utils/initialization-utils';\n\n/**\n * The `atomic-external` component allows components defined outside of the `atomic-search-interface` to initialize.\n */\n@Component({\n  tag: 'atomic-external',\n  shadow: false,\n})\nexport class AtomicExternal {\n  @Element() public host!: HTMLAtomicExternalElement;\n  /**\n   * The CSS selector that identifies the `atomic-search-interface` component with which to initialize the external components.\n   */\n  @Prop({reflect: true}) selector = 'atomic-search-interface';\n  @Listen('atomic/initializeComponent')\n  public handleInitialization(event: InitializeEvent) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.#interface.dispatchEvent(\n      buildCustomEvent(initializeEventName, event.detail)\n    );\n  }\n\n  @Listen('atomic/scrollToTop')\n  public handleScrollToTop(event: CustomEvent) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.#interface.dispatchEvent(\n      buildCustomEvent('atomic/scrollToTop', event.detail)\n    );\n  }\n\n  @Listen('atomic/parentReady', {target: 'window'})\n  public handleParentReady(event: CustomEvent) {\n    if (event.target === this.boundInterface) {\n      markParentAsReady(this.host);\n    }\n  }\n\n  /**\n   * Represents the bound interface for the AtomicExternal component.\n   */\n  @Prop({mutable: true}) boundInterface?: AtomicInterface;\n\n  connectedCallback() {\n    if (isParentReady(this.#interface)) {\n      markParentAsReady(this.host);\n    }\n  }\n\n  get #interface() {\n    if (!this.boundInterface) {\n      this.boundInterface = document.querySelector(this.selector) ?? undefined;\n      if (!this.boundInterface) {\n        throw new Error(\n          `Cannot find interface element with selector \"${this.selector}\"`\n        );\n      }\n    }\n\n    return this.boundInterface!;\n  }\n}\n"],"mappings":"ygBAgBaA,EAAc,M,qCAKFC,KAAAC,SAAW,0B,cAAA,0B,8BAE3B,oBAAAC,CAAqBC,GAC1BA,EAAMC,iBACND,EAAME,kBACNC,EAAAN,KAAIO,EAAA,IAAAC,GAAYC,cACdC,EAAiBC,EAAqBR,EAAMS,Q,CAKzC,iBAAAC,CAAkBV,GACvBA,EAAMC,iBACND,EAAME,kBACNC,EAAAN,KAAIO,EAAA,IAAAC,GAAYC,cACdC,EAAiB,qBAAsBP,EAAMS,Q,CAK1C,iBAAAE,CAAkBX,GACvB,GAAIA,EAAMY,SAAWf,KAAKgB,eAAgB,CACxCC,EAAkBjB,KAAKkB,K,EAS3B,iBAAAC,GACE,GAAIC,EAAcd,EAAAN,KAAIO,EAAA,IAAAC,IAAc,CAClCS,EAAkBjB,KAAKkB,K,2DAKzB,IAAKlB,KAAKgB,eAAgB,CACxBhB,KAAKgB,eAAiBK,SAASC,cAActB,KAAKC,WAAasB,UAC/D,IAAKvB,KAAKgB,eAAgB,CACxB,MAAM,IAAIQ,MACR,gDAAgDxB,KAAKC,Y,EAK3D,OAAOD,KAAKgB,cACd,S","ignoreList":[]}