{"version":3,"names":["getLineClampClass","truncateAfter","lineClampMap","none","renderShowHideButton","isExpanded","isTruncated","isCollapsible","onToggleExpand","showMoreLabel","showLessLabel","buttonClass","label","h","Button","style","class","title","onClick","icon","MinusIcon","PlusIcon","ExpandableText","children","part"],"sources":["src/components/common/expandable-text/expandable-text.tsx"],"sourcesContent":["import {FunctionalComponent, h} from '@stencil/core';\nimport MinusIcon from '../../../images/minus.svg';\nimport PlusIcon from '../../../images/plus.svg';\nimport {Button} from '../stencil-button';\n\nexport type TruncateAfter = 'none' | '1' | '2' | '3' | '4';\n\ninterface ExpandableTextProps {\n  isExpanded: boolean;\n  isTruncated: boolean;\n  isCollapsible?: boolean;\n  truncateAfter: TruncateAfter;\n  onToggleExpand: (e: MouseEvent | undefined) => void;\n  showMoreLabel: string;\n  showLessLabel: string;\n}\n\nconst getLineClampClass = (truncateAfter: TruncateAfter) => {\n  const lineClampMap: Record<TruncateAfter, string> = {\n    none: 'line-clamp-none',\n    1: 'line-clamp-1',\n    2: 'line-clamp-2',\n    3: 'line-clamp-3',\n    4: 'line-clamp-4',\n  };\n  return lineClampMap[truncateAfter] || 'line-clamp-2';\n};\n\nconst renderShowHideButton = (\n  isExpanded: boolean,\n  isTruncated: boolean,\n  isCollapsible: boolean,\n  onToggleExpand: (e?: MouseEvent) => void,\n  showMoreLabel: string,\n  showLessLabel: string\n) => {\n  let buttonClass = 'expandable-text-button p-1 text-xs leading-[calc(1/.75)]';\n  if (!isTruncated && !isExpanded) {\n    buttonClass += ' invisible';\n  } else if (!isCollapsible && !isTruncated && isExpanded) {\n    buttonClass += ' hidden';\n  }\n\n  const label = isExpanded ? showLessLabel : showMoreLabel;\n\n  return (\n    <Button\n      style=\"text-primary\"\n      class={buttonClass}\n      title={label}\n      onClick={onToggleExpand}\n    >\n      <atomic-icon\n        icon={isExpanded ? MinusIcon : PlusIcon}\n        class=\"mx-1 w-2 align-baseline\"\n      ></atomic-icon>\n      {label}\n    </Button>\n  );\n};\n\nexport const ExpandableText: FunctionalComponent<ExpandableTextProps> = (\n  {\n    isExpanded,\n    isTruncated,\n    truncateAfter,\n    onToggleExpand,\n    showMoreLabel,\n    showLessLabel,\n    isCollapsible = false,\n  },\n  children\n) => {\n  return (\n    <div class=\"flex flex-col items-start\">\n      <div\n        part=\"expandable-text\"\n        class={`expandable-text ${!isExpanded ? getLineClampClass(truncateAfter) : ''} min-lines-${truncateAfter}`}\n      >\n        {children}\n      </div>\n      {renderShowHideButton(\n        isExpanded,\n        isTruncated,\n        isCollapsible,\n        onToggleExpand,\n        showMoreLabel,\n        showLessLabel\n      )}\n    </div>\n  );\n};\n"],"mappings":"mHAiBA,MAAMA,EAAqBC,IACzB,MAAMC,EAA8C,CAClDC,KAAM,kBACN,EAAG,eACH,EAAG,eACH,EAAG,eACH,EAAG,gBAEL,OAAOD,EAAaD,IAAkB,cAAc,EAGtD,MAAMG,EAAuB,CAC3BC,EACAC,EACAC,EACAC,EACAC,EACAC,KAEA,IAAIC,EAAc,2DAClB,IAAKL,IAAgBD,EAAY,CAC/BM,GAAe,Y,MACV,IAAKJ,IAAkBD,GAAeD,EAAY,CACvDM,GAAe,S,CAGjB,MAAMC,EAAQP,EAAaK,EAAgBD,EAE3C,OACEI,EAACC,EAAM,CACLC,MAAM,eACNC,MAAOL,EACPM,MAAOL,EACPM,QAASV,GAETK,EAAA,eACEM,KAAMd,EAAae,EAAYC,EAC/BL,MAAM,4BAEPJ,EACM,E,MAIAU,EAA2D,EAEpEjB,aACAC,cACAL,gBACAO,iBACAC,gBACAC,gBACAH,gBAAgB,OAElBgB,IAGEV,EAAA,OAAKG,MAAM,6BACTH,EAAA,OACEW,KAAK,kBACLR,MAAO,oBAAoBX,EAAaL,EAAkBC,GAAiB,gBAAgBA,KAE1FsB,GAEFnB,EACCC,EACAC,EACAC,EACAC,EACAC,EACAC,W","ignoreList":[]}