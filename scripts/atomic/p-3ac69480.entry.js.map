{"version":3,"names":["atomicInsightSmartSnippetFeedbackModalCss","AtomicInsightSmartSnippetFeedbackModalStyle0","AtomicInsightSmartSnippetFeedbackModal","this","isOpen","formId","randomID","watchToggleOpen","smartSnippet","openFeedbackModal","currentAnswer","undefined","initialize","buildInsightSmartSnippet","bindings","engine","render","updateBreakpoints","host","h","key","fullscreen","source","container","close","exportparts","ATOMIC_MODAL_EXPORT_PARTS","SmartSnippetFeedbackModalHeader","i18n","SmartSnippetFeedbackModalBody","onSubmit","e","sendFeedback","SmartSnippetFeebackModalOptions","smartSnippetFeedbackOptions","map","id","localeKey","correspondingAnswer","SmartSnippetFeedbackModalOption","onChange","SmartSnippetFeedbackModalDetails","setDetailsInputRef","ref","detailsInputRef","SmartSnippetFeedbackModalFooter","onClick","closeFeedbackModal","preventDefault","sendDetailedFeedback","value","feedbackSent","emit","__decorate","InitializeBindings"],"sources":["src/components/insight/smart-snippets/atomic-insight-smart-snippet-feedback-modal/atomic-insight-smart-snippet-feedback-modal.pcss?tag=atomic-insight-smart-snippet-feedback-modal&encapsulation=shadow","src/components/insight/smart-snippets/atomic-insight-smart-snippet-feedback-modal/atomic-insight-smart-snippet-feedback-modal.tsx"],"sourcesContent":["@import '../../../common/smart-snippets/atomic-smart-snippet-feedback-modal/atomic-smart-snippet-feedback-modal.pcss';\n","import {ATOMIC_MODAL_EXPORT_PARTS} from '@/src/components/common/atomic-modal/export-parts';\nimport {\n  SmartSnippetFeebackModalOptions,\n  SmartSnippetFeedbackModalBody,\n  SmartSnippetFeedbackModalDetails,\n  SmartSnippetFeedbackModalFooter,\n  SmartSnippetFeedbackModalHeader,\n  SmartSnippetFeedbackModalOption,\n  smartSnippetFeedbackOptions,\n} from '@/src/components/common/smart-snippets/atomic-smart-snippet-feedback-modal/smart-snippet-feedback-modal-common';\nimport {updateBreakpoints} from '@/src/utils/replace-breakpoint';\nimport {randomID} from '@/src/utils/utils';\nimport {\n  buildSmartSnippet as buildInsightSmartSnippet,\n  SmartSnippet as InsightSmartSnippet,\n  SmartSnippetFeedback as InsightSmartSnippetFeedback,\n  SmartSnippetFeedback,\n} from '@coveo/headless/insight';\nimport {\n  Component,\n  State,\n  Prop,\n  Watch,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n} from '@stencil/core';\nimport {\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {InsightBindings} from '../../atomic-insight-interface/atomic-insight-interface';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-smart-snippet-feedback-modal',\n  styleUrl: 'atomic-insight-smart-snippet-feedback-modal.pcss',\n  shadow: true,\n})\nexport class AtomicInsightSmartSnippetFeedbackModal\n  implements InitializableComponent<InsightBindings>\n{\n  @InitializeBindings() public bindings!: InsightBindings;\n  @Element() public host!: HTMLElement;\n  public smartSnippet!: InsightSmartSnippet;\n\n  @State() public error!: Error;\n\n  @Prop({mutable: true}) source?: HTMLElement;\n  @Prop({reflect: true, mutable: true}) isOpen = false;\n\n  @State() currentAnswer?: InsightSmartSnippetFeedback | 'other' | undefined;\n  private detailsInputRef?: HTMLTextAreaElement;\n  private readonly formId = randomID(\n    'atomic-smart-snippet-feedback-modal-form-'\n  );\n\n  @Event() feedbackSent!: EventEmitter;\n\n  @Watch('isOpen')\n  watchToggleOpen(isOpen: boolean) {\n    if (isOpen) {\n      this.smartSnippet.openFeedbackModal();\n      this.currentAnswer = undefined;\n    }\n  }\n\n  initialize() {\n    this.smartSnippet = buildInsightSmartSnippet(this.bindings.engine);\n  }\n\n  public render() {\n    updateBreakpoints(this.host);\n\n    return (\n      <atomic-modal\n        fullscreen={false}\n        source={this.source}\n        container={this.host}\n        isOpen={this.isOpen}\n        close={() => this.close()}\n        exportparts={ATOMIC_MODAL_EXPORT_PARTS}\n      >\n        <SmartSnippetFeedbackModalHeader i18n={this.bindings.i18n} />\n        <SmartSnippetFeedbackModalBody\n          formId={this.formId}\n          onSubmit={(e: Event) => this.sendFeedback(e)}\n        >\n          <SmartSnippetFeebackModalOptions i18n={this.bindings.i18n}>\n            {smartSnippetFeedbackOptions.map(\n              ({id, localeKey, correspondingAnswer}) => (\n                <SmartSnippetFeedbackModalOption\n                  correspondingAnswer={correspondingAnswer}\n                  currentAnswer={this.currentAnswer}\n                  i18n={this.bindings.i18n}\n                  id={id}\n                  localeKey={localeKey}\n                  onChange={() => {\n                    this.currentAnswer = correspondingAnswer;\n                  }}\n                />\n              )\n            )}\n          </SmartSnippetFeebackModalOptions>\n          <SmartSnippetFeedbackModalDetails\n            currentAnswer={this.currentAnswer}\n            i18n={this.bindings.i18n}\n            setDetailsInputRef={(ref) => (this.detailsInputRef = ref)}\n          />\n        </SmartSnippetFeedbackModalBody>\n        <SmartSnippetFeedbackModalFooter\n          formId={this.formId}\n          i18n={this.bindings.i18n}\n          onClick={() => this.close()}\n        />\n      </atomic-modal>\n    );\n  }\n\n  private close() {\n    this.isOpen = false;\n    this.smartSnippet.closeFeedbackModal();\n  }\n\n  private sendFeedback(e: Event) {\n    e.preventDefault();\n\n    if (this.currentAnswer === 'other') {\n      this.smartSnippet.sendDetailedFeedback(this.detailsInputRef!.value);\n    } else {\n      this.smartSnippet.sendFeedback(\n        this.currentAnswer as SmartSnippetFeedback\n      );\n    }\n    this.feedbackSent.emit();\n    this.isOpen = false;\n  }\n}\n"],"mappings":"4hBAAA,MAAMA,EAA4C,mn2DAClD,MAAAC,EAAeD,E,iXCyCFE,EAAsC,M,oEAUXC,KAAAC,OAAS,MAI9BD,KAAAE,OAASC,EACxB,6C,uDAL6C,M,6BAW/C,eAAAC,CAAgBH,GACd,GAAIA,EAAQ,CACVD,KAAKK,aAAaC,oBAClBN,KAAKO,cAAgBC,S,EAIzB,UAAAC,GACET,KAAKK,aAAeK,EAAyBV,KAAKW,SAASC,O,CAGtD,MAAAC,GACLC,EAAkBd,KAAKe,MAEvB,OACEC,EAAA,gBAAAC,IAAA,2CACEC,WAAY,MACZC,OAAQnB,KAAKmB,OACbC,UAAWpB,KAAKe,KAChBd,OAAQD,KAAKC,OACboB,MAAO,IAAMrB,KAAKqB,QAClBC,YAAaC,GAEbP,EAACQ,EAA+B,CAAAP,IAAA,2CAACQ,KAAMzB,KAAKW,SAASc,OACrDT,EAACU,EAA6B,CAAAT,IAAA,2CAC5Bf,OAAQF,KAAKE,OACbyB,SAAWC,GAAa5B,KAAK6B,aAAaD,IAE1CZ,EAACc,EAA+B,CAAAb,IAAA,2CAACQ,KAAMzB,KAAKW,SAASc,MAClDM,EAA4BC,KAC3B,EAAEC,KAAIC,YAAWC,yBACfnB,EAACoB,EAA+B,CAC9BD,oBAAqBA,EACrB5B,cAAeP,KAAKO,cACpBkB,KAAMzB,KAAKW,SAASc,KACpBQ,GAAIA,EACJC,UAAWA,EACXG,SAAU,KACRrC,KAAKO,cAAgB4B,CAAmB,OAMlDnB,EAACsB,EAAgC,CAAArB,IAAA,2CAC/BV,cAAeP,KAAKO,cACpBkB,KAAMzB,KAAKW,SAASc,KACpBc,mBAAqBC,GAASxC,KAAKyC,gBAAkBD,KAGzDxB,EAAC0B,EAA+B,CAAAzB,IAAA,2CAC9Bf,OAAQF,KAAKE,OACbuB,KAAMzB,KAAKW,SAASc,KACpBkB,QAAS,IAAM3C,KAAKqB,U,CAMpB,KAAAA,GACNrB,KAAKC,OAAS,MACdD,KAAKK,aAAauC,oB,CAGZ,YAAAf,CAAaD,GACnBA,EAAEiB,iBAEF,GAAI7C,KAAKO,gBAAkB,QAAS,CAClCP,KAAKK,aAAayC,qBAAqB9C,KAAKyC,gBAAiBM,M,KACxD,CACL/C,KAAKK,aAAawB,aAChB7B,KAAKO,c,CAGTP,KAAKgD,aAAaC,OAClBjD,KAAKC,OAAS,K,sFA7FaiD,EAAA,CAA5BC,K","ignoreList":[]}