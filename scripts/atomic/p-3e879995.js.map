{"version":3,"names":["augmentWithExternalMiddleware","event","payload","config","analytics","analyticsClientMiddleware","augmentAnalyticsWithAtomicVersion","customData","coveoAtomicVersion","getAtomicEnvironment","version","augmentAnalyticsConfigWithDocument","documentLocation","document","location","href","referrer","originLevel3","versionMatcher","augmentAnalyticsConfigWithAtomicVersion","source","exec","getNextAnalyticsConfig","searchEngineConfig","enabled","configuration","analyticsConfiguration","Object","assign"],"sources":["src/components/common/interface/analytics-config.ts"],"sourcesContent":["import {\n  SearchEngineConfiguration,\n  AnalyticsConfiguration,\n  EngineConfiguration,\n} from '@coveo/headless';\nimport {AnalyticsClientSendEventHook} from '@coveo/headless';\nimport {InsightEngineConfiguration} from '@coveo/headless/insight';\nimport {RecommendationEngineConfiguration} from '@coveo/headless/recommendation';\nimport {getAtomicEnvironment} from '../../../global/environment';\n\nexport type AnalyticsPayload = Parameters<AnalyticsClientSendEventHook>[1];\n\nexport function augmentWithExternalMiddleware(\n  event: string,\n  payload: AnalyticsPayload,\n  config:\n    | InsightEngineConfiguration\n    | SearchEngineConfiguration\n    | RecommendationEngineConfiguration\n) {\n  if (config.analytics?.analyticsClientMiddleware) {\n    return config.analytics.analyticsClientMiddleware(event, payload);\n  }\n  return payload;\n}\n\nexport function augmentAnalyticsWithAtomicVersion(payload: AnalyticsPayload) {\n  if (payload.customData) {\n    payload.customData.coveoAtomicVersion = getAtomicEnvironment().version;\n  }\n  return payload;\n}\n\nexport function augmentAnalyticsConfigWithDocument(): AnalyticsConfiguration {\n  return {\n    documentLocation: document.location.href,\n    ...(document.referrer && {originLevel3: document.referrer}),\n  };\n}\n\nconst versionMatcher = /^(\\d+\\.\\d+\\.\\d+)/;\n\nexport function augmentAnalyticsConfigWithAtomicVersion(): Required<\n  Pick<AnalyticsConfiguration, 'source'>\n> {\n  return {\n    source: {\n      '@coveo/atomic':\n        versionMatcher.exec(getAtomicEnvironment().version)?.[0] || '0.0.0',\n    },\n  };\n}\n\nexport function getNextAnalyticsConfig(\n  searchEngineConfig: EngineConfiguration,\n  enabled: boolean\n): AnalyticsConfiguration {\n  const configuration: AnalyticsConfiguration = {\n    enabled,\n    documentLocation: document.location.href,\n    ...(document.referrer && {originLevel3: document.referrer}),\n  };\n\n  const analyticsConfiguration = searchEngineConfig.analytics ?? {};\n  Object.assign(\n    analyticsConfiguration,\n    augmentAnalyticsConfigWithAtomicVersion()\n  );\n  Object.assign(configuration, analyticsConfiguration);\n\n  return configuration;\n}\n"],"mappings":"6CAYgBA,EACdC,EACAC,EACAC,GAKA,GAAIA,EAAOC,WAAWC,0BAA2B,CAC/C,OAAOF,EAAOC,UAAUC,0BAA0BJ,EAAOC,E,CAE3D,OAAOA,CACT,C,SAEgBI,EAAkCJ,GAChD,GAAIA,EAAQK,WAAY,CACtBL,EAAQK,WAAWC,mBAAqBC,IAAuBC,O,CAEjE,OAAOR,CACT,C,SAEgBS,IACd,MAAO,CACLC,iBAAkBC,SAASC,SAASC,QAChCF,SAASG,UAAY,CAACC,aAAcJ,SAASG,UAErD,CAEA,MAAME,EAAiB,mB,SAEPC,IAGd,MAAO,CACLC,OAAQ,CACN,gBACEF,EAAeG,KAAKZ,IAAuBC,WAAW,IAAM,SAGpE,C,SAEgBY,EACdC,EACAC,GAEA,MAAMC,EAAwC,CAC5CD,UACAZ,iBAAkBC,SAASC,SAASC,QAChCF,SAASG,UAAY,CAACC,aAAcJ,SAASG,WAGnD,MAAMU,EAAyBH,EAAmBnB,WAAa,GAC/DuB,OAAOC,OACLF,EACAP,KAEFQ,OAAOC,OAAOH,EAAeC,GAE7B,OAAOD,CACT,Q","ignoreList":[]}