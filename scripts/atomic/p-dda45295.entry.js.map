{"version":3,"names":["atomicCommerceProductsPerPageCss","AtomicCommerceProductsPerPageStyle0","AtomicCommerceProductsPerPage","this","isAppLoaded","radioGroupName","randomID","choicesDisplayed","initialize","choices","convertChoicesToNumbers","initialChoice","validateInitialChoice","error","ChoiceIsNaNError","InitialChoiceNotInChoicesError","bindings","engine","logger","message","controller","interfaceElement","type","buildSearch","buildProductListing","summary","pagination","options","pageSize","createAppLoadedListener","store","label","i18n","t","render","h","PagerGuard","key","hasError","summaryState","hasItems","hasProducts","class","Label","FieldsetGroup","Choices","groupName","paginationState","lang","language","scrollToTopEvent","emit","setItemSize","setPageSize","focusOnFirstResultAfterNextSearch","state","resultList","focusOnNextNewResult","__decorate","InitializeBindings","BindStateToController"],"sources":["src/components/commerce/atomic-commerce-products-per-page/atomic-commerce-products-per-page.pcss?tag=atomic-commerce-products-per-page&encapsulation=shadow","src/components/commerce/atomic-commerce-products-per-page/atomic-commerce-products-per-page.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\n","import {\n  Pagination,\n  PaginationState,\n  buildSearch,\n  buildProductListing,\n  SearchSummaryState,\n  ProductListingSummaryState,\n  Summary,\n} from '@coveo/headless/commerce';\nimport {Component, Event, EventEmitter, h, Prop, State} from '@stencil/core';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {randomID} from '../../../utils/utils';\nimport {createAppLoadedListener} from '../../common/interface/store';\nimport {Choices} from '../../common/items-per-page/choices';\nimport {\n  ChoiceIsNaNError,\n  InitialChoiceNotInChoicesError,\n} from '../../common/items-per-page/error';\nimport {Label} from '../../common/items-per-page/label';\nimport {\n  convertChoicesToNumbers,\n  validateInitialChoice,\n} from '../../common/items-per-page/validate';\nimport {PagerGuard} from '../../common/pager/stencil-pager-guard';\nimport {FieldsetGroup} from '../../common/stencil-fieldset-group';\nimport type {CommerceBindings as Bindings} from '../atomic-commerce-interface/atomic-commerce-interface';\n\n/**\n * The `atomic-commerce-products-per-page` component determines how many products to display per page.\n *\n * @part label - The \"Products per page\" label.\n * @part buttons - The list of buttons.\n * @part button - The individual products per page buttons.\n * @part active-button - The active products per page button.\n *\n * @alpha\n */\n@Component({\n  tag: 'atomic-commerce-products-per-page',\n  styleUrl: 'atomic-commerce-products-per-page.pcss',\n  shadow: true,\n})\nexport class AtomicCommerceProductsPerPage\n  implements InitializableComponent<Bindings>\n{\n  @InitializeBindings() public bindings!: Bindings;\n\n  public pagination!: Pagination;\n  @BindStateToController('pagination')\n  @State()\n  private paginationState!: PaginationState;\n\n  public summary!: Summary;\n  @BindStateToController('summary')\n  @State()\n  private summaryState!: SearchSummaryState | ProductListingSummaryState;\n\n  @State() public error!: Error;\n  @State() private isAppLoaded = false;\n\n  private choices!: number[];\n  private readonly radioGroupName = randomID(\n    'atomic-commerce-products-per-page-'\n  );\n\n  /**\n   * A list of choices for the number of products to display per page, separated by commas.\n   */\n  @Prop({reflect: true}) choicesDisplayed = '10,25,50,100';\n  /**\n   * The initial selection for the number of product per page. This should be part of the `choicesDisplayed` option. By default, this is set to the first value in `choicesDisplayed`.\n   * @type {number}\n   */\n  @Prop({mutable: true, reflect: true}) initialChoice?: number;\n\n  @Event({\n    eventName: 'atomic/scrollToTop',\n  })\n  private scrollToTopEvent!: EventEmitter;\n\n  public initialize() {\n    try {\n      this.choices = convertChoicesToNumbers(this.choicesDisplayed);\n      this.initialChoice = this.initialChoice ?? this.choices[0];\n      validateInitialChoice(this.initialChoice, this.choices);\n    } catch (error) {\n      if (\n        error instanceof ChoiceIsNaNError ||\n        error instanceof InitialChoiceNotInChoicesError\n      ) {\n        this.bindings.engine.logger.error(error.message, this);\n        throw error;\n      }\n    }\n\n    const controller =\n      this.bindings.interfaceElement.type === 'search'\n        ? buildSearch(this.bindings.engine)\n        : buildProductListing(this.bindings.engine);\n\n    this.summary = controller.summary();\n    this.pagination = controller.pagination(\n      this.initialChoice ? {options: {pageSize: this.initialChoice}} : {}\n    );\n    createAppLoadedListener(this.bindings.store, (isAppLoaded) => {\n      this.isAppLoaded = isAppLoaded;\n    });\n  }\n\n  private get label() {\n    return this.bindings.i18n.t('products-per-page');\n  }\n\n  public render() {\n    return (\n      <PagerGuard\n        hasError={this.summaryState.hasError}\n        hasItems={this.summaryState.hasProducts}\n        isAppLoaded={this.isAppLoaded}\n      >\n        <div class=\"flex items-center\">\n          <Label>{this.label}</Label>\n          <FieldsetGroup label={this.label}>\n            <Choices\n              label={this.label}\n              groupName={this.radioGroupName}\n              pageSize={this.paginationState.pageSize}\n              choices={this.choices}\n              lang={this.bindings.i18n.language}\n              scrollToTopEvent={this.scrollToTopEvent.emit}\n              setItemSize={this.pagination.setPageSize}\n              focusOnFirstResultAfterNextSearch={() =>\n                this.bindings.store.state.resultList?.focusOnFirstResultAfterNextSearch()\n              }\n              focusOnNextNewResult={() =>\n                this.bindings.store.state.resultList?.focusOnNextNewResult()\n              }\n            ></Choices>\n          </FieldsetGroup>\n        </div>\n      </PagerGuard>\n    );\n  }\n}\n"],"mappings":"ulBAAA,MAAMA,EAAmC,k60DACzC,MAAAC,EAAeD,E,iXC6CFE,EAA6B,M,8EAgBvBC,KAAAC,YAAc,MAGdD,KAAAE,eAAiBC,EAChC,sCAMqBH,KAAAI,iBAAmB,e,iGAVX,M,sBAUW,e,6BAYnC,UAAAC,GACL,IACEL,KAAKM,QAAUC,EAAwBP,KAAKI,kBAC5CJ,KAAKQ,cAAgBR,KAAKQ,eAAiBR,KAAKM,QAAQ,GACxDG,EAAsBT,KAAKQ,cAAeR,KAAKM,Q,CAC/C,MAAOI,GACP,GACEA,aAAiBC,GACjBD,aAAiBE,EACjB,CACAZ,KAAKa,SAASC,OAAOC,OAAOL,MAAMA,EAAMM,QAAShB,MACjD,MAAMU,C,EAIV,MAAMO,EACJjB,KAAKa,SAASK,iBAAiBC,OAAS,SACpCC,EAAYpB,KAAKa,SAASC,QAC1BO,EAAoBrB,KAAKa,SAASC,QAExCd,KAAKsB,QAAUL,EAAWK,UAC1BtB,KAAKuB,WAAaN,EAAWM,WAC3BvB,KAAKQ,cAAgB,CAACgB,QAAS,CAACC,SAAUzB,KAAKQ,gBAAkB,IAEnEkB,EAAwB1B,KAAKa,SAASc,OAAQ1B,IAC5CD,KAAKC,YAAcA,CAAW,G,CAIlC,SAAY2B,GACV,OAAO5B,KAAKa,SAASgB,KAAKC,EAAE,oB,CAGvB,MAAAC,GACL,OACEC,EAACC,EAAU,CAAAC,IAAA,2CACTC,SAAUnC,KAAKoC,aAAaD,SAC5BE,SAAUrC,KAAKoC,aAAaE,YAC5BrC,YAAaD,KAAKC,aAElB+B,EAAA,OAAAE,IAAA,2CAAKK,MAAM,qBACTP,EAACQ,EAAK,CAAAN,IAAA,4CAAElC,KAAK4B,OACbI,EAACS,EAAa,CAAAP,IAAA,2CAACN,MAAO5B,KAAK4B,OACzBI,EAACU,EAAO,CAAAR,IAAA,2CACNN,MAAO5B,KAAK4B,MACZe,UAAW3C,KAAKE,eAChBuB,SAAUzB,KAAK4C,gBAAgBnB,SAC/BnB,QAASN,KAAKM,QACduC,KAAM7C,KAAKa,SAASgB,KAAKiB,SACzBC,iBAAkB/C,KAAK+C,iBAAiBC,KACxCC,YAAajD,KAAKuB,WAAW2B,YAC7BC,kCAAmC,IACjCnD,KAAKa,SAASc,MAAMyB,MAAMC,YAAYF,oCAExCG,qBAAsB,IACpBtD,KAAKa,SAASc,MAAMyB,MAAMC,YAAYC,2B,GA1FvBC,EAAA,CAA5BC,K,+BAKOD,EAAA,CAFPE,EAAsB,e,sCAOfF,EAAA,CAFPE,EAAsB,Y","ignoreList":[]}