{"version":3,"names":["getAnalyticsConfig","searchEngineConfig","enabled","analytics","analyticsMode","getNextAnalyticsConfig","getLegacyAnalyticsConfig","analyticsClientMiddleware","event","payload","augmentAnalytics","defaultConfiguration","documentLocation","document","location","href","referrer","originLevel3","config","result","augmentWithExternalMiddleware","augmentAnalyticsWithAtomicVersion","createInsightStore","store","createBaseStore","loadingFlags","iconAssetsPath","resultList","undefined","mobileBreakpoint","DEFAULT_MOBILE_BREAKPOINT","facets","numericFacets","dateFacets","categoryFacets","facetElements","fieldsToInclude","unsetLoadingFlag","loadingFlag","setLoadingFlag","isMobile","window","matchMedia","makeDesktopQuery","state","matches","registerFacet","facetType","data","getFacetElements","waitUntilAppLoaded","callback","getUniqueIDFromEngine","engine","search","searchResponseId","atomicInsightInterfaceCss","AtomicInsightInterfaceStyle0","FirstInsightRequestExecutedFlag","AtomicInsightInterface","constructor","hostRef","this","initialized","language","languageAssetsPath","resultsPerPage","commonInterfaceHelper","CommonAtomicInterfaceHelper","promise","componentWillLoadCalledPromise","resolve","componentWillLoadResolver","Promise","withResolvers","i18Initialized","i18n","i18next","createInstance","connectedCallback","componentWillLoad","CspNonce","setNonce","initResultsPerPage","engineIsCreated","buildInsightResultsPerPage","bindings","initialState","numberOfResults","registerFieldsToInclude","length","dispatch","loadFieldActions","initialize","options","internalInitialization","initEngine","initializeWithInsightEngine","executeFirstSearch","console","error","host","updateIconAssetsPath","handleInitialization","onComponentInitializing","updateLanguage","onLanguageChange","toggleAnalytics","onAnalyticsChange","interfaceElement","createStyleElement","styleTag","createElement","setAttribute","createScriptElement","analyticsConfig","buildInsightEngine","configuration","loggerOptions","level","logLevel","all","onInitialization","markParentAsReady","render","h","Host","key","name","__decorate","ArrayProp"],"sources":["src/components/insight/atomic-insight-interface/analytics-config.ts","src/components/insight/atomic-insight-interface/store.ts","src/components/insight/atomic-insight-interface/atomic-insight-interface.pcss?tag=atomic-insight-interface&encapsulation=shadow","src/components/insight/atomic-insight-interface/atomic-insight-interface.tsx"],"sourcesContent":["import {\n  AnalyticsConfiguration as InsightAnalyticsConfiguration,\n  EngineConfiguration as InsightEngineConfiguration,\n} from '@coveo/headless/insight';\nimport {\n  AnalyticsPayload,\n  augmentAnalyticsWithAtomicVersion,\n  augmentWithExternalMiddleware,\n  getNextAnalyticsConfig,\n} from '../../common/interface/analytics-config';\n\nexport function getAnalyticsConfig(\n  searchEngineConfig: InsightEngineConfiguration,\n  enabled: boolean\n): InsightAnalyticsConfiguration {\n  switch (searchEngineConfig.analytics?.analyticsMode) {\n    case 'next':\n      return getNextAnalyticsConfig(searchEngineConfig, enabled);\n    case 'legacy':\n    default:\n      return getLegacyAnalyticsConfig(searchEngineConfig, enabled);\n  }\n}\n\nfunction getLegacyAnalyticsConfig(\n  searchEngineConfig: InsightEngineConfiguration,\n  enabled: boolean\n): InsightAnalyticsConfiguration {\n  const analyticsClientMiddleware = (\n    event: string,\n    payload: AnalyticsPayload\n  ) => augmentAnalytics(event, payload, searchEngineConfig);\n\n  const defaultConfiguration: InsightAnalyticsConfiguration = {\n    analyticsClientMiddleware,\n    enabled,\n    documentLocation: document.location.href,\n    ...(document.referrer && {originLevel3: document.referrer}),\n  };\n\n  if (searchEngineConfig.analytics) {\n    return {\n      ...defaultConfiguration,\n      ...searchEngineConfig.analytics,\n      analyticsClientMiddleware,\n    };\n  }\n  return defaultConfiguration;\n}\n\nfunction augmentAnalytics(\n  event: string,\n  payload: AnalyticsPayload,\n  config: InsightEngineConfiguration\n) {\n  let result = augmentWithExternalMiddleware(event, payload, config);\n  result = augmentAnalyticsWithAtomicVersion(result);\n  return result;\n}\n","import {DEFAULT_MOBILE_BREAKPOINT} from '@/src/utils/replace-breakpoint';\nimport {\n  DateFacetValue,\n  InsightEngine,\n  NumericFacetValue,\n} from '@coveo/headless/insight';\nimport {\n  FacetInfo,\n  FacetStore,\n  FacetType,\n  FacetValueFormat,\n} from '../../common/facets/facet-common-store';\nimport {\n  BaseStore,\n  createBaseStore,\n  getFacetElements,\n  registerFacet,\n  ResultListInfo,\n  setLoadingFlag,\n  unsetLoadingFlag,\n  waitUntilAppLoaded,\n} from '../../common/interface/store';\nimport {makeDesktopQuery} from '../atomic-insight-layout/insight-layout';\n\ninterface Data {\n  loadingFlags: string[];\n  iconAssetsPath: string;\n  resultList: ResultListInfo | undefined;\n  mobileBreakpoint: string;\n  facets: FacetStore<FacetInfo>;\n  numericFacets: FacetStore<FacetInfo & FacetValueFormat<NumericFacetValue>>;\n  dateFacets: FacetStore<FacetInfo & FacetValueFormat<DateFacetValue>>;\n  categoryFacets: FacetStore<FacetInfo>;\n  facetElements: HTMLElement[];\n  fieldsToInclude: string[];\n}\n\nexport type InsightStore = BaseStore<Data> & {\n  isMobile(): boolean;\n  unsetLoadingFlag(loadingFlag: string): void;\n  setLoadingFlag(flag: string): void;\n  registerFacet<T extends FacetType, U extends string>(\n    facetType: T,\n    data: Data[T][U] & {facetId: U; element: HTMLElement}\n  ): void;\n  getFacetElements(): HTMLElement[];\n  waitUntilAppLoaded(callback: () => void): void;\n  getUniqueIDFromEngine(engine: InsightEngine): string;\n};\n\nexport function createInsightStore(): InsightStore {\n  const store = createBaseStore<Data>({\n    loadingFlags: [],\n    iconAssetsPath: '',\n    resultList: undefined,\n    mobileBreakpoint: DEFAULT_MOBILE_BREAKPOINT,\n    facets: {},\n    numericFacets: {},\n    dateFacets: {},\n    categoryFacets: {},\n    facetElements: [],\n    fieldsToInclude: [],\n  });\n\n  return {\n    ...store,\n\n    unsetLoadingFlag(loadingFlag: string) {\n      unsetLoadingFlag(store, loadingFlag);\n    },\n\n    setLoadingFlag(loadingFlag: string) {\n      setLoadingFlag(store, loadingFlag);\n    },\n\n    isMobile() {\n      return !window.matchMedia(makeDesktopQuery(store.state.mobileBreakpoint))\n        .matches;\n    },\n\n    registerFacet<T extends FacetType, U extends string>(\n      facetType: T,\n      data: Data[T][U] & {facetId: U; element: HTMLElement}\n    ) {\n      registerFacet(store, facetType, data);\n    },\n\n    getFacetElements() {\n      return getFacetElements(store);\n    },\n\n    waitUntilAppLoaded(callback: () => void) {\n      waitUntilAppLoaded(store, callback);\n    },\n\n    getUniqueIDFromEngine(engine: InsightEngine): string {\n      return engine.state.search.searchResponseId;\n    },\n  };\n}\n","@import '../../../global/global.pcss';\n\n:host {\n  position: relative;\n  display: block;\n}\n\nslot[name='full-search'] {\n  position: absolute;\n  top: 0;\n  right: 0;\n  display: block;\n}\n","import {markParentAsReady} from '@/src/utils/init-queue';\nimport {loadFieldActions} from '@coveo/headless/insight';\nimport {\n  LogLevel as InsightLogLevel,\n  InsightEngine,\n  InsightEngineConfiguration,\n  buildInsightEngine,\n  buildResultsPerPage as buildInsightResultsPerPage,\n} from '@coveo/headless/insight';\nimport {\n  Component,\n  Element,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n  setNonce,\n  State,\n  Watch,\n} from '@stencil/core';\nimport i18next, {i18n} from 'i18next';\nimport {InitializeEvent} from '../../../utils/initialization-utils';\nimport {ArrayProp} from '../../../utils/props-utils';\nimport {CommonBindings, NonceBindings} from '../../common/interface/bindings';\nimport {\n  StencilBaseAtomicInterface,\n  CommonAtomicInterfaceHelper,\n} from '../../common/interface/interface-common-stencil';\nimport {getAnalyticsConfig} from './analytics-config';\nimport {createInsightStore, InsightStore} from './store';\n\nconst FirstInsightRequestExecutedFlag = 'firstInsightRequestExecuted';\nexport type InsightInitializationOptions = InsightEngineConfiguration;\nexport type InsightBindings = CommonBindings<\n  InsightEngine,\n  InsightStore,\n  HTMLAtomicInsightInterfaceElement\n> &\n  NonceBindings;\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-interface',\n  styleUrl: 'atomic-insight-interface.pcss',\n  shadow: true,\n})\nexport class AtomicInsightInterface\n  implements StencilBaseAtomicInterface<InsightEngine>\n{\n  private initialized = false;\n\n  @State() public error?: Error;\n\n  /**\n   * The service insight interface headless engine.\n   */\n  @Prop({mutable: true}) public engine?: InsightEngine;\n  /**\n   * Whether analytics should be enabled.\n   */\n  @Prop({reflect: true}) public analytics = true;\n\n  /**\n   * The service insight interface i18next instance.\n   */\n  @Prop() public i18n: i18n;\n  /**\n   * The severity level of the messages to log in the console.\n   */\n  @Prop({reflect: true}) public logLevel?: InsightLogLevel;\n\n  /**\n   * The service insight interface language.\n   */\n  @Prop({reflect: true}) public language = 'en';\n\n  /**\n   * The language assets path. By default, this will be a relative URL pointing to `./lang`.\n   *\n   * Example: \"/mypublicpath/languages\"\n   *\n   */\n  @Prop({reflect: true}) public languageAssetsPath = './lang';\n\n  /**\n   * The icon assets path. By default, this will be a relative URL pointing to `./assets`.\n   *\n   * Example: \"/mypublicpath/icons\"\n   *\n   */\n  @Prop({reflect: true}) public iconAssetsPath = './assets';\n  /**\n   * A list of non-default fields to include in the query results.\n   *\n   * Specify the property as an array using a JSON string representation:\n   * ```html\n   * <atomic-insight-interface fields-to-include='[\"fieldA\", \"fieldB\"]'></atomic-insight-interface>\n   * ```\n   */\n  @ArrayProp()\n  @Prop({mutable: true})\n  public fieldsToInclude: string[] | string = '[]';\n\n  /**\n   * The number of results per page. By default, this is set to `5`.\n   */\n  @Prop({reflect: true}) resultsPerPage = 5;\n\n  /**\n   * The value to set the [nonce](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce) attribute to on inline script and style elements generated by this interface and its child components.\n   * If your application is served with a Content Security Policy (CSP) that doesn't include the `script-src: 'unsafe-inline'` or `style-src: 'unsafe-inline'` directives,\n   * you should ensure that your application server generates a new nonce on every page load and uses the generated value to set this prop and serve the corresponding CSP response headers\n   * (i.e., script-src 'nonce-<YOUR_GENERATED_NONCE>' and style-src 'nonce-<YOUR_GENERATED_NONCE>').\n   * Otherwise you may see console errors such as\n   *  - Refused to execute inline script because it violates the following Content Security Policy directive: [...]\n   *  - Refused to apply inline style because it violates the following Content Security Policy directive: [...].\n   * When using a nonce, the first import of Atomic should be to import & call the `setNonce` function with the generated nonce value.\n   * @example:\n   * ```html\n   * <script nonce=\"<YOUR_GENERATED_NONCE>\">\n   *  import {setNonce} from '@coveo/atomic';\n   *  setNonce('<YOUR_GENERATED_NONCE>');\n   * </script>\n   * ```\n   */\n  @Prop({reflect: true}) public CspNonce?: string;\n\n  @Element() public host!: HTMLAtomicInsightInterfaceElement;\n\n  private store = createInsightStore();\n  private commonInterfaceHelper: CommonAtomicInterfaceHelper<InsightEngine>;\n\n  private i18Initialized: Promise<void>;\n  private componentWillLoadCalledPromise: Promise<void>;\n  private componentWillLoadResolver: () => void;\n\n  public constructor() {\n    this.commonInterfaceHelper = new CommonAtomicInterfaceHelper(\n      this,\n      'CoveoAtomic'\n    );\n    ({\n      promise: this.componentWillLoadCalledPromise,\n      resolve: this.componentWillLoadResolver,\n    } = Promise.withResolvers<void>());\n    const {promise, resolve} = Promise.withResolvers<void>();\n    this.i18Initialized = promise;\n    this.i18n = i18next.createInstance(undefined, resolve);\n  }\n\n  public connectedCallback() {\n    this.store.setLoadingFlag(FirstInsightRequestExecutedFlag);\n  }\n\n  public componentWillLoad() {\n    if (this.CspNonce) {\n      setNonce(this.CspNonce);\n    }\n    this.componentWillLoadResolver();\n  }\n\n  private initResultsPerPage() {\n    if (!this.commonInterfaceHelper.engineIsCreated(this.engine)) {\n      return;\n    }\n    buildInsightResultsPerPage(this.bindings.engine, {\n      initialState: {numberOfResults: this.resultsPerPage},\n    });\n  }\n\n  public registerFieldsToInclude() {\n    if (this.fieldsToInclude.length) {\n      this.engine!.dispatch(\n        loadFieldActions(this.engine!).registerFieldsToInclude([\n          ...this.fieldsToInclude,\n        ])\n      );\n    }\n  }\n\n  /**\n   * Initializes the connection with the headless insight engine using options for `accessToken` (required), `organizationId` (required), `environment` (defaults to `prod`), and `renewAccessToken`.\n   */\n  @Method() public initialize(options: InsightInitializationOptions) {\n    return this.internalInitialization(() => this.initEngine(options));\n  }\n\n  /**\n   * Initializes the connection with an already preconfigured headless insight engine.\n   *\n   */\n  @Method() public initializeWithInsightEngine(engine: InsightEngine) {\n    return this.internalInitialization(() => (this.engine = engine));\n  }\n\n  /**\n   *\n   * Executes the first search and logs the interface load event to analytics, after initializing connection to the headless search engine.\n   */\n  @Method() public async executeFirstSearch() {\n    if (!this.commonInterfaceHelper.engineIsCreated(this.engine)) {\n      return;\n    }\n    if (!this.initialized) {\n      console.error(\n        'You have to wait until the \"initialize\" promise is fulfilled before executing a search.',\n        this.host\n      );\n      return;\n    }\n    this.engine.executeFirstSearch();\n  }\n\n  @Watch('iconAssetsPath')\n  public updateIconAssetsPath() {\n    this.store.state.iconAssetsPath = this.iconAssetsPath;\n  }\n\n  @Listen('atomic/initializeComponent')\n  public handleInitialization(event: InitializeEvent) {\n    this.commonInterfaceHelper.onComponentInitializing(event);\n  }\n\n  @Watch('language')\n  public updateLanguage() {\n    return this.commonInterfaceHelper.onLanguageChange();\n  }\n\n  @Watch('analytics')\n  public toggleAnalytics() {\n    this.commonInterfaceHelper.onAnalyticsChange();\n  }\n\n  public get bindings(): InsightBindings {\n    return {\n      engine: this.engine!,\n      i18n: this.i18n,\n      store: this.store,\n      interfaceElement: this.host,\n      createStyleElement: () => {\n        const styleTag = document.createElement('style');\n        if (this.CspNonce) {\n          styleTag.setAttribute('nonce', this.CspNonce);\n        }\n        return styleTag;\n      },\n      createScriptElement: () => {\n        const styleTag = document.createElement('script');\n        if (this.CspNonce) {\n          styleTag.setAttribute('nonce', this.CspNonce);\n        }\n        return styleTag;\n      },\n    };\n  }\n\n  private initEngine(options: InsightInitializationOptions) {\n    const analyticsConfig = getAnalyticsConfig(options, this.analytics);\n    try {\n      this.engine = buildInsightEngine({\n        configuration: {\n          ...options,\n          analytics: analyticsConfig,\n        },\n        loggerOptions: {\n          level: this.logLevel,\n        },\n      });\n    } catch (error) {\n      this.error = error as Error;\n      throw error;\n    }\n  }\n\n  private async internalInitialization(initEngine: () => void) {\n    await this.componentWillLoadCalledPromise;\n    await Promise.all([\n      this.commonInterfaceHelper.onInitialization(initEngine),\n      this.i18Initialized,\n    ]);\n    await this.updateLanguage();\n    markParentAsReady(this.host);\n    this.store.unsetLoadingFlag(FirstInsightRequestExecutedFlag);\n    this.initResultsPerPage();\n    this.initialized = true;\n  }\n\n  render() {\n    return (\n      this.engine && (\n        <Host>\n          <slot name=\"full-search\"></slot>\n          <slot></slot>\n        </Host>\n      )\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}