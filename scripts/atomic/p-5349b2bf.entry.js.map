{"version":3,"names":["atomicBreadboxCss","AtomicBreadboxStyle0","AtomicBreadbox","this","lastRemovedBreadcrumbIndex","numberOfBreadcrumbs","numberOfCollapsedBreadcrumbs","isCollapsed","pathLimit","initialize","validateProps","breadcrumbManager","buildBreadcrumbManager","bindings","engine","facetManager","buildFacetManager","window","ResizeObserver","resizeObserver","adaptBreadcrumbs","observe","host","parentElement","Schema","NumberValue","default","min","required","validate","disconnectedCallback","disconnect","focusTargets","breadcrumbRemovedFocus","FocusTargetController","breadcrumbShowLessFocus","breadcrumbShowMoreFocus","breadcrumbs","Array","from","shadowRoot","querySelectorAll","hide","element","style","display","show","showAllBreadcrumbs","forEach","breadcrumb","hideOverflowingBreadcrumbs","hiddenBreadcrumbs","i","length","isOverflowing","updateShowMoreValue","updateShowLessDisplay","showLess","offsetTop","listElement","querySelector","scrollWidth","clientWidth","value","showMore","textContent","toLocaleString","i18n","language","setAttribute","t","facetBreadcrumbs","breadcrumbManagerState","map","facetId","field","values","flat","filter","store","state","facets","label","deselect","formattedValue","getFieldValueCaption","categoryFacetBreadcrumbs","path","categoryFacets","pathValue","numericFacetBreadcrumbs","numericFacets","format","content","dateFacetBreadcrumbs","dateFacets","automaticFacetBreadcrumbs","flatMap","allBreadcrumbs","renderBreadcrumbs","sortedBreadcrumbs","sort","a","b","indexA","facetManagerState","facetIds","indexOf","indexB","index","isLastBreadcrumb","h","BreadcrumbButton","setRef","ref","setTarget","firstExpandedBreadcrumbIndex","onSelectBreadcrumb","resultList","focusOnFirstResultAfterNextSearch","focusAfterSearch","BreadcrumbContent","render","Hidden","BreadcrumbContainer","BreadcrumbShowMore","el","onShowMore","focusOnNextTarget","BreadcrumbShowLess","onShowLess","BreadcrumbClearAll","onClick","async","deselectAll","componentDidRender","__decorate","InitializeBindings","BindStateToController"],"sources":["src/components/search/atomic-breadbox/atomic-breadbox.pcss?tag=atomic-breadbox&encapsulation=shadow","src/components/search/atomic-breadbox/atomic-breadbox.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\n@import '../../common/atomic-rating/atomic-rating.pcss';\n\n[part='breadcrumb-label'].excluded,\n[part='breadcrumb-value'].excluded {\n  text-decoration: line-through;\n  @apply text-error;\n}\n","import {NumberValue, Schema} from '@coveo/bueno';\nimport {\n  BreadcrumbManagerState,\n  BreadcrumbManager,\n  buildBreadcrumbManager,\n  FacetManager,\n  FacetManagerState,\n  buildFacetManager,\n} from '@coveo/headless';\nimport {Component, h, State, Element, Prop} from '@stencil/core';\nimport {getFieldValueCaption} from '../../../utils/field-utils';\nimport {\n  InitializableComponent,\n  BindStateToController,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {FocusTargetController} from '../../../utils/stencil-accessibility-utils';\nimport {Breadcrumb as BreadboxBreadcrumb} from '../../common/breadbox/breadcrumb-types';\nimport {BreadcrumbButton} from '../../common/breadbox/stencil-breadcrumb-button';\nimport {BreadcrumbClearAll} from '../../common/breadbox/stencil-breadcrumb-clear-all';\nimport {BreadcrumbContainer} from '../../common/breadbox/stencil-breadcrumb-container';\nimport {BreadcrumbContent} from '../../common/breadbox/stencil-breadcrumb-content';\nimport {BreadcrumbShowLess} from '../../common/breadbox/stencil-breadcrumb-show-less';\nimport {BreadcrumbShowMore} from '../../common/breadbox/stencil-breadcrumb-show-more';\nimport {Hidden} from '../../common/stencil-hidden';\nimport {Bindings} from '../atomic-search-interface/atomic-search-interface';\n\n/**\n * The `atomic-breadbox` component creates breadcrumbs that display a summary of the currently active facet values.\n *\n * @part container - The container of the whole component, list & label.\n * @part breadcrumb-list-container - The container of the list of breadcrumb buttons.\n * @part breadcrumb-list - The list of breadcrumb buttons.\n * @part breadcrumb-button - A single breadcrumb button.\n * @part breadcrumb-label - The breadcrumb label, associated with the facet.\n * @part breadcrumb-value - The breadcrumb formatted value.\n * @part breadcrumb-clear - The button to clear individual filters.\n * @part show-more - The button to display all breadcrumbs.\n * @part show-less - The button to display less breadcrumbs.\n * @part label - The \"Filters\" label.\n * @part clear - The button to clear all filters.\n */\n@Component({\n  tag: 'atomic-breadbox',\n  styleUrl: 'atomic-breadbox.pcss',\n  shadow: true,\n})\nexport class AtomicBreadbox implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  private breadcrumbManager!: BreadcrumbManager;\n  private resizeObserver?: ResizeObserver;\n  private showMore!: HTMLButtonElement;\n  private showLess!: HTMLButtonElement;\n  private lastRemovedBreadcrumbIndex = 0;\n  private numberOfBreadcrumbs = 0;\n  private numberOfCollapsedBreadcrumbs = 0;\n  private firstExpandedBreadcrumbIndex?: number;\n  facetManager!: FacetManager;\n\n  @Element() private host!: HTMLElement;\n\n  @BindStateToController('breadcrumbManager')\n  @State()\n  private breadcrumbManagerState!: BreadcrumbManagerState;\n  @BindStateToController('facetManager')\n  @State()\n  public facetManagerState!: FacetManagerState;\n  @State() public error!: Error;\n  @State() private isCollapsed = true;\n\n  private breadcrumbRemovedFocus?: FocusTargetController;\n\n  private breadcrumbShowMoreFocus?: FocusTargetController;\n\n  private breadcrumbShowLessFocus?: FocusTargetController;\n\n  /**\n   * This prop allows you to control the display depth\n   * of the path by specifying the number of parent or ancestor\n   * breadcrumbs links relative to the currently selected value.\n   *\n   * If the path size is equal to or less than the pathLimit, all values in\n   * the path will be displayed without truncation.\n   *\n   * If the path size exceeds the pathLimit, it will truncate the path by\n   * replacing the middle values with ellipses ('...').\n   *\n   * Minimum: `1`\n   * @defaultValue `3`\n   */\n  @Prop() public pathLimit = 3;\n\n  public initialize() {\n    this.validateProps();\n    this.breadcrumbManager = buildBreadcrumbManager(this.bindings.engine);\n    this.facetManager = buildFacetManager(this.bindings.engine);\n\n    if (window.ResizeObserver) {\n      this.resizeObserver = new ResizeObserver(() => this.adaptBreadcrumbs());\n      this.resizeObserver.observe(this.host.parentElement!);\n    }\n  }\n\n  private validateProps() {\n    new Schema({\n      pathLimit: new NumberValue({\n        default: 3,\n        min: 1,\n        required: false,\n      }),\n    }).validate({\n      pathLimit: this.pathLimit,\n    });\n  }\n\n  public disconnectedCallback() {\n    this.resizeObserver?.disconnect();\n  }\n\n  private get focusTargets() {\n    if (!this.breadcrumbRemovedFocus) {\n      this.breadcrumbRemovedFocus = new FocusTargetController(this);\n    }\n    if (!this.breadcrumbShowLessFocus) {\n      this.breadcrumbShowLessFocus = new FocusTargetController(this);\n    }\n    if (!this.breadcrumbShowMoreFocus) {\n      this.breadcrumbShowMoreFocus = new FocusTargetController(this);\n    }\n    return {\n      breadcrumbRemovedFocus: this.breadcrumbRemovedFocus,\n      breadcrumbShowLessFocus: this.breadcrumbShowLessFocus,\n      breadcrumbShowMoreFocus: this.breadcrumbShowMoreFocus,\n    };\n  }\n\n  private get breadcrumbs() {\n    return Array.from(\n      this.host.shadowRoot!.querySelectorAll('li.breadcrumb')\n    ) as HTMLElement[];\n  }\n\n  private hide(element: HTMLElement) {\n    element.style.display = 'none';\n  }\n\n  private show(element: HTMLElement) {\n    element.style.display = '';\n  }\n\n  private showAllBreadcrumbs() {\n    this.breadcrumbs.forEach((breadcrumb) => this.show(breadcrumb));\n  }\n\n  private hideOverflowingBreadcrumbs() {\n    let hiddenBreadcrumbs = 0;\n    for (\n      let i = this.breadcrumbs.length - 1;\n      this.isOverflowing && i >= 0;\n      i--\n    ) {\n      this.hide(this.breadcrumbs[i]);\n      hiddenBreadcrumbs++;\n    }\n    this.updateShowMoreValue(hiddenBreadcrumbs);\n  }\n\n  private updateShowLessDisplay() {\n    this.show(this.showLess);\n    if (this.showLess.offsetTop === 0) {\n      this.hide(this.showLess);\n    }\n  }\n\n  private adaptBreadcrumbs() {\n    if (!this.breadcrumbs.length) {\n      return;\n    }\n    this.showAllBreadcrumbs();\n\n    if (!this.isCollapsed) {\n      this.updateShowLessDisplay();\n      return;\n    }\n\n    this.updateShowMoreValue(this.breadcrumbs.length);\n    this.hideOverflowingBreadcrumbs();\n  }\n\n  private get isOverflowing() {\n    const listElement = this.host.shadowRoot!.querySelector('ul');\n    if (!listElement) {\n      return false;\n    }\n    return listElement.scrollWidth > listElement.clientWidth;\n  }\n\n  private updateShowMoreValue(value: number) {\n    this.numberOfCollapsedBreadcrumbs = value;\n    if (value === 0) {\n      this.hide(this.showMore);\n      return;\n    }\n\n    this.show(this.showMore);\n    this.showMore.textContent = `+ ${value.toLocaleString(\n      this.bindings.i18n.language\n    )}`;\n\n    this.showMore.setAttribute(\n      'aria-label',\n      this.bindings.i18n.t('show-n-more-filters', {\n        value,\n      })\n    );\n  }\n\n  private get facetBreadcrumbs(): BreadboxBreadcrumb[] {\n    return this.breadcrumbManagerState.facetBreadcrumbs\n      .map(({facetId, field, values}) =>\n        values.map((value) => ({value, facetId, field}))\n      )\n      .flat()\n      .filter(({facetId}) => this.bindings.store.state.facets[facetId])\n      .map(({value, facetId, field}) => ({\n        facetId,\n        label: this.bindings.store.state.facets[facetId]?.label(),\n        state: value.value.state,\n        deselect: value.deselect,\n        formattedValue: [\n          getFieldValueCaption(field, value.value.value, this.bindings.i18n),\n        ],\n      }));\n  }\n\n  private get categoryFacetBreadcrumbs(): BreadboxBreadcrumb[] {\n    return this.breadcrumbManagerState.categoryFacetBreadcrumbs.map(\n      ({facetId, field, path, deselect}) => ({\n        facetId,\n        label: this.bindings.store.state.categoryFacets[facetId].label(),\n        deselect: deselect,\n        formattedValue: path.map((pathValue) =>\n          getFieldValueCaption(field, pathValue.value, this.bindings.i18n)\n        ),\n      })\n    );\n  }\n\n  private get numericFacetBreadcrumbs(): BreadboxBreadcrumb[] {\n    return this.breadcrumbManagerState.numericFacetBreadcrumbs\n      .map(({facetId, field, values}) =>\n        values.map((value) => ({value, facetId, field}))\n      )\n      .flat()\n      .map(({value, facetId}) => ({\n        facetId,\n        label: this.bindings.store.state.numericFacets[facetId].label(),\n        state: value.value.state,\n        deselect: value.deselect,\n        formattedValue: [\n          this.bindings.store.state.numericFacets[facetId].format(value.value),\n        ],\n        content: this.bindings.store.state.numericFacets[facetId].content?.(\n          value.value\n        ),\n      }));\n  }\n\n  private get dateFacetBreadcrumbs(): BreadboxBreadcrumb[] {\n    return this.breadcrumbManagerState.dateFacetBreadcrumbs\n      .map(({facetId, field, values}) =>\n        values.map((value) => ({value, facetId, field}))\n      )\n      .flat()\n      .map(({value, facetId}) => ({\n        facetId,\n        label: this.bindings.store.state.dateFacets[facetId].label(),\n        state: value.value.state,\n        deselect: value.deselect,\n        formattedValue: [\n          this.bindings.store.state.dateFacets[facetId].format(value.value),\n        ],\n      }));\n  }\n\n  private get automaticFacetBreadcrumbs(): BreadboxBreadcrumb[] {\n    return this.breadcrumbManagerState.automaticFacetBreadcrumbs\n      .flatMap(({facetId, field, label, values}) =>\n        values.map((value) => ({value, facetId, field, label}))\n      )\n      .map(({value, facetId, field, label}) => ({\n        facetId,\n        state: value.value.state,\n        label: label ? label : field,\n        deselect: value.deselect,\n        formattedValue: [\n          getFieldValueCaption(field, value.value.value, this.bindings.i18n),\n        ],\n      }));\n  }\n\n  private get allBreadcrumbs(): BreadboxBreadcrumb[] {\n    return [\n      ...this.facetBreadcrumbs,\n      ...this.categoryFacetBreadcrumbs,\n      ...this.numericFacetBreadcrumbs,\n      ...this.dateFacetBreadcrumbs,\n      ...this.automaticFacetBreadcrumbs,\n    ];\n  }\n\n  private renderBreadcrumbs(allBreadcrumbs: BreadboxBreadcrumb[]) {\n    const sortedBreadcrumbs = allBreadcrumbs.sort((a, b) => {\n      const indexA = this.facetManagerState.facetIds.indexOf(a.facetId);\n      const indexB = this.facetManagerState.facetIds.indexOf(b.facetId);\n      return indexA - indexB;\n    });\n    this.numberOfBreadcrumbs = sortedBreadcrumbs.length;\n\n    return [\n      sortedBreadcrumbs.map((breadcrumb, index) => {\n        const isLastBreadcrumb = this.allBreadcrumbs.length === 1;\n        return (\n          <BreadcrumbButton\n            setRef={(ref) => {\n              if (this.lastRemovedBreadcrumbIndex === index) {\n                this.focusTargets.breadcrumbRemovedFocus.setTarget(ref);\n              }\n              if (this.firstExpandedBreadcrumbIndex === index) {\n                this.focusTargets.breadcrumbShowMoreFocus.setTarget(ref);\n              }\n            }}\n            pathLimit={this.pathLimit}\n            breadcrumb={breadcrumb}\n            onSelectBreadcrumb={() => {\n              if (isLastBreadcrumb) {\n                this.bindings.store.state.resultList?.focusOnFirstResultAfterNextSearch();\n              } else if (this.numberOfBreadcrumbs > 1) {\n                this.focusTargets.breadcrumbRemovedFocus.focusAfterSearch();\n              }\n\n              this.lastRemovedBreadcrumbIndex = index;\n              breadcrumb.deselect();\n            }}\n            i18n={this.bindings.i18n}\n          >\n            <BreadcrumbContent\n              pathLimit={this.pathLimit}\n              isCollapsed={this.isCollapsed}\n              i18n={this.bindings.i18n}\n              breadcrumb={breadcrumb}\n            ></BreadcrumbContent>\n          </BreadcrumbButton>\n        );\n      }),\n    ];\n  }\n\n  public render() {\n    const allBreadcrumbs = this.allBreadcrumbs;\n\n    if (!allBreadcrumbs.length) {\n      return <Hidden></Hidden>;\n    }\n\n    return (\n      <BreadcrumbContainer\n        isCollapsed={this.isCollapsed}\n        i18n={this.bindings.i18n}\n      >\n        {this.renderBreadcrumbs(allBreadcrumbs)}\n        <BreadcrumbShowMore\n          setRef={(el) => {\n            this.showMore = el;\n          }}\n          onShowMore={() => {\n            this.firstExpandedBreadcrumbIndex =\n              this.numberOfBreadcrumbs - this.numberOfCollapsedBreadcrumbs;\n            this.focusTargets.breadcrumbShowMoreFocus.focusOnNextTarget();\n            this.isCollapsed = false;\n          }}\n          isCollapsed={this.isCollapsed}\n          i18n={this.bindings.i18n}\n          numberOfCollapsedBreadcrumbs={this.numberOfCollapsedBreadcrumbs}\n        ></BreadcrumbShowMore>\n        <BreadcrumbShowLess\n          setRef={(el) => {\n            this.showLess = el;\n          }}\n          onShowLess={() => {\n            this.focusTargets.breadcrumbShowLessFocus.focusOnNextTarget();\n            this.isCollapsed = true;\n          }}\n          isCollapsed={this.isCollapsed}\n          i18n={this.bindings.i18n}\n        ></BreadcrumbShowLess>\n        <BreadcrumbClearAll\n          setRef={() => {\n            const isFocusTarget =\n              this.lastRemovedBreadcrumbIndex === this.numberOfBreadcrumbs;\n\n            isFocusTarget\n              ? this.focusTargets.breadcrumbRemovedFocus.setTarget\n              : undefined;\n          }}\n          onClick={async () => {\n            this.breadcrumbManager.deselectAll();\n            this.bindings.store.state.resultList?.focusOnFirstResultAfterNextSearch();\n          }}\n          isCollapsed={this.isCollapsed}\n          i18n={this.bindings.i18n}\n        ></BreadcrumbClearAll>\n      </BreadcrumbContainer>\n    );\n  }\n\n  public componentDidRender() {\n    this.adaptBreadcrumbs();\n  }\n}\n"],"mappings":"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","ignoreList":[]}