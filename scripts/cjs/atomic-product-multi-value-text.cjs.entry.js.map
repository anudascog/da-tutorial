{"file":"atomic-product-multi-value-text.entry.cjs.js","mappings":"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","names":["buildProductListing","buildSearch","ProductTemplatesHelpers","getFieldValueCaption","titleToKebab","h","InitializeBindings","ProductContext"],"sources":["src/components/commerce/product-template-components/atomic-product-multi-value-text/atomic-product-multi-value-text.pcss?tag=atomic-product-multi-value-text&encapsulation=shadow","src/components/commerce/product-template-components/atomic-product-multi-value-text/atomic-product-multi-value-text.tsx"],"sourcesContent":[":host {\n  > ul {\n    display: flex;\n    list-style: none;\n    margin: 0;\n    padding: 0;\n\n    li {\n      display: inline-block;\n    }\n  }\n}\n\n.separator {\n  &::before {\n    display: inline;\n    content: ',\\00a0';\n  }\n}\n","import {\n  BreadcrumbManager,\n  buildProductListing,\n  buildSearch,\n  Product,\n  ProductListing,\n  ProductTemplatesHelpers,\n  Search,\n  RegularFacetValue,\n} from '@coveo/headless/commerce';\nimport {Component, Element, Prop, h, State, VNode} from '@stencil/core';\nimport {getFieldValueCaption} from '../../../../utils/field-utils';\nimport {InitializeBindings} from '../../../../utils/initialization-utils';\nimport {titleToKebab} from '../../../../utils/utils';\nimport {CommerceBindings} from '../../atomic-commerce-interface/atomic-commerce-interface';\nimport {ProductContext} from '../product-template-decorators';\n\n/**\n * @alpha\n *\n * The `atomic-product-multi-value-text` component renders the values of a multi-value string field.\n * @part product-multi-value-text-list - The list of field values.\n * @part product-multi-value-text-separator - The separator to display between each of the field values.\n * @part product-multi-value-text-value - A field value.\n * @part product-multi-value-text-value-more - A label indicating some values were omitted.\n * @slot product-multi-value-text-value-* - A custom caption value that's specified for a given part of a multi-text field value. For example, if you want to use `Off-Campus Resident` as a caption value for `Off-campus apartment` in `Off-campus apartment;On-campus apartment`, you'd use `<span slot=\"product-multi-value-text-value-off-campus-apartment\">Off-Campus Resident</span>`). The suffix of this slot corresponds with the field value, written in kebab case.\n */\n@Component({\n  tag: 'atomic-product-multi-value-text',\n  styleUrl: 'atomic-product-multi-value-text.pcss',\n  shadow: true,\n})\nexport class AtomicProductMultiValueText {\n  public breadcrumbManager!: BreadcrumbManager;\n  public searchOrListing!: Search | ProductListing;\n\n  @InitializeBindings() public bindings!: CommerceBindings;\n  @ProductContext() private product!: Product;\n\n  @Element() host!: HTMLElement;\n\n  @State() public error!: Error;\n\n  /**\n   * The field that the component should use.\n   * The component will try to find this field in the `Product.additionalFields` object unless it finds it in the `Product` object first.\n   * Make sure this field is present in the `fieldsToInclude` property of the `atomic-commerce-interface` component.\n   */\n  @Prop({reflect: true}) public field!: string;\n\n  /**\n   * The maximum number of field values to display.\n   * If there are _n_ more values than the specified maximum, the last displayed value will be \"_n_ more...\".\n   */\n  @Prop({reflect: true}) public maxValuesToDisplay = 3;\n\n  /**\n   * The delimiter used to separate values when the field isn't indexed as a multi value field.\n   */\n  @Prop({reflect: true}) public delimiter: string | null = null;\n\n  private sortedValues: string[] | null = null;\n\n  public initialize() {\n    if (this.bindings.interfaceElement.type === 'product-listing') {\n      this.searchOrListing = buildProductListing(this.bindings.engine);\n    } else {\n      this.searchOrListing = buildSearch(this.bindings.engine);\n    }\n\n    this.breadcrumbManager = this.searchOrListing.breadcrumbManager();\n  }\n\n  private get productValues() {\n    const value = ProductTemplatesHelpers.getProductProperty(\n      this.product,\n      this.field\n    );\n\n    if (value === null) {\n      return null;\n    }\n\n    if (Array.isArray(value)) {\n      return value.map((v) => `${v}`.trim());\n    }\n\n    if (typeof value !== 'string' || value.trim() === '') {\n      this.error = new Error(\n        `Could not parse \"${value}\" from field \"${this.field}\" as a string array.`\n      );\n      return null;\n    }\n\n    return this.delimiter\n      ? value.split(this.delimiter).map((value) => value.trim())\n      : [value];\n  }\n\n  private get facetSelectedValues() {\n    return this.breadcrumbManager.state.facetBreadcrumbs\n      .filter((facet) => facet.field === this.field)\n      .reduce(\n        (values, facet) => [\n          ...values,\n          ...facet.values.map(({value}) => (value as RegularFacetValue).value),\n        ],\n        [] as string[]\n      );\n  }\n\n  private updateSortedValues() {\n    const allValues = this.productValues;\n    if (allValues === null) {\n      this.sortedValues = null;\n      return;\n    }\n    const firstValues = this.facetSelectedValues.filter((value) =>\n      allValues.includes(value)\n    );\n    this.sortedValues = Array.from(new Set([...firstValues, ...allValues]));\n  }\n\n  private getShouldDisplayLabel(values: string[]) {\n    return (\n      this.maxValuesToDisplay > 0 && values.length > this.maxValuesToDisplay\n    );\n  }\n\n  private getNumberOfValuesToDisplay(values: string[]) {\n    return Math.min(values.length, this.maxValuesToDisplay);\n  }\n\n  private renderValue(value: string) {\n    const label = getFieldValueCaption(this.field, value, this.bindings.i18n);\n    const kebabValue = titleToKebab(value);\n    return (\n      <li key={value} part=\"product-multi-value-text-value\">\n        <slot name={`product-multi-value-text-value-${kebabValue}`}>\n          {label}\n        </slot>\n      </li>\n    );\n  }\n\n  private renderSeparator(beforeValue: string, afterValue: string) {\n    return (\n      <li\n        aria-hidden=\"true\"\n        part=\"product-multi-value-text-separator\"\n        key={`${beforeValue}~${afterValue}`}\n        class=\"separator\"\n      ></li>\n    );\n  }\n\n  private renderMoreLabel(value: number) {\n    return (\n      <li key=\"more-field-values\" part=\"product-multi-value-text-value-more\">\n        {this.bindings.i18n.t('n-more', {value})}\n      </li>\n    );\n  }\n\n  private renderListItems(values: string[]) {\n    const numberOfValuesToDisplay = this.getNumberOfValuesToDisplay(values);\n\n    const nodes: VNode[] = [];\n    for (let i = 0; i < numberOfValuesToDisplay; i++) {\n      if (i > 0) {\n        nodes.push(this.renderSeparator(values[i - 1], values[i]));\n      }\n      nodes.push(this.renderValue(values[i]));\n    }\n    if (this.getShouldDisplayLabel(values)) {\n      nodes.push(\n        this.renderSeparator(\n          values[numberOfValuesToDisplay - 1],\n          'more-field-values'\n        )\n      );\n      nodes.push(this.renderMoreLabel(values.length - numberOfValuesToDisplay));\n    }\n    return nodes;\n  }\n\n  public componentWillRender() {\n    this.updateSortedValues();\n  }\n\n  public render() {\n    if (this.sortedValues === null) {\n      this.host.remove();\n      return;\n    }\n    return (\n      <ul part=\"product-multi-value-text-list\">\n        {...this.renderListItems(this.sortedValues)}\n      </ul>\n    );\n  }\n}\n"],"version":3}