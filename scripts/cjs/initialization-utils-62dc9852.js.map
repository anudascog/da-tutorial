{"file":"initialization-utils-62dc9852.js","mappings":"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","names":["h","Host","buildCustomEvent","initializeEventName","closest","initializableElements","MissingInterfaceParentError","enqueueOrDispatchInitializationEvent","getElement","forceUpdateComponent"],"sources":["src/components/common/stencil-hidden.tsx","src/utils/initialization-utils.tsx"],"sourcesContent":["import {FunctionalComponent, Host, h} from '@stencil/core';\n\n/**\n * @deprecated Should only be used for Stencil components; for Lit components, use the displayIf directive instead\n */\nexport const Hidden: FunctionalComponent = () => (\n  <Host class=\"atomic-hidden\"></Host>\n);\n","import type {CoreEngine} from '@coveo/headless';\nimport {\n  ComponentInterface,\n  getElement,\n  h,\n  forceUpdate as forceUpdateComponent,\n} from '@stencil/core';\nimport {TOptions} from 'i18next';\nimport {AnyBindings} from '../components/common/interface/bindings';\nimport {Hidden} from '../components/common/stencil-hidden';\nimport {Bindings} from '../components/search/atomic-search-interface/atomic-search-interface';\nimport {closest} from './dom-utils';\nimport {buildCustomEvent} from './event-utils';\nimport {enqueueOrDispatchInitializationEvent} from './init-queue';\nimport {\n  MissingInterfaceParentError,\n  InitializeEventHandler,\n  initializableElements,\n  initializeEventName,\n} from './initialization-lit-stencil-common-utils';\n\nexport type InitializeEvent = CustomEvent<InitializeEventHandler>;\n\n/**\n * Retrieves `Bindings` or `CommerceBindings` on a configured parent interface.\n * @param event - The element on which to dispatch the event, which must be the child of a configured Atomic container element.\n * @returns A promise that resolves upon initialization of the parent container element, and rejects otherwise.\n * @deprecated should only be used for Stencil components. For Lit components, use `initializeBindings` from @/src/decorators/initialize-bindings.\n */\nexport function initializeBindings<\n  SpecificBindings extends AnyBindings = Bindings,\n>(element: Element) {\n  return new Promise<SpecificBindings>((resolve, reject) => {\n    const event = buildCustomEvent<InitializeEventHandler>(\n      initializeEventName,\n      (bindings) => resolve(bindings as SpecificBindings)\n    );\n\n    const parent = closest(element, initializableElements.join(', '));\n\n    if (!parent) {\n      reject(new MissingInterfaceParentError(element.nodeName.toLowerCase()));\n      return;\n    }\n\n    enqueueOrDispatchInitializationEvent(parent, event, element);\n  });\n}\n\nexport {\n  MissingInterfaceParentError,\n  InitializeEventHandler,\n  initializeEventName,\n} from './initialization-lit-stencil-common-utils';\n\n/**\n * Necessary interface an Atomic Component must have to initialize itself correctly.\n * @deprecated To be used for Stencil components. For Lit components. use `InitializableComponent` from './decorators/types/'\n */\nexport interface InitializableComponent<\n  SpecificBindings extends AnyBindings = Bindings,\n> extends ComponentInterface {\n  /**\n   * Bindings passed from the `AtomicSearchInterface` to its children components.\n   */\n  bindings: SpecificBindings;\n  /**\n   * Method called right after the `bindings` property is defined. This is the method where Headless Framework controllers should be initialized.\n   */\n  initialize?: () => void;\n  error: Error;\n}\n\ntype InitializeBindingsProps = {\n  forceUpdate?: boolean;\n};\n\nconst renderedAttribute = 'data-atomic-rendered';\nconst loadedAttribute = 'data-atomic-loaded';\n\n/**\n * A [StencilJS property decorator](https://stenciljs.com/) to be used on a property named `bindings`.\n * This will automatically fetch the `Bindings` from the parent `atomic-search-interface` or `atomic-external` components.\n *\n * Once a component is bound, the `initialize` method is called.\n * In the event of an initialization error, the `error` property will be set and an `atomic-component-error` will be rendered.\n *\n * In order for a component using this decorator to render properly, it should have an internal state bound to one of the properties from `bindings`.\n * This is possible by using the `BindStateToController` decorator.\n *\n * @example\n * @InitializeBindings() public bindings!: Bindings;\n *\n * For more information and examples, view the \"Utilities\" section of the readme.\n * @deprecated To be used for Stencil components. For Lit components, use `BindingController` Reactive Controller from @/mixins/bindings-mixin.ts.\n */\nexport function InitializeBindings<SpecificBindings extends AnyBindings>({\n  forceUpdate,\n}: InitializeBindingsProps = {}) {\n  return (\n    component: InitializableComponent<SpecificBindings>,\n    bindingsProperty: string\n  ) => {\n    const {\n      componentWillLoad,\n      render,\n      componentDidRender,\n      componentDidLoad,\n      disconnectedCallback,\n    } = component;\n    let unsubscribeLanguage = () => {};\n\n    if (bindingsProperty !== 'bindings') {\n      return console.error(\n        `The InitializeBindings decorator should be used on a property called \"bindings\", and not \"${bindingsProperty}\"`,\n        component\n      );\n    }\n\n    component.componentWillLoad = function () {\n      const element = getElement(this);\n      element.setAttribute(renderedAttribute, 'false');\n      element.setAttribute(loadedAttribute, 'false');\n      const event = buildCustomEvent(\n        initializeEventName,\n        (bindings: SpecificBindings) => {\n          this.bindings = bindings;\n\n          const updateLanguage = () => forceUpdateComponent(this);\n          this.bindings.i18n.on('languageChanged', updateLanguage);\n          unsubscribeLanguage = () =>\n            this.bindings.i18n.off('languageChanged', updateLanguage);\n\n          try {\n            // When no controller is initialized, updating a property with a State() decorator, there will be no re-render.\n            // In this case, we have to manually trigger it.\n            if (this.initialize) {\n              this.initialize();\n              if (forceUpdate) {\n                forceUpdateComponent(this);\n              }\n            } else {\n              forceUpdateComponent(this);\n            }\n          } catch (e) {\n            this.error = e as Error;\n          }\n        }\n      );\n      const parent = closest(element, initializableElements.join(', '));\n      if (!parent) {\n        this.error = new MissingInterfaceParentError(\n          element.nodeName.toLowerCase()\n        );\n        return;\n      }\n      enqueueOrDispatchInitializationEvent(\n        parent,\n        event as InitializeEvent,\n        element\n      );\n      return componentWillLoad && componentWillLoad.call(this);\n    };\n\n    component.render = function () {\n      if (this.error) {\n        return (\n          <atomic-component-error\n            element={getElement(this)}\n            error={this.error}\n          ></atomic-component-error>\n        );\n      }\n\n      if (!this.bindings) {\n        return <Hidden></Hidden>;\n      }\n\n      getElement(this).setAttribute(renderedAttribute, 'true');\n      return render && render.call(this);\n    };\n\n    component.disconnectedCallback = function () {\n      const element = getElement(this);\n      element.setAttribute(renderedAttribute, 'false');\n      element.setAttribute(loadedAttribute, 'false');\n      unsubscribeLanguage();\n      disconnectedCallback && disconnectedCallback.call(this);\n    };\n\n    component.componentDidRender = function () {\n      const element = getElement(this);\n      if (element.getAttribute(renderedAttribute) === 'false') {\n        return;\n      }\n\n      componentDidRender && componentDidRender.call(this);\n      if (element.getAttribute(loadedAttribute) === 'false') {\n        element.setAttribute(loadedAttribute, 'true');\n        componentDidLoad && componentDidLoad.call(this);\n      }\n    };\n\n    component.componentDidLoad = function () {};\n  };\n}\n\n/**\n * A [StencilJS property decorator](https://stenciljs.com/) is used together with the [State decorator](https://stenciljs.com/docs/state#state-decorator).\n * This allows the Stencil component state property to automatically get updates from a [Coveo Headless controller](https://docs.coveo.com/en/headless/latest/usage/#use-headless-controllers).\n *\n * @example\n * @BindStateToController('pager') @State() private pagerState!: PagerState;\n *\n * For more information and examples, view the \"Utilities\" section of the readme.\n *\n * @param controllerProperty The controller property to subscribe to. The controller has to be created inside of the `initialize` method.\n * @param options The configurable `BindStateToController` options.\n *\n * @deprecated To be used for Stencil components. For Lit components. use `bindStateToController` from '../decorators/bind-state.ts'\n */\nexport function BindStateToController(\n  controllerProperty: string,\n  options?: {\n    /**\n     * Component's method to be called when state is updated.\n     */\n    onUpdateCallbackMethod?: string;\n  }\n) {\n  return (\n    component: InitializableComponent<AnyBindings>,\n    stateProperty: string\n  ) => {\n    const {disconnectedCallback, initialize} = component;\n\n    component.initialize = function () {\n      initialize && initialize.call(this);\n\n      if (!initialize) {\n        return console.error(\n          `ControllerState: The \"initialize\" method has to be defined and instantiate a controller for the property ${controllerProperty}`,\n          component\n        );\n      }\n\n      if (!this[controllerProperty]) {\n        return;\n      }\n\n      if (\n        options?.onUpdateCallbackMethod &&\n        !this[options.onUpdateCallbackMethod]\n      ) {\n        return console.error(\n          `ControllerState: The onUpdateCallbackMethod property \"${options.onUpdateCallbackMethod}\" is not defined`,\n          component\n        );\n      }\n\n      this.unsubscribeController = this[controllerProperty].subscribe(() => {\n        this[stateProperty] = this[controllerProperty].state;\n        options?.onUpdateCallbackMethod &&\n          this[options.onUpdateCallbackMethod]();\n      });\n    };\n\n    component.disconnectedCallback = function () {\n      !getElement(this).isConnected && this.unsubscribeController?.();\n      disconnectedCallback && disconnectedCallback.call(this);\n    };\n  };\n}\n\ninterface DeferredExecution {\n  args: unknown[];\n}\n\nexport function DeferUntilRender() {\n  return (component: ComponentInterface, methodName: string) => {\n    const {componentDidRender, connectedCallback} = component;\n    const originalMethod = component[methodName] as Function;\n    let deferredExecutions: DeferredExecution[] = [];\n\n    component.connectedCallback = function () {\n      this[methodName] = function (...args: unknown[]) {\n        deferredExecutions.push({args});\n      };\n      connectedCallback && connectedCallback.call(this);\n    };\n\n    component.componentDidRender = function () {\n      deferredExecutions.forEach(({args}) =>\n        originalMethod.call(this, ...args)\n      );\n      deferredExecutions = [];\n      componentDidRender && componentDidRender.call(this);\n    };\n  };\n}\n\nexport type I18nState = Record<string, (variables?: TOptions) => string>;\nexport type AtomicInterface = HTMLElement & {\n  engine?: CoreEngine;\n  bindings?: Bindings;\n};\n"],"version":3}