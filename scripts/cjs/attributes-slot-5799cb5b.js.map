{"file":"attributes-slot-5799cb5b.js","mappings":";;;;SAEgB,yBAAyB,CAAC,IAAiB,EAAE,QAAgB;IAC3E,MAAM,cAAc,GAAGA,8BAAoB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC5D,IAAI,CAAC,cAAc,EAAE;QACnB,OAAO;KACR;IAED,IAAI,cAAc,CAAC,QAAQ,KAAK,GAAG,EAAE;QACnC,OAAO,CAAC,IAAI,CACV,eAAe,QAAQ,wBAAwB,EAC/C,cAAc,CACf,CAAC;QACF,OAAO;KACR;IAED,OAAO,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC,EAAC,QAAQ,EAAC;QAC7D,IAAI,QAAQ,KAAK,MAAM,EAAE;YACvB,OAAO,KAAK,CAAC;SACd;QAED,IAAI,QAAQ,KAAK,MAAM,EAAE;YACvB,OAAO,CAAC,IAAI,CACV,4EAA4E,CAC7E,CAAC;YACF,OAAO,KAAK,CAAC;SACd;QAED,OAAO,IAAI,CAAC;KACb,CAAC,CAAC;AACL;;;;","names":["getNamedSlotFromHost"],"sources":["src/components/common/item-link/attributes-slot.ts"],"sourcesContent":["import {getNamedSlotFromHost} from '../../../utils/slot-utils';\n\nexport function getAttributesFromLinkSlot(host: HTMLElement, slotName: string) {\n  const attributesSlot = getNamedSlotFromHost(host, slotName);\n  if (!attributesSlot) {\n    return;\n  }\n\n  if (attributesSlot.nodeName !== 'A') {\n    console.warn(\n      `Slot named \"${slotName}\" should be an \"a\" tag`,\n      attributesSlot\n    );\n    return;\n  }\n\n  return Array.from(attributesSlot.attributes).filter(({nodeName}) => {\n    if (nodeName === 'slot') {\n      return false;\n    }\n\n    if (nodeName === 'href') {\n      console.warn(\n        'The \"href\" attribute set on the \"attributes\" slot element will be ignored.'\n      );\n      return false;\n    }\n\n    return true;\n  });\n}\n"],"version":3}