{"file":"atomic-insight-user-actions-modal.entry.cjs.js","mappings":"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","names":["rectEquals","h","Button","CloseIcon","Host","ATOMIC_MODAL_EXPORT_PARTS","InitializeBindings"],"sources":["src/components/insight/user-actions/atomic-insight-user-actions-modal/atomic-insight-user-actions-modal.pcss?tag=atomic-insight-user-actions-modal&encapsulation=shadow","src/components/insight/user-actions/atomic-insight-user-actions-modal/atomic-insight-user-actions-modal.tsx"],"sourcesContent":["@import '../../../common/refine-modal/refine-modal-common.pcss';\n:host {\n  position: absolute;\n}\n\natomic-modal::part(body-wrapper),\natomic-modal::part(footer-wrapper) {\n  padding: 2px;\n}\n","import {ATOMIC_MODAL_EXPORT_PARTS} from '@/src/components/common/atomic-modal/export-parts';\nimport {Component, h, State, Prop, Element, Watch, Host} from '@stencil/core';\nimport CloseIcon from '../../../../images/close.svg';\nimport {rectEquals} from '../../../../utils/dom-utils';\nimport {\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {Button} from '../../../common/stencil-button';\nimport {InsightBindings} from '../../atomic-insight-interface/atomic-insight-interface';\n\n/**\n * @internal\n * The `atomic-insight-user-actions-modal` is automatically created as a child of the `atomic-insight-interface` when the `atomic-insight-user-actions-toggle` is initialized.\n *\n * When the modal is opened, the CSS class `atomic-modal-opened` is added to the interface element and the body, allowing further customization.\n */\n@Component({\n  tag: 'atomic-insight-user-actions-modal',\n  styleUrl: 'atomic-insight-user-actions-modal.pcss',\n  shadow: true,\n})\nexport class AtomicInsightUserActionsModal\n  implements InitializableComponent<InsightBindings>\n{\n  @Element() public host!: HTMLElement;\n  @InitializeBindings() public bindings!: InsightBindings;\n  @State()\n  public error!: Error;\n  @State()\n  public interfaceDimensions?: DOMRect;\n\n  @Prop({mutable: true}) openButton?: HTMLElement;\n  @Prop({reflect: true, mutable: true}) isOpen = false;\n\n  /**\n   * The ID of the user whose actions are being displayed.\n   */\n  @Prop() public userId!: string;\n  /**\n   * The date and time when the case was created. For example \"2024-01-01T00:00:00Z\"\n   */\n  @Prop() public ticketCreationDateTime!: string;\n  /**\n   * The names of custom events to exclude.\n   */\n  @Prop() public excludedCustomActions: string[] = [];\n\n  public componentDidLoad() {\n    this.host.style.display = '';\n  }\n\n  @Watch('isOpen')\n  watchEnabled(isOpen: boolean) {\n    if (isOpen) {\n      this.onAnimationFrame();\n    }\n  }\n\n  private onAnimationFrame() {\n    if (!this.isOpen) {\n      return;\n    }\n    if (this.dimensionChanged()) {\n      this.updateDimensions();\n    }\n    window.requestAnimationFrame(() => this.onAnimationFrame());\n  }\n\n  private dimensionChanged() {\n    if (!this.interfaceDimensions) {\n      return true;\n    }\n\n    return !rectEquals(\n      this.interfaceDimensions,\n      this.bindings.interfaceElement.getBoundingClientRect()\n    );\n  }\n\n  public updateDimensions() {\n    this.interfaceDimensions =\n      this.bindings.interfaceElement.getBoundingClientRect();\n  }\n\n  public render() {\n    const renderHeader = () => {\n      return (\n        <div slot=\"header\" class=\"contents\">\n          <div part=\"title\" class=\"truncate font-light\">\n            {this.bindings.i18n.t('user-actions')}\n          </div>\n          <Button\n            style=\"text-transparent\"\n            class=\"grid place-items-center\"\n            part=\"close-button\"\n            onClick={() => (this.isOpen = false)}\n            ariaLabel={this.bindings.i18n.t('close')}\n          >\n            <atomic-icon\n              part=\"close-icon\"\n              class=\"h-5 w-5\"\n              icon={CloseIcon}\n            ></atomic-icon>\n          </Button>\n        </div>\n      );\n    };\n\n    const renderBody = () => {\n      return (\n        <aside\n          style={{height: '100%'}}\n          slot=\"body\"\n          class=\"adjust-for-scroll-bar flex w-full flex-col px-2\"\n        >\n          <atomic-insight-user-actions-timeline\n            userId={this.userId}\n            ticketCreationDateTime={this.ticketCreationDateTime}\n            excludedCustomActions={this.excludedCustomActions}\n            class=\"flex-1\"\n          ></atomic-insight-user-actions-timeline>\n        </aside>\n      );\n    };\n    return (\n      <Host>\n        {this.interfaceDimensions && (\n          <style>\n            {`atomic-modal::part(backdrop) {\n            top: ${this.interfaceDimensions.top}px;\n            left: ${this.interfaceDimensions.left}px;\n            width: ${this.interfaceDimensions.width}px;\n            height: ${this.interfaceDimensions.height}px;\n            }`}\n          </style>\n        )}\n        <atomic-modal\n          fullscreen\n          isOpen={this.isOpen}\n          source={this.openButton}\n          container={this.host}\n          close={() => (this.isOpen = false)}\n          exportparts={ATOMIC_MODAL_EXPORT_PARTS}\n          scope={this.bindings.interfaceElement}\n        >\n          {renderHeader()}\n          {renderBody()}\n        </atomic-modal>\n      </Host>\n    );\n  }\n}\n"],"version":3}