{"file":"atomic-insight-tab.entry.cjs.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA,MAAM,mBAAmB,GAAG,si2DAAsi2D,CAAC;AACnk2D,+BAAe,mBAAmB;;;;;;;;;;;;MCyBrB,gBAAgB;;;QAInB,UAAK,GAAGA,cAAQ,CAAC,aAAa,CAAC,CAAC;QAOvB,gBAAW,GAAG,KAAK,CAAC;;;;QASP,UAAK,GAAG,UAAU,CAAC;;;;;QAMJ,WAAM,GAAG,KAAK,CAAC;QAOpD,gBAAW,GAAgB,SAAQ,CAAC;;2BAtBb,KAAK;;qBASE,UAAU;sBAMM,KAAK;;;;;;IAa3D,MAAM,MAAM;QACV,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC;KACnB;IAEM,UAAU;QACf,IAAI,CAAC,GAAG,GAAGC,gBAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;YAC/C,OAAO,EAAE,EAAC,UAAU,EAAE,IAAI,CAAC,UAAU,EAAE,EAAE,EAAE,IAAI,CAAC,KAAK,EAAC;YACtD,YAAY,EAAE,EAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,EAAC;SACtC,CAAC,CAAC;QACH,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CACnC,OAAO,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAC9C,CAAC;QACFC,6BAAuB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,WAAW;YACvD,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;SAChC,CAAC,CAAC;KACJ;IAEM,kBAAkB;QACvBC,2BAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC9B;IAEM,oBAAoB;QACzB,IAAI,CAAC,WAAW,EAAE,CAAC;KACpB;IAEM,MAAM;QACX,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACrB,OAAO;SACR;QAED,QACEC,QAACC,oBAAM,IACL,KAAK,EAAC,kBAAkB,EACxB,IAAI,EAAC,KAAK,EACV,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,QAAQ,GAAG,EAAE,EAC7C,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,YAAY,EAAE,EAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EAAC,CAAC,EAClE,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,WAAW,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,EACxC,OAAO,EAAE,MAAM,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,IAE/B,IAAI,CAAC,KAAK,CACJ,EACT;KACH;;;AA1E4B;IAA5BC,sCAAkB,EAAE;kDAAmC;AAOhD;IAFPC,yCAAqB,CAAC,KAAK,CAAC;kDAEM;;;;;","names":["randomID","buildInsightTab","createAppLoadedListener","dispatchTabLoaded","h","Button","InitializeBindings","BindStateToController"],"sources":["src/components/insight/atomic-insight-tab/atomic-insight-tab.pcss?tag=atomic-insight-tab&encapsulation=shadow","src/components/insight/atomic-insight-tab/atomic-insight-tab.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\n\n.active {\n  &::after {\n    @apply bg-primary absolute bottom-0 block h-1 w-full rounded;\n    content: '';\n  }\n}\n\n[part='tab'] {\n  @apply relative mt-1 mr-6 pb-3 font-semibold;\n  max-width: 150px;\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n","import {Unsubscribe} from '@coveo/headless';\nimport {\n  buildTab as buildInsightTab,\n  Tab as InsightTab,\n  TabState as InsightTabState,\n} from '@coveo/headless/insight';\nimport {Component, h, Prop, State, Method, Element} from '@stencil/core';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {randomID} from '../../../utils/utils';\nimport {createAppLoadedListener} from '../../common/interface/store';\nimport {Button} from '../../common/stencil-button';\nimport {dispatchTabLoaded, TabCommon} from '../../common/tabs/tab-common';\nimport {InsightBindings} from '../atomic-insight-interface/atomic-insight-interface';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-tab',\n  styleUrl: './atomic-insight-tab.pcss',\n  shadow: true,\n})\nexport class AtomicInsightTab\n  implements TabCommon, InitializableComponent<InsightBindings>\n{\n  private tab!: InsightTab;\n  private tabId = randomID('insight-tab');\n\n  @Element() host!: HTMLElement;\n\n  @InitializeBindings() public bindings!: InsightBindings;\n\n  @State() public error!: Error;\n  @State() private isAppLoaded = false;\n\n  @BindStateToController('tab')\n  @State()\n  private tabState!: InsightTabState;\n\n  /**\n   * The label that will be shown to the user.\n   */\n  @Prop({reflect: true}) public label = 'no-label';\n\n  /**\n   * Whether this tab is active upon rendering.\n   * If multiple tabs are set to active on render, the last one to be rendered will override the others.\n   */\n  @Prop({reflect: true, mutable: true}) public active = false;\n\n  /**\n   * The expression that will be passed to the search as a `cq` paramenter upon being selected.\n   */\n  @Prop() public expression!: string;\n\n  private unsubscribe: Unsubscribe = () => {};\n\n  /**\n   * Activates the tab.\n   */\n  @Method()\n  async select() {\n    this.tab.select();\n  }\n\n  public initialize() {\n    this.tab = buildInsightTab(this.bindings.engine, {\n      options: {expression: this.expression, id: this.tabId},\n      initialState: {isActive: this.active},\n    });\n    this.unsubscribe = this.tab.subscribe(\n      () => (this.active = this.tab.state.isActive)\n    );\n    createAppLoadedListener(this.bindings.store, (isAppLoaded) => {\n      this.isAppLoaded = isAppLoaded;\n    });\n  }\n\n  public componentDidRender() {\n    dispatchTabLoaded(this.host);\n  }\n\n  public disconnectedCallback() {\n    this.unsubscribe();\n  }\n\n  public render() {\n    if (!this.isAppLoaded) {\n      return;\n    }\n\n    return (\n      <Button\n        style=\"text-transparent\"\n        part=\"tab\"\n        class={this.tabState.isActive ? 'active' : ''}\n        ariaLabel={this.bindings.i18n.t('tab-search', {label: this.label})}\n        title={this.label}\n        ariaPressed={`${this.tabState.isActive}`}\n        onClick={() => this.tab.select()}\n      >\n        {this.label}\n      </Button>\n    );\n  }\n}\n"],"version":3}