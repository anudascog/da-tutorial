{"version":3,"names":["atomicSmartSnippetCollapseWrapperCss","AtomicSmartSnippetCollapseWrapperStyle0","AtomicSmartSnippetCollapseWrapper","this","isExpanded","showButton","shouldRenderButton","maximumHeight","validateProps","collapsedHeight","Error","initialize","componentDidRender","fullHeight","undefined","initializeFullHeight","host","getBoundingClientRect","height","style","setProperty","renderButton","h","onClick","class","part","bindings","i18n","t","icon","ArrowDown","render","Host","key","__decorate","InitializeBindings","atomicSmartSnippetExpandableAnswerCss","AtomicSmartSnippetExpandableAnswerStyle0","AtomicSmartSnippetExpandableAnswer","fullHeightUpdated","establishInitialHeight","answerElement","document","createElement","htmlContent","innerStyle","snippetStyle","visibility","position","Promise","resolve","listenOnce","event","remove","detail","parentElement","appendChild","expanded","componentWillLoad","renderAnswer","exportparts","onAnswerSizeUpdated","e","onSelectInlineLink","selectInlineLink","emit","onBeginDelayedSelectInlineLink","beginDelayedSelectInlineLink","onCancelPendingSelectInlineLink","cancelPendingSelectInlineLink","collapse","expand"],"sources":["src/components/common/smart-snippets/atomic-smart-snippet-collapse-wrapper/atomic-smart-snippet-collapse-wrapper.pcss?tag=atomic-smart-snippet-collapse-wrapper&encapsulation=shadow","src/components/common/smart-snippets/atomic-smart-snippet-collapse-wrapper/atomic-smart-snippet-collapse-wrapper.tsx","src/components/common/smart-snippets/atomic-smart-snippet-expandable-answer/atomic-smart-snippet-expandable-answer.pcss?tag=atomic-smart-snippet-expandable-answer&encapsulation=shadow","src/components/common/smart-snippets/atomic-smart-snippet-expandable-answer/atomic-smart-snippet-expandable-answer.tsx"],"sourcesContent":["@import '../../../../global/global.pcss';\n@import '../../../../utils/tailwind-utilities/set-font-size.tw.css';\n\n/**\n * @prop --atomic-smart-snippet-gradient-start: At which height to start fading out a truncated answer.\n */\n:host {\n  &::part(smart-snippet-collapse-wrapper) {\n    @apply set-font-size-lg;\n\n    height: auto;\n    max-height: var(--collapsed-size);\n\n    --gradient-start: var(\n      --atomic-smart-snippet-gradient-start,\n      calc(max(var(--collapsed-size) - (var(--line-height) * 1.5), var(--collapsed-size) * 0.5))\n    );\n    @apply text-on-background;\n    mask-image: linear-gradient(black, black var(--gradient-start), transparent 100%);\n\n    transition: max-height 2s cubic-bezier(0, 1, 0.16, 1) -1.82s;\n  }\n\n  button atomic-icon {\n    @apply relative top-0.5;\n  }\n}\n\n:host(.expanded) {\n  &::part(smart-snippet-collapse-wrapper) {\n    height: auto;\n    max-height: 9999999px;\n    transition: max-height 2s cubic-bezier(1, 0, 1, 0) 0s;\n    mask-image: none;\n  }\n\n  button atomic-icon {\n    @apply top-0 -scale-y-100;\n  }\n}\n","import {Component, h, Element, State, Prop, Host} from '@stencil/core';\nimport ArrowDown from '../../../../images/arrow-down.svg';\nimport {InitializeBindings} from '../../../../utils/initialization-utils';\nimport {AnyBindings} from '../../interface/bindings';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-smart-snippet-collapse-wrapper',\n  styleUrl: 'atomic-smart-snippet-collapse-wrapper.pcss',\n  shadow: true,\n})\nexport class AtomicSmartSnippetCollapseWrapper {\n  @InitializeBindings() public bindings!: AnyBindings;\n  public error!: Error;\n  @Element() public host!: HTMLElement;\n\n  @Prop({reflect: true}) public maximumHeight?: number;\n\n  @Prop({reflect: true}) public collapsedHeight?: number;\n\n  @State() public isExpanded = true;\n\n  @State() public showButton = true;\n\n  @State() private fullHeight?: number;\n\n  private shouldRenderButton = !!this.maximumHeight;\n\n  private validateProps() {\n    if (\n      this.maximumHeight &&\n      (!this.collapsedHeight || this.maximumHeight < this.collapsedHeight)\n    ) {\n      throw new Error(\n        'snippetMaximumHeight must be equal or greater than snippetCollapsedHeight'\n      );\n    }\n  }\n\n  public initialize() {\n    this.validateProps();\n  }\n\n  public componentDidRender() {\n    if (this.fullHeight === undefined && this.shouldRenderButton) {\n      this.initializeFullHeight();\n    }\n  }\n\n  private initializeFullHeight() {\n    this.fullHeight = this.host.getBoundingClientRect().height;\n    this.showButton = this.fullHeight! > this.maximumHeight!;\n    this.isExpanded = !this.showButton;\n    this.host.style.setProperty(\n      '--collapsed-size',\n      this.collapsedHeight + 'px'\n    );\n  }\n\n  private renderButton() {\n    if (!this.showButton) {\n      return;\n    }\n    return (\n      <button\n        onClick={() => (this.isExpanded = !this.isExpanded)}\n        class=\"text-primary mb-4 hover:underline\"\n        part={this.isExpanded ? 'show-less-button' : 'show-more-button'}\n      >\n        {this.bindings.i18n.t(this.isExpanded ? 'show-less' : 'show-more')}\n        <atomic-icon\n          icon={ArrowDown}\n          class=\"ml-2 w-3 align-baseline\"\n        ></atomic-icon>\n      </button>\n    );\n  }\n\n  render() {\n    return (\n      <Host\n        class={\n          this.fullHeight || !this.shouldRenderButton\n            ? this.isExpanded\n              ? 'expanded'\n              : ''\n            : 'invisible'\n        }\n      >\n        <div\n          part=\"smart-snippet-collapse-wrapper\"\n          class=\"block overflow-hidden\"\n        >\n          <slot></slot>\n        </div>\n        {this.shouldRenderButton && this.renderButton()}\n      </Host>\n    );\n  }\n}\n","@import '../../../../global/global.pcss';\n@import '../../../../utils/tailwind-utilities/set-font-size.tw.css';\n\n/**\n * @prop --atomic-smart-snippet-gradient-start: At which height to start fading out a truncated answer.\n */\n:host {\n  atomic-smart-snippet-answer {\n    @apply set-font-size-lg;\n\n    display: block;\n    overflow: hidden;\n    height: var(--collapsed-size);\n\n    --gradient-start: var(\n      --atomic-smart-snippet-gradient-start,\n      calc(max(var(--collapsed-size) - (var(--line-height) * 1.5), var(--collapsed-size) * 0.5))\n    );\n    @apply text-on-background;\n    mask-image: linear-gradient(black, black var(--gradient-start), transparent 100%);\n\n    &.loaded {\n      transition: height ease-in-out 0.25s;\n    }\n  }\n\n  button atomic-icon {\n    @apply relative top-0.5;\n  }\n\n  .expanded {\n    atomic-smart-snippet-answer {\n      height: var(--full-height);\n      mask-image: none;\n    }\n\n    button atomic-icon {\n      @apply top-0 -scale-y-100;\n    }\n  }\n}\n","import {InlineLink} from '@coveo/headless';\nimport {\n  h,\n  Component,\n  State,\n  Prop,\n  Element,\n  Watch,\n  Event,\n  EventEmitter,\n} from '@stencil/core';\nimport ArrowDown from '../../../../images/arrow-down.svg';\nimport {listenOnce} from '../../../../utils/event-utils';\nimport {InitializeBindings} from '../../../../utils/initialization-utils';\nimport {AnyBindings} from '../../interface/bindings';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-smart-snippet-expandable-answer',\n  styleUrl: 'atomic-smart-snippet-expandable-answer.pcss',\n  shadow: true,\n})\nexport class AtomicSmartSnippetExpandableAnswer {\n  @InitializeBindings() public bindings!: AnyBindings;\n  public error!: Error;\n  @Element() public host!: HTMLElement;\n\n  @Prop({reflect: true}) expanded!: boolean;\n  @Prop() htmlContent!: string;\n  /**\n   * The maximum height (in pixels) a snippet can have before the component truncates it and displays a \"show more\" button.\n   */\n  @Prop({reflect: true}) maximumHeight = 250;\n  /**\n   * When the answer is partly hidden, how much of its height (in pixels) should be visible.\n   */\n  @Prop({reflect: true}) collapsedHeight = 180;\n  /**\n   * Sets the style of the snippet.\n   *\n   * Example:\n   * ```ts\n   * expandableAnswer.snippetStyle = `\n   *   b {\n   *     color: blue;\n   *   }\n   * `;\n   * ```\n   */\n  @Prop() snippetStyle?: string;\n\n  @State() fullHeight?: number;\n\n  @Event() expand!: EventEmitter;\n  @Event() collapse!: EventEmitter;\n  @Event() selectInlineLink!: EventEmitter<InlineLink>;\n  @Event() beginDelayedSelectInlineLink!: EventEmitter<InlineLink>;\n  @Event() cancelPendingSelectInlineLink!: EventEmitter<InlineLink>;\n\n  private validateProps() {\n    if (this.maximumHeight < this.collapsedHeight) {\n      throw 'maximumHeight must be equal or greater than collapsedHeight';\n    }\n  }\n\n  public initialize() {\n    this.validateProps();\n  }\n\n  @Watch('fullHeight')\n  public fullHeightUpdated() {\n    this.host.style.setProperty('--full-height', `${this.fullHeight}px`);\n    this.host.style.setProperty(\n      '--collapsed-size',\n      `${this.showButton ? this.collapsedHeight : this.fullHeight}px`\n    );\n  }\n\n  private establishInitialHeight() {\n    const answerElement = document.createElement('atomic-smart-snippet-answer');\n    answerElement.htmlContent = this.htmlContent;\n    answerElement.innerStyle = this.snippetStyle;\n    answerElement.style.visibility = 'hidden';\n    answerElement.style.position = 'absolute';\n    return new Promise<number>((resolve) => {\n      listenOnce(answerElement, 'answerSizeUpdated', (event) => {\n        answerElement.remove();\n        resolve((event as CustomEvent<{height: number}>).detail.height);\n      });\n      this.host.parentElement!.appendChild(answerElement);\n    });\n  }\n\n  private get showButton() {\n    return this.fullHeight! > this.maximumHeight;\n  }\n\n  private get isExpanded() {\n    return this.expanded || !this.showButton;\n  }\n\n  public async componentWillLoad() {\n    this.fullHeight = await this.establishInitialHeight();\n  }\n\n  public renderAnswer() {\n    return (\n      <div part=\"truncated-answer\">\n        <atomic-smart-snippet-answer\n          exportparts=\"answer\"\n          htmlContent={this.htmlContent}\n          innerStyle={this.snippetStyle}\n          onAnswerSizeUpdated={(e) => (this.fullHeight = e.detail.height)}\n          onSelectInlineLink={(e) => this.selectInlineLink.emit(e.detail)}\n          onBeginDelayedSelectInlineLink={(e) =>\n            this.beginDelayedSelectInlineLink.emit(e.detail)\n          }\n          onCancelPendingSelectInlineLink={(e) =>\n            this.cancelPendingSelectInlineLink.emit(e.detail)\n          }\n        ></atomic-smart-snippet-answer>\n      </div>\n    );\n  }\n\n  public renderButton() {\n    if (!this.showButton) {\n      return;\n    }\n    return (\n      <button\n        onClick={() =>\n          this.isExpanded ? this.collapse.emit() : this.expand.emit()\n        }\n        class=\"text-primary mb-4 hover:underline\"\n        part={this.isExpanded ? 'show-less-button' : 'show-more-button'}\n      >\n        {this.bindings.i18n.t(this.isExpanded ? 'show-less' : 'show-more')}\n        <atomic-icon\n          icon={ArrowDown}\n          class=\"ml-2 w-3 align-baseline\"\n        ></atomic-icon>\n      </button>\n    );\n  }\n\n  public render() {\n    return (\n      <div class={this.isExpanded ? 'expanded' : ''}>\n        {this.renderAnswer()}\n        {this.renderButton()}\n      </div>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}