{"version":3,"names":["atomicFacetCss","AtomicFacetStyle0","AtomicFacet","this","label","tabsIncluded","tabsExcluded","numberOfValues","withSearch","sortCriteria","resultsMustMatch","displayValuesAs","isCollapsed","headingLevel","filterFacetCount","enableExclusion","injectionDepth","dependsOn","allowedValues","customSort","initialize","length","console","warn","facet","buildFacet","bindings","engine","options","facetOptions","facetId","state","searchStatus","buildSearchStatus","tabManager","buildTabManager","initAriaLive","initConditionManager","initPopover","registerFacet","disconnectedCallback","host","isConnected","facetConditionsManager","stopWatching","componentShouldUpdate","next","prev","propName","isFacetState","shouldUpdateFacetSearchComponent","facetSearch","render","h","FacetGuard","key","enabled","facetState","hasError","searchStatusState","firstSearchExecuted","hasResults","values","FacetContainer","FacetHeader","i18n","definedLabel","onClearFilters","focusTargets","header","focusAfterSearch","deselectAll","numberOfActiveValues","activeValues","onToggleCollapse","headerRef","el","setTarget","renderBody","FacetPlaceholder","Fragment","FacetSearchInputGuard","canShowMoreValues","numberOfDisplayedValues","FacetSearchInput","onChange","value","clear","updateCaptions","getFieldCaptions","field","updateText","search","onClear","query","shouldDisplaySearchResults","renderSearchResults","renderMatches","renderValues","renderShowMoreLess","renderValuesContainer","children","classes","FacetValuesGroup","class","part","map","FacetSearchValue","facetValueProps","facetCount","count","onExclude","exclude","onSelect","singleSelect","select","facetValue","rawValue","i","shouldFocusOnShowLessAfterInteraction","shouldFocusOnShowMoreAfterInteraction","FacetValue","numberOfResults","toggleExclude","toggleSingleSelect","toggleSelect","setRef","btn","showLessFocus","showMoreFocus","FacetShowMoreLess","onShowMore","showMore","showMoreValues","onShowLess","showLess","showLessValues","canShowLessValues","FacetSearchMatches","numberOfMatches","hasMoreMatches","moreValuesAvailable","showMoreMatches","showMoreResults","filter","undefined","tabs","included","excluded","facetSearchQuery","isHidden","buildFacetConditionsManager","conditions","parseDependsOn","store","facetInfo","initializePopover","hasValues","announceFacetSearchResultsWithAriaLive","msg","facetSearchAriaMessage","t","element","FocusTargetController","headerFocus","__decorate","InitializeBindings","BindStateToController","ArrayProp","MapProp","AriaLiveRegion"],"sources":["src/components/search/facets/atomic-facet/atomic-facet.pcss?tag=atomic-facet&encapsulation=shadow","src/components/search/facets/atomic-facet/atomic-facet.tsx"],"sourcesContent":["@import '../../../../global/global.pcss';\n@import '../../../common/facets/facet-search/facet-search.pcss';\n@import '../../../common/facets/facet-common.pcss';\n@import '../../../common/facets/facet-value-checkbox/facet-value-checkbox.pcss';\n@import '../../../common/facets/facet-value-exclude/facet-value-exclude.pcss';\n@import '../../../common/facets/facet-value-box/facet-value-box.pcss';\n","import {\n  Facet,\n  buildFacet,\n  FacetState,\n  FacetOptions,\n  FacetSortCriterion,\n  SearchStatus,\n  SearchStatusState,\n  buildSearchStatus,\n  buildFacetConditionsManager,\n  FacetResultsMustMatch,\n  FacetConditionsManager,\n  FacetValueRequest,\n  CategoryFacetValueRequest,\n  TabManagerState,\n  TabManager,\n  buildTabManager,\n} from '@coveo/headless';\nimport {\n  Component,\n  h,\n  State,\n  Prop,\n  Element,\n  VNode,\n  Fragment,\n} from '@stencil/core';\nimport {getFieldCaptions} from '../../../../utils/field-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {ArrayProp, MapProp} from '../../../../utils/props-utils';\nimport {\n  AriaLiveRegion,\n  FocusTargetController,\n} from '../../../../utils/stencil-accessibility-utils';\nimport {parseDependsOn} from '../../../common/facets/depends-on';\nimport {FacetInfo} from '../../../common/facets/facet-common-store';\nimport {FacetContainer} from '../../../common/facets/facet-container/stencil-facet-container';\nimport {FacetGuard} from '../../../common/facets/facet-guard';\nimport {FacetHeader} from '../../../common/facets/facet-header/stencil-facet-header';\nimport {FacetPlaceholder} from '../../../common/facets/facet-placeholder/facet-placeholder';\nimport {announceFacetSearchResultsWithAriaLive} from '../../../common/facets/facet-search/facet-search-aria-live';\nimport {\n  shouldDisplaySearchResults,\n  shouldUpdateFacetSearchComponent,\n} from '../../../common/facets/facet-search/facet-search-utils';\nimport {FacetSearchInput} from '../../../common/facets/facet-search/stencil-facet-search-input';\nimport {FacetSearchInputGuard} from '../../../common/facets/facet-search/stencil-facet-search-input-guard';\nimport {FacetSearchMatches} from '../../../common/facets/facet-search/stencil-facet-search-matches';\nimport {FacetSearchValue} from '../../../common/facets/facet-search/stencil-facet-search-value';\nimport {FacetShowMoreLess} from '../../../common/facets/facet-show-more-less/stencil-facet-show-more-less';\nimport {\n  FacetValueProps,\n  FacetValue,\n} from '../../../common/facets/facet-value/stencil-facet-value';\nimport {FacetValuesGroup} from '../../../common/facets/facet-values-group/stencil-facet-values-group';\nimport {initializePopover} from '../../../common/facets/popover/popover-type';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\n\n/**\n * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).\n * An `atomic-facet` displays a facet of the results for the current query.\n *\n * @part facet - The wrapper for the entire facet.\n * @part placeholder - The placeholder shown before the first search is executed.\n *\n * @part label-button - The button that displays the label and allows to expand/collapse the facet.\n * @part label-button-icon - The label button icon.\n * @part clear-button - The button that resets the actively selected facet values.\n * @part clear-button-icon - The clear button icon.\n *\n * @part search-wrapper - The search box wrapper.\n * @part search-input - The search box input.\n * @part search-icon - The search box submit button.\n * @part search-clear-button - The button to clear the search box of input.\n * @part more-matches - The label indicating there are more matches for the current facet search query.\n * @part no-matches - The label indicating there are no matches for the current facet search query.\n * @part matches-query - The highlighted query inside the matches labels.\n * @part search-highlight - The highlighted query inside the facet values.\n *\n * @part values - The facet values container.\n * @part value-label - The facet value label, common for all displays.\n * @part value-count - The facet value count, common for all displays.\n *\n * @part value-checkbox - The facet value checkbox, available when display is 'checkbox'.\n * @part value-checkbox-checked - The checked facet value checkbox, available when display is 'checkbox'.\n * @part value-checkbox-label - The facet value checkbox clickable label, available when display is 'checkbox'.\n * @part value-checkbox-icon - The facet value checkbox icon, available when display is 'checkbox'.\n * @part value-link - The facet value when display is 'link'.\n * @part value-link-selected - The selected facet value when display is 'link'.\n * @part value-box - The facet value when display is 'box'.\n * @part value-box-selected - The selected facet value when display is 'box'.\n * @part value-exclude-button - The button to exclude a facet value, available when display is 'checkbox'.\n *\n * @part show-more - The show more results button.\n * @part show-less - The show less results button.\n * @part show-more-less-icon - The icons of the show more & show less buttons.\n */\n@Component({\n  tag: 'atomic-facet',\n  styleUrl: 'atomic-facet.pcss',\n  shadow: true,\n})\nexport class AtomicFacet implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  public facet!: Facet;\n  public searchStatus!: SearchStatus;\n  public tabManager!: TabManager;\n  @Element() private host!: HTMLElement;\n\n  @BindStateToController('facet')\n  @State()\n  public facetState!: FacetState;\n  @BindStateToController('searchStatus')\n  @State()\n  public searchStatusState!: SearchStatusState;\n  @BindStateToController('tabManager')\n  @State()\n  public tabManagerState!: TabManagerState;\n  @State() public error!: Error;\n\n  /**\n   * Specifies a unique identifier for the facet.\n   */\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\n  /**\n   * The non-localized label for the facet.\n   * Used in the `atomic-breadbox` component through the bindings store.\n   */\n  @Prop({reflect: true}) public label = 'no-label';\n  /**\n   * The field whose values you want to display in the facet.\n   */\n  @Prop({reflect: true}) public field!: string;\n  /**\n   * The tabs on which the facet can be displayed. This property should not be used at the same time as `tabs-excluded`.\n   *\n   * Set this property as a stringified JSON array, e.g.,\n   * ```html\n   *  <atomic-facet tabs-included='[\"tabIDA\", \"tabIDB\"]'></atomic-facet>\n   * ```\n   * If you don't set this property, the facet can be displayed on any tab. Otherwise, the facet can only be displayed on the specified tabs.\n   */\n  @ArrayProp()\n  @Prop({reflect: true, mutable: true})\n  public tabsIncluded: string[] | string = '[]';\n\n  /**\n   * The tabs on which this facet must not be displayed. This property should not be used at the same time as `tabs-included`.\n   *\n   * Set this property as a stringified JSON array, e.g.,\n   * ```html\n   *  <atomic-facet tabs-excluded='[\"tabIDA\", \"tabIDB\"]'></atomic-facet>\n   * ```\n   * If you don't set this property, the facet can be displayed on any tab. Otherwise, the facet won't be displayed on any of the specified tabs.\n   */\n  @ArrayProp()\n  @Prop({reflect: true, mutable: true})\n  public tabsExcluded: string[] | string = '[]';\n\n  /**\n   * The number of values to request for this facet.\n   * Also determines the number of additional values to request each time more values are shown.\n   */\n  @Prop({reflect: true}) public numberOfValues = 8;\n\n  /**\n   * Whether this facet should contain a search box.\n   *\n   */\n  @Prop({reflect: true}) public withSearch = true;\n  /**\n   * The sort criterion to apply to the returned facet values.\n   * Possible values are 'score', 'alphanumeric', 'alphanumericDescending', 'occurrences', alphanumericNatural', 'alphanumericNaturalDescending' and 'automatic'.\n   */\n  @Prop({reflect: true}) public sortCriteria: FacetSortCriterion = 'automatic';\n  /**\n   * Specifies how a result must match the selected facet values.\n   * Allowed values:\n   * - `atLeastOneValue`: A result will match if at least one of the corresponding facet values is selected.\n   * - `allValues`: A result will match if all corresponding facet values are selected.\n   */\n  @Prop({reflect: true}) public resultsMustMatch: FacetResultsMustMatch =\n    'atLeastOneValue';\n  /**\n   * Whether to display the facet values as checkboxes (multiple selection), links (single selection) or boxes (multiple selection).\n   * Possible values are 'checkbox', 'link', and 'box'.\n   */\n  @Prop({reflect: true}) public displayValuesAs: 'checkbox' | 'link' | 'box' =\n    'checkbox';\n  /**\n   * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.\n   */\n  @Prop({reflect: true, mutable: true}) public isCollapsed = false;\n  /**\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.\n   */\n  @Prop({reflect: true}) public headingLevel = 0;\n  /**\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\n   *\n   *\n   * Note: Resulting count is only an estimation, in some cases this value could be incorrect.\n   */\n  @Prop({reflect: true}) public filterFacetCount = true;\n  /**\n   * Whether to allow excluding values from the facet.\n   */\n  @Prop({reflect: true}) public enableExclusion = false;\n  /**\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\n   * Note: A high injectionDepth may negatively impact the facet request performance.\n   * Minimum: `0`\n   * Default: `1000`\n   */\n  @Prop() public injectionDepth = 1000;\n\n  /**\n   * The required facets and values for this facet to be displayed.\n   * Examples:\n   * ```html\n   * <atomic-facet facet-id=\"abc\" field=\"objecttype\" ...></atomic-facet>\n   *\n   * <!-- To show the facet when any value is selected in the facet with id \"abc\": -->\n   * <atomic-facet\n   *   depends-on-abc\n   *   ...\n   * ></atomic-facet>\n   *\n   * <!-- To show the facet when value \"doc\" is selected in the facet with id \"abc\": -->\n   * <atomic-facet\n   *   depends-on-abc=\"doc\"\n   *   ...\n   * ></atomic-facet>\n   * ```\n   */\n  @MapProp() @Prop() public dependsOn: Record<string, string> = {};\n  /**\n   * Specifies an explicit list of `allowedValues` in the Search API request, as a JSON string representation.\n   *\n   * If you specify a list of values for this option, the facet uses only these values (if they are available in\n   * the current result set).\n   *\n   * Example:\n   *\n   * The following facet only uses the `Contact`, `Account`, and `File` values of the `objecttype` field. Even if the\n   * current result set contains other `objecttype` values, such as `Message`, or `Product`, the facet does not use\n   * those other values.\n   *\n   * ```html\n   * <atomic-facet field=\"objecttype\" allowed-values='[\"Contact\",\"Account\",\"File\"]'></atomic-facet>\n   * ```\n   *\n   * The maximum amount of allowed values is 25.\n   *\n   * Default value is `undefined`, and the facet uses all available values for its `field` in the current result set.\n   */\n  @ArrayProp()\n  @Prop({mutable: true})\n  public allowedValues: string[] | string = '[]';\n\n  /**\n   * Identifies the facet values that must appear at the top, in this order.\n   * This parameter can be used in conjunction with the `sortCriteria` parameter.\n   *\n   * Facet values not part of the `customSort` list will be sorted according to the `sortCriteria`.\n   *\n   * Example:\n   *\n   * The following facet will sort the `Contact`, `Account`, and `File` values at the top of the list for the `objecttype` field.\n   *\n   * If there are more than these 3 values available, the rest of the list will be sorted using `occurrences`.\n   *\n   * ```html\n   * <atomic-facet field=\"objecttype\" custom-sort='[\"Contact\",\"Account\",\"File\"]' sort-criteria='occurrences'></atomic-facet>\n   * ```\n   * The maximum amount of custom sort values is 25.\n   *\n   * The default value is `undefined`, and the facet values will be sorted using only the `sortCriteria`.\n   */\n  @ArrayProp()\n  @Prop({mutable: true})\n  public customSort: string[] | string = '[]';\n\n  private showLessFocus?: FocusTargetController;\n  private showMoreFocus?: FocusTargetController;\n  private headerFocus?: FocusTargetController;\n  private facetConditionsManager?: FacetConditionsManager;\n\n  @AriaLiveRegion('facet-search')\n  protected facetSearchAriaMessage!: string;\n\n  public initialize() {\n    if (\n      [...this.tabsIncluded].length > 0 &&\n      [...this.tabsExcluded].length > 0\n    ) {\n      console.warn(\n        'Values for both \"tabs-included\" and \"tabs-excluded\" have been provided. This is could lead to unexpected behaviors.'\n      );\n    }\n\n    if (this.displayValuesAs !== 'checkbox' && this.enableExclusion) {\n      console.warn(\n        'The \"enableExclusion\" property is only available when \"displayValuesAs\" is set to \"checkbox\".'\n      );\n    }\n\n    this.facet = buildFacet(this.bindings.engine, {options: this.facetOptions});\n    this.facetId = this.facet.state.facetId;\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\n    this.tabManager = buildTabManager(this.bindings.engine);\n    this.initAriaLive();\n    this.initConditionManager();\n    this.initPopover();\n    this.registerFacet();\n  }\n\n  public disconnectedCallback() {\n    if (this.host.isConnected) {\n      return;\n    }\n    this.facetConditionsManager?.stopWatching();\n  }\n\n  public componentShouldUpdate(\n    next: FacetState,\n    prev: FacetState,\n    propName: keyof AtomicFacet\n  ) {\n    if (\n      this.isFacetState(prev, propName) &&\n      this.isFacetState(next, propName)\n    ) {\n      return shouldUpdateFacetSearchComponent(\n        next.facetSearch,\n        prev.facetSearch\n      );\n    }\n    return true;\n  }\n\n  public render() {\n    return (\n      <FacetGuard\n        enabled={this.facetState.enabled}\n        hasError={this.searchStatusState.hasError}\n        firstSearchExecuted={this.searchStatusState.firstSearchExecuted}\n        hasResults={this.facetState.values.length > 0}\n      >\n        {this.searchStatusState.firstSearchExecuted ? (\n          <FacetContainer>\n            <FacetHeader\n              i18n={this.bindings.i18n}\n              label={this.definedLabel}\n              onClearFilters={() => {\n                this.focusTargets.header.focusAfterSearch();\n                this.facet.deselectAll();\n              }}\n              numberOfActiveValues={this.activeValues.length}\n              isCollapsed={this.isCollapsed}\n              headingLevel={this.headingLevel}\n              onToggleCollapse={() => (this.isCollapsed = !this.isCollapsed)}\n              headerRef={(el) => this.focusTargets.header.setTarget(el)}\n            ></FacetHeader>\n            {this.renderBody()}\n          </FacetContainer>\n        ) : (\n          <FacetPlaceholder\n            numberOfValues={this.numberOfValues}\n            isCollapsed={this.isCollapsed}\n          />\n        )}\n      </FacetGuard>\n    );\n  }\n\n  private renderBody() {\n    if (this.isCollapsed) {\n      return;\n    }\n    return (\n      <Fragment>\n        <FacetSearchInputGuard\n          canShowMoreValues={this.facetState.canShowMoreValues}\n          numberOfDisplayedValues={this.facetState.values.length}\n          withSearch={this.withSearch}\n        >\n          <FacetSearchInput\n            i18n={this.bindings.i18n}\n            label={this.definedLabel}\n            onChange={(value) => {\n              if (value === '') {\n                this.facet.facetSearch.clear();\n                return;\n              }\n              this.facet.facetSearch.updateCaptions(\n                getFieldCaptions(this.field, this.bindings.i18n)\n              );\n              this.facet.facetSearch.updateText(value);\n              this.facet.facetSearch.search();\n            }}\n            onClear={() => this.facet.facetSearch.clear()}\n            query={this.facetState.facetSearch.query}\n          />\n        </FacetSearchInputGuard>\n        {shouldDisplaySearchResults(this.facetState.facetSearch)\n          ? [this.renderSearchResults(), this.renderMatches()]\n          : [this.renderValues(), this.renderShowMoreLess()]}\n      </Fragment>\n    );\n  }\n\n  private renderValuesContainer(children: VNode[], query?: string) {\n    const classes = `mt-3 ${\n      this.displayValuesAs === 'box' ? 'box-container' : ''\n    }`;\n    return (\n      <FacetValuesGroup\n        i18n={this.bindings.i18n}\n        label={this.label}\n        query={query}\n      >\n        <ul class={classes} part=\"values\">\n          {children}\n        </ul>\n      </FacetValuesGroup>\n    );\n  }\n\n  private renderSearchResults() {\n    return this.renderValuesContainer(\n      this.facet.state.facetSearch.values.map((value) => (\n        <FacetSearchValue\n          {...this.facetValueProps}\n          facetCount={value.count}\n          onExclude={() => this.facet.facetSearch.exclude(value)}\n          onSelect={() =>\n            this.displayValuesAs === 'link'\n              ? this.facet.facetSearch.singleSelect(value)\n              : this.facet.facetSearch.select(value)\n          }\n          facetValue={value.rawValue}\n        />\n      ))\n    );\n  }\n\n  private renderValues() {\n    return this.renderValuesContainer(\n      this.facet.state.values.map((value, i) => {\n        const shouldFocusOnShowLessAfterInteraction = i === 0;\n        const shouldFocusOnShowMoreAfterInteraction =\n          i ===\n          (this.sortCriteria === 'automatic'\n            ? 0\n            : this.facet.state.values.length - this.numberOfValues);\n\n        return (\n          <FacetValue\n            {...this.facetValueProps}\n            facetCount={value.numberOfResults}\n            onExclude={() => this.facet.toggleExclude(value)}\n            onSelect={() =>\n              this.displayValuesAs === 'link'\n                ? this.facet.toggleSingleSelect(value)\n                : this.facet.toggleSelect(value)\n            }\n            facetValue={value.value}\n            facetState={value.state}\n            setRef={(btn) => {\n              if (shouldFocusOnShowLessAfterInteraction) {\n                this.showLessFocus?.setTarget(btn);\n              }\n              if (shouldFocusOnShowMoreAfterInteraction) {\n                this.showMoreFocus?.setTarget(btn);\n              }\n            }}\n          />\n        );\n      })\n    );\n  }\n\n  private renderShowMoreLess() {\n    return (\n      <FacetShowMoreLess\n        label={this.label}\n        i18n={this.bindings.i18n}\n        onShowMore={() => {\n          this.focusTargets.showMore.focusAfterSearch();\n          this.facet.showMoreValues();\n        }}\n        onShowLess={() => {\n          this.focusTargets.showLess.focusAfterSearch();\n          this.facet.showLessValues();\n        }}\n        canShowMoreValues={this.facet.state.canShowMoreValues}\n        canShowLessValues={this.facet.state.canShowLessValues}\n      ></FacetShowMoreLess>\n    );\n  }\n\n  private renderMatches() {\n    return (\n      <FacetSearchMatches\n        i18n={this.bindings.i18n}\n        query={this.facet.state.facetSearch.query}\n        numberOfMatches={this.facet.state.facetSearch.values.length}\n        hasMoreMatches={this.facet.state.facetSearch.moreValuesAvailable}\n        showMoreMatches={() => this.facet.facetSearch.showMoreResults()}\n      ></FacetSearchMatches>\n    );\n  }\n\n  private get activeValues() {\n    return this.facet.state.values.filter(({state}) => state !== 'idle');\n  }\n\n  private get facetOptions(): FacetOptions {\n    return {\n      facetId: this.facetId,\n      field: this.field,\n      numberOfValues: this.numberOfValues,\n      sortCriteria: this.sortCriteria,\n      resultsMustMatch: this.resultsMustMatch,\n      facetSearch: {numberOfValues: this.numberOfValues},\n      filterFacetCount: this.filterFacetCount,\n      injectionDepth: this.injectionDepth,\n      allowedValues: this.allowedValues.length\n        ? [...this.allowedValues]\n        : undefined,\n      customSort: this.customSort.length ? [...this.customSort] : undefined,\n      tabs: {\n        included: [...this.tabsIncluded],\n        excluded: [...this.tabsExcluded],\n      },\n    };\n  }\n\n  private get facetValueProps(): Pick<\n    FacetValueProps,\n    | 'displayValuesAs'\n    | 'facetSearchQuery'\n    | 'enableExclusion'\n    | 'field'\n    | 'i18n'\n  > {\n    return {\n      facetSearchQuery: this.facetState.facetSearch.query,\n      displayValuesAs: this.displayValuesAs,\n      enableExclusion: this.enableExclusion,\n      field: this.field,\n      i18n: this.bindings.i18n,\n    };\n  }\n\n  private get isHidden() {\n    return !this.facet.state.enabled || !this.facet.state.values.length;\n  }\n\n  private initConditionManager() {\n    this.facetConditionsManager = buildFacetConditionsManager(\n      this.bindings.engine,\n      {\n        facetId: this.facetId!,\n        conditions: parseDependsOn<\n          FacetValueRequest | CategoryFacetValueRequest\n        >(this.dependsOn),\n      }\n    );\n  }\n\n  private registerFacet() {\n    this.bindings.store.registerFacet('facets', this.facetInfo);\n  }\n\n  private initPopover() {\n    initializePopover(this.host, {\n      ...this.facetInfo,\n      hasValues: () => !!this.facet.state.values.length,\n      numberOfActiveValues: () => this.activeValues.length,\n    });\n  }\n\n  private initAriaLive() {\n    announceFacetSearchResultsWithAriaLive(\n      this.facet,\n      this.label,\n      (msg) => (this.facetSearchAriaMessage = msg),\n      this.bindings.i18n\n    );\n  }\n\n  private get facetInfo(): FacetInfo {\n    return {\n      label: () => this.bindings.i18n.t(this.label),\n      facetId: this.facetId!,\n      element: this.host,\n      isHidden: () => this.isHidden,\n    };\n  }\n\n  private get definedLabel() {\n    return this.label === 'no-label' && this.facetState?.label\n      ? this.facetState.label\n      : this.label;\n  }\n\n  private get focusTargets(): {\n    showLess: FocusTargetController;\n    showMore: FocusTargetController;\n    header: FocusTargetController;\n  } {\n    if (!this.showLessFocus) {\n      this.showLessFocus = new FocusTargetController(this);\n    }\n    if (!this.showMoreFocus) {\n      this.showMoreFocus = new FocusTargetController(this);\n    }\n    if (!this.headerFocus) {\n      this.headerFocus = new FocusTargetController(this);\n    }\n\n    return {\n      showLess: this.showLessFocus,\n      showMore: this.showMoreFocus,\n      header: this.headerFocus,\n    };\n  }\n\n  private isFacetState(state: unknown, propName: string): state is FacetState {\n    return (\n      propName === 'facetState' &&\n      typeof (state as FacetState)?.facetId === 'string'\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}