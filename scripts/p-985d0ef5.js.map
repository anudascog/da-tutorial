{"version":3,"names":["formatHumanReadable","manualRanges","field","i18n","facetValue","logger","formatter","manualRangeLabel","find","range","areRangesEqual","label","getFieldValueCaption","t","start","formatNumberLocalized","end","value","languages","error","firstRange","secondRange","endInclusive"],"sources":["src/components/common/facets/numeric-facet/formatter.ts"],"sourcesContent":["import {i18n} from 'i18next';\nimport {getFieldValueCaption} from '../../../../utils/field-utils';\nimport {NumberFormatter} from '../../formats/format-common';\n\nexport interface FacetValueRange {\n  endInclusive: boolean;\n  start: number;\n  end: number;\n  label?: string;\n  state: 'selected' | 'idle' | 'excluded';\n}\n\nexport interface FormatFacetValueRange {\n  field: string;\n  facetValue: FacetValueRange & {numberOfResults: number};\n  manualRanges: FacetValueRange[];\n  i18n: i18n;\n  logger: Pick<Console, 'error'>;\n  formatter: NumberFormatter;\n}\n\nexport const formatHumanReadable = ({\n  manualRanges,\n  field,\n  i18n,\n  facetValue,\n  logger,\n  formatter,\n}: FormatFacetValueRange) => {\n  const manualRangeLabel = manualRanges.find((range) =>\n    areRangesEqual(range, facetValue)\n  )?.label;\n  return manualRangeLabel\n    ? getFieldValueCaption(field, manualRangeLabel, i18n)\n    : i18n.t('to', {\n        start: formatNumberLocalized(facetValue.start, i18n, logger, formatter),\n        end: formatNumberLocalized(facetValue.end, i18n, logger, formatter),\n      });\n};\n\nexport const formatNumberLocalized = (\n  value: number,\n  i18n: FormatFacetValueRange['i18n'],\n  logger: FormatFacetValueRange['logger'],\n  formatter: FormatFacetValueRange['formatter']\n) => {\n  try {\n    return formatter(value, i18n.languages as string[]);\n  } catch (error) {\n    logger.error(\n      `atomic-numeric-facet facet value \"${value}\" could not be formatted correctly.`,\n      error\n    );\n    return value;\n  }\n};\n\nconst areRangesEqual = (\n  firstRange: FacetValueRange,\n  secondRange: FacetValueRange\n) => {\n  return (\n    firstRange.start === secondRange.start &&\n    firstRange.end === secondRange.end &&\n    firstRange.endInclusive === secondRange.endInclusive\n  );\n};\n"],"mappings":"0CAqBaA,EAAsB,EACjCC,eACAC,QACAC,OACAC,aACAC,SACAC,gBAEA,MAAMC,EAAmBN,EAAaO,MAAMC,GAC1CC,EAAeD,EAAOL,MACrBO,MACH,OAAOJ,EACHK,EAAqBV,EAAOK,EAAkBJ,GAC9CA,EAAKU,EAAE,KAAM,CACXC,MAAOC,EAAsBX,EAAWU,MAAOX,EAAME,EAAQC,GAC7DU,IAAKD,EAAsBX,EAAWY,IAAKb,EAAME,EAAQC,IACzD,EAGD,MAAMS,EAAwB,CACnCE,EACAd,EACAE,EACAC,KAEA,IACE,OAAOA,EAAUW,EAAOd,EAAKe,U,CAC7B,MAAOC,GACPd,EAAOc,MACL,qCAAqCF,uCACrCE,GAEF,OAAOF,C,GAIX,MAAMP,EAAiB,CACrBU,EACAC,IAGED,EAAWN,QAAUO,EAAYP,OACjCM,EAAWJ,MAAQK,EAAYL,KAC/BI,EAAWE,eAAiBD,EAAYC,oB","ignoreList":[]}